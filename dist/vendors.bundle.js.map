{"version":3,"sources":["webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_wks.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_global.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_core.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_export.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_hide.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_is-object.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_has.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_object-dp.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_descriptors.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_to-iobject.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_fails.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_redefine.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_uid.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_defined.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_object-keys.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_an-object.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_property-desc.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_cof.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_to-integer.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_object-pie.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_to-primitive.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_iobject.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_to-object.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_to-length.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_shared.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_add-to-unscopables.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_shared-key.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_enum-bug-keys.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_object-gops.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_set-to-string-tag.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_wks-ext.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_wks-define.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_library.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_iterators.js","webpack:///./node_modules/firebase/app/dist/index.cjs.js","webpack:///./node_modules/process/browser.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_ie8-dom-define.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_dom-create.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_ctx.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_array-methods.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_is-array.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_object-keys-internal.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_object-create.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_object-gopn.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_iter-define.js","webpack:///./node_modules/@firebase/app/dist/index.cjs.js","webpack:///./node_modules/@firebase/util/dist/index.cjs.js","webpack:///./node_modules/tslib/tslib.es6.js","webpack:///./node_modules/@firebase/polyfill/dist/index.esm.js","webpack:///./node_modules/whatwg-fetch/fetch.js","webpack:///./node_modules/promise-polyfill/lib/polyfill.js","webpack:///./node_modules/timers-browserify/main.js","webpack:///./node_modules/setimmediate/setImmediate.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/fn/array/find.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es6.array.find.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_a-function.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_array-species-create.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_array-species-constructor.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/fn/array/find-index.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es6.array.find-index.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/fn/object/assign.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es6.object.assign.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_object-assign.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_array-includes.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_to-absolute-index.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/fn/string/starts-with.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es6.string.starts-with.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_string-context.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_is-regexp.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_fails-is-regexp.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/fn/string/repeat.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es6.string.repeat.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_string-repeat.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/fn/symbol/index.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es6.symbol.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_meta.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_enum-keys.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_object-dps.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_html.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_object-gopn-ext.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_object-gopd.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es6.object.to-string.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_classof.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es7.symbol.async-iterator.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es7.symbol.observable.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/fn/symbol/iterator.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es6.string.iterator.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_string-at.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_iter-create.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_object-gpo.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/web.dom.iterable.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es6.array.iterator.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/_iter-step.js","webpack:///./node_modules/firebase/database/dist/index.esm.js","webpack:///./node_modules/@firebase/database/dist/index.cjs.js","webpack:///./node_modules/@firebase/logger/dist/index.esm.js"],"names":["store","__webpack_require__","uid","Symbol","USE_SYMBOL","module","exports","name","global","window","Math","self","Function","__g","core","version","__e","hide","redefine","ctx","$export","type","source","key","own","out","exp","IS_FORCED","F","IS_GLOBAL","G","IS_STATIC","S","IS_PROTO","P","IS_BIND","B","target","expProto","undefined","call","U","W","R","dP","createDesc","object","value","f","it","hasOwnProperty","anObject","IE8_DOM_DEFINE","toPrimitive","Object","defineProperty","O","Attributes","e","TypeError","get","a","IObject","defined","exec","has","SRC","$toString","TPL","split","inspectSource","val","safe","isFunction","join","String","prototype","this","id","px","random","concat","toString","$keys","enumBugKeys","keys","isObject","bitmap","enumerable","configurable","writable","slice","ceil","floor","isNaN","propertyIsEnumerable","g","fn","valueOf","cof","toInteger","min","UNSCOPABLES","ArrayProto","Array","shared","getOwnPropertySymbols","def","TAG","tag","stat","LIBRARY","wksExt","$Symbol","charAt","ex","firebase","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","setTimeout","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","length","drainQueue","timeout","len","run","marker","runClearTimeout","Item","array","noop","nextTick","args","arguments","i","push","apply","title","browser","env","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","document","is","createElement","aFunction","that","b","c","toObject","toLength","asc","TYPE","$create","IS_MAP","IS_FILTER","IS_SOME","IS_EVERY","IS_FIND_INDEX","NO_HOLES","create","$this","callbackfn","res","index","result","isArray","arg","toIObject","arrayIndexOf","IE_PROTO","names","dPs","Empty","createDict","iframeDocument","iframe","style","display","appendChild","src","contentWindow","open","write","lt","close","Properties","hiddenKeys","getOwnPropertyNames","Iterators","$iterCreate","setToStringTag","getPrototypeOf","ITERATOR","BUGGY","returnThis","Base","NAME","Constructor","next","DEFAULT","IS_SET","FORCED","methods","IteratorPrototype","getMethod","kind","proto","DEF_VALUES","VALUES_BUG","$native","$default","$entries","$anyNative","entries","values","util","contains","obj","DEFAULT_ENTRY_NAME","tokenListeners","FirebaseAppImpl","options","config","firebase_","isDeleted_","services_","name_","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","options_","deepCopy","INTERNAL","getUid","getToken","Promise","resolve","addAuthTokenListener","callback","removeAuthTokenListener","filter","listener","checkDestroyed_","set","delete","_this","then","removeApp","services","forEach","serviceKey","instanceKey","all","map","service","_getService","instanceIdentifier","instanceSpecifier","factories","extendApp","bind","props","deepExtend","error","code","appErrors","console","log","ErrorFactory","no-app","bad-app-name","duplicate-app","app-deleted","duplicate-service","sa-not-supported","invalid-app-argument","createFirebaseNamespace","apps_","appHooks","namespace","__esModule","initializeApp","rawConfig","name_1","app","callAppHooks","apps","SDK_VERSION","registerService","createService","serviceProperties","appHook","allowMultipleInstances","getApps","serviceNamespace","appArg","_i","extendNamespace","createSubscribe","useAsService","eventName","serviceName","factoryName","useService","patchProperty","default","tslib_1","CONSTANTS","NODE_CLIENT","NODE_ADMIN","assert","assertion","message","assertionError","stringToByteArray","str","p","charCodeAt","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","opt_webSafe","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","encodeString","btoa","decodeString","bytes","pos","c1","fromCharCode","c2","u","c3","byteArrayToString","decodeStringToByteArray","charToByteMap","byte4","base64Decode","constructor","Date","getTime","prop","Deferred","promise","reject","wrapCallback","catch","getUA","navigator","ERROR_NAME","captureStackTrace","FirebaseError","err","stack","errors","pattern","data","template","fullCode","replace","match","jsonEval","JSON","parse","decode","token","header","claims","signature","parts","extend","objTo","objFrom","findKey","opt_this","Sha1","_super","chain_","buf_","W_","pad_","inbuf_","total_","blockSize","reset","__extends","compress_","buf","opt_offset","t","k","d","update","opt_length","lengthMinusBlock","n","inbuf","digest","totalBits","j","ObserverProxy","executor","onNoObservers","observers","unsubscribes","observerCount","task","finalized","forEachObserver","observer","complete","subscribe","nextOrObserver","methods_1","method","implementsAnyMethods","unsub","unsubscribeOne","finalError","sendOne","errorPrefix","fnName","argumentNumber","optional","argName","base64Encode","utf8Bytes","isMobileCordova","test","isNodeSdk","isReactNative","patchCapture","captureFake","stringify","isAdmin","issuedAtTime","isValidFormat","isValidTimestamp","validSince","validUntil","now","clone","every","findValue","getAnyKey","getCount","rv","getValues","isEmpty","isNonNullObject","opt_obj","safeGet","querystring","querystringParams","params","arrayVal","encodeURIComponent","querystringDecode","async","onError","proxy","validateArgCount","minCount","maxCount","argCount","argError","validateCallback","validateContextObject","context","validateNamespace","stringLength","high","r","__webpack_exports__","__assign","__rest","__decorate","__param","__metadata","__awaiter","__generator","__exportStar","__values","__read","__spread","__await","__asyncGenerator","__asyncDelegator","__asyncValues","__makeTemplateObject","__importStar","__importDefault","extendStatics","setPrototypeOf","__proto__","__","assign","s","indexOf","decorators","desc","getOwnPropertyDescriptor","Reflect","decorate","paramIndex","decorator","metadataKey","metadataValue","metadata","thisArg","_arguments","generator","fulfilled","step","rejected","done","body","y","_","label","sent","trys","ops","verb","throw","return","iterator","v","op","pop","m","o","ar","asyncIterator","q","resume","fulfill","settle","shift","cooked","raw","mod","fetch","support","searchParams","iterable","blob","Blob","formData","arrayBuffer","viewClasses","isDataView","DataView","isPrototypeOf","isArrayBufferView","ArrayBuffer","isView","Headers","append","normalizeName","normalizeValue","oldValue","items","iteratorFor","Request","_bodyInit","Body","Response","status","statusText","headers","url","response","redirectStatuses","redirect","RangeError","location","init","request","xhr","XMLHttpRequest","onload","rawHeaders","getAllResponseHeaders","line","trim","responseURL","responseText","onerror","ontimeout","credentials","withCredentials","responseType","setRequestHeader","send","polyfill","toLowerCase","consumed","bodyUsed","fileReaderReady","reader","readBlobAsArrayBuffer","FileReader","readAsArrayBuffer","bufferClone","view","Uint8Array","byteLength","buffer","_initBody","_bodyText","_bodyBlob","FormData","_bodyFormData","URLSearchParams","_bodyArrayBuffer","text","readAsText","chars","readArrayBufferAsText","json","upcased","mode","toUpperCase","referrer","form","decodeURIComponent","bodyInit","ok","setImmediate","setTimeoutFunc","_state","_handled","_value","_deferreds","doResolve","handle","deferred","_immediateFn","cb","onFulfilled","onRejected","ret","newValue","finale","_unhandledRejectionFn","Handler","reason","prom","arr","remaining","race","warn","globalNS","Timeout","clearFn","_id","_clearFn","setInterval","clearInterval","unref","ref","enroll","item","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","clearImmediate","registerImmediate","html","channel","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","doc","attachTo","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","canUsePostMessage","MessageChannel","port1","event","port2","documentElement","script","onreadystatechange","removeChild","addEventListener","attachEvent","find","$find","forced","speciesConstructor","original","SPECIES","C","findIndex","KEY","getKeys","gOPS","pIE","$assign","A","K","T","aLen","getSymbols","isEnum","toAbsoluteIndex","IS_INCLUDES","el","fromIndex","max","startsWith","$startsWith","searchString","search","isRegExp","MATCH","re","repeat","count","Infinity","DESCRIPTORS","META","$fails","wks","wksDefine","enumKeys","_create","gOPNExt","$GOPD","$DP","gOPD","gOPN","$JSON","_stringify","HIDDEN","TO_PRIMITIVE","SymbolRegistry","AllSymbols","OPSymbols","ObjectProto","USE_NATIVE","QObject","setter","findChild","setSymbolDesc","D","protoDesc","wrap","sym","_k","isSymbol","$defineProperty","$defineProperties","l","$propertyIsEnumerable","E","$getOwnPropertyDescriptor","$getOwnPropertyNames","$getOwnPropertySymbols","IS_OP","$set","es6Symbols","wellKnownSymbols","for","keyFor","useSetter","useSimple","defineProperties","replacer","$replacer","setDesc","isExtensible","FREEZE","preventExtensions","setMeta","w","meta","NEED","fastKey","getWeak","onFreeze","symbols","windowNames","getWindowNames","classof","ARG","tryGet","callee","$at","iterated","_t","point","TO_STRING","descriptor","$iterators","TO_STRING_TAG","ArrayValues","DOMIterables","CSSRuleList","CSSStyleDeclaration","CSSValueList","ClientRectList","DOMRectList","DOMStringList","DOMTokenList","DataTransferItemList","FileList","HTMLAllCollection","HTMLCollection","HTMLFormElement","HTMLSelectElement","MediaList","MimeTypeArray","NamedNodeMap","NodeList","PaintRequestList","Plugin","PluginArray","SVGLengthList","SVGNumberList","SVGPathSegList","SVGPointList","SVGStringList","SVGTransformList","SourceBufferList","StyleSheetList","TextTrackCueList","TextTrackList","TouchList","collections","explicit","Collection","addToUnscopables","Arguments","logger","DOMStorageWrapper","domStorage_","prefix_","removeItem","prefixedName_","setItem","storedVal","getItem","remove","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","domStorage","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","sha1","sha1Bytes","buildLogMessage_","var_args","logger$1","firstLog_","enableLogging","logger_","persistent","logLevel","LogLevel","VERBOSE","logWrapper","prefix","fatal","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","ObjectToUniqueKey","sort","splitStringBySize","segsize","dataSegs","substring","each","doubleToIEEE754String","ln","bits","abs","pow","LN2","round","reverse","hexByteString","hexByte","parseInt","substr","INTEGER_REGEXP_","RegExp","intVal","exceptionGuard","beingCrawled","setTimeoutNonBlocking","time","Path","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","getFront","getLength","popFront","getBack","pathString","toUrlEncodedString","begin","parent","pieces","child","childPathObj","childPieces","relativePath","outerPath","innerPath","outer","inner","comparePaths","left","right","leftKeys","rightKeys","cmp","equals","other","ValidationPath","path","errorPrefix_","parts_","byteLength_","checkValid_","last","MAX_PATH_LENGTH_BYTES","MAX_PATH_DEPTH","toErrorString","LONG_POLLING","RepoInfo","host","secure","webSocketOnly","persistenceKey","domain","internalHost","needsQueryParam","isCustomHost","isCacheableHost","isDemoHost","updateHost","newHost","connectionURL","connURL","pairs","toURLString","PUSH_CHARS","lastPushTime","lastRandChars","__EMPTY_NODE","MAX_NODE","parseRepoInfo","dataURL","parsedUrl","parseURL","subdomain","protocol","scheme","repoInfo","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodePath","queryParams","queryString","results","_a","segment","kv","decodeQuery","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","isValidKey","isValidPathString","isValidPriority","priority","validateFirebaseDataArg","validateFirebaseData","path_","hasDotValue_1","hasActualChild_1","validateFirebaseMergeDataArg","mergePaths","curPath","prevPath","validateFirebaseMergePaths","validatePriority","validateEventType","eventType","validateKey","validatePathString","validateWritablePath","validateUrl","isValidRootPathString","OnDisconnect","repo_","cancel","onComplete","onDisconnectCancel","onDisconnectSet","setWithPriority","onDisconnectSetWithPriority","objectToMerge","newObjectToMerge","onDisconnectUpdate","TransactionResult","committed","snapshot","toJSON","nextPushId","duplicateTime","timeStampChars","NamedNode","node","Wrap","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","KeyIndex","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","__childrenNodeConstructor","nodeFromJSON","MAX_NODE$1","priorityHashText","validatePriorityNode","priorityNode","isLeafNode","getPriority","LeafNode","value_","priorityNode_","EMPTY_NODE","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","action","exportFormat",".value","getValue",".priority","hash","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","_defaultIndexMap","PRIORITY_INDEX","PriorityIndex","aPriority","bPriority","indexCmp","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","hasNext","peek","LLRBNode","color","RED","SortedMap","copy","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","LLRBEmptyNode","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","LOG_2","Base12Num","num","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","buildFrom12Array","fallbackObject","IndexMap","indexes_","indexSet_","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","newIndex","sawIndexedValue","iter","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","ChildrenNode","children_","indexMap_","Default","newPriority","newIndexMap","newImmediateChild","numKeys","allIntegerKeys","toHash_1","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","endPost","MAX_NODE$2","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","MAX","setMaxNode$1","USE_HINZE","nodeFromJSON$1","node_1","jsonObj_1","childData","children_1","childrenHavePriority_1","hinzeJsonObj_1","childSet","sortedChildSet","setNodeFromJSON","__referenceConstructor","OperationType","VALUE_INDEX","ValueIndex","valueNode","PathIndex","indexPath_","extractChild","snap","aChild","bChild","DataSnapshot","node_","ref_","index_","exportVal","exists","childPathString","childPath","childRef","hasChildren","getKey","getRef","DataEvent","eventRegistration","prevName","getPath","getParent","getEventType","getEventRunner","CancelEvent","ValueEventRegistration","callback_","cancelCallback_","context_","respondsTo","createEvent","change","query","getQueryParams","getIndex","snapshotNode","eventData","cancelCB_1","cb_1","createCancelEvent","matches","hasAnyCallback","ChildEventRegistration","callbacks_","eventToCheck","cancelCB_2","cb_2","otherCount","otherKey","thisKey","Query","repo","queryParams_","orderByCalled_","validateQueryEndpoints_","startNode","endNode","hasStart","getIndexStartValue","hasEnd","getIndexEndValue","tooManyArgsError","wrongArgTypeError","getIndexStartName","getIndexEndName","validateLimit_","hasLimit","hasAnchoredLimit","validateNoPreviousOrderByCall_","cancelCallbackOrContext","getCancelAndContextArgs_","onValueEvent","callbacks","onChildEvent","cancelCallback","container","addEventCallbackForQuery","removeEventCallbackForQuery","userCallback","cancelOrContext","firstCall","onceCallback","limitToFirst","limit","limitToLast","orderByChild","parsedPath","newParams","orderBy","orderByKey","orderByPriority","orderByValue","startAt","endAt","equalTo","queryObject","getQueryObject","queryIdentifier","isEqual","sameRepo","samePath","sameQueryIdentifier","CountedSet","add","clear","SparseSnapshotTree","childKey","remember","forget","self_1","tree","forEachTree","prefixPath","func","resolveDeferredValue","serverValues","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","emptyChildrenSingleton","__referenceConstructor$1","OperationSource","fromUser","fromServer","queryId","tagged","User","Server","forServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","children","subtree","EmptyChildren","ImmutableTree","fromObject","childSnap","findRootMostMatchingPathAndValue","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","newChild","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","nextChild","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","getNode","ViewCache","eventCache_","serverCache_","updateEventSnap","eventSnap","filtered","updateServerSnap","serverSnap","getEventCache","getCompleteEventSnap","getServerCache","getCompleteServerSnap","Change","oldSnap","valueChange","VALUE","childAddedChange","CHILD_ADDED","childRemovedChange","CHILD_REMOVED","childChangedChange","newSnapshot","oldSnapshot","CHILD_CHANGED","childMovedChange","CHILD_MOVED","IndexedFilter","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","ChildChangeAccumulator","changeMap_","oldChange","oldType","getChanges","NO_COMPLETE_CHILD_SOURCE","NoCompleteChildSource_","getCompleteChild","getChildAfterChild","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","calcCompleteChild","completeServerData","nodes","calcIndexedSlice","ProcessorResult","viewCache","changes","ViewProcessor","filter_","assertIndexed","applyOperation","oldViewCache","operation","writesCache","completeCache","newViewCache","filterServerNode","accumulator","overwrite","applyUserOverwrite_","applyServerOverwrite_","merge","applyUserMerge_","applyServerMerge_","ackUserWrite","revertUserWrite_","ackUserWrite_","listenComplete_","maybeAddValueEvent_","isLeafOrEmpty","oldCompleteSnap","generateEventCacheAfterServerEvent_","changePath","oldEventSnap","shadowingWrite","newEventCache","serverCache","completeChildren","completeEventChildren","calcCompleteEventChildren","completeNode","calcCompleteEventCache","oldEventNode","updatedPriority","calcEventCacheAfterServerOverwrite","childChangePath","newEventChild","eventChildUpdate","changedSnap","newServerCache","oldServerSnap","serverFilter","newServerNode","newEventSnap","cacheHasChild_","changedChildren","curViewCache","writePath","applyMerge_","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","changedChildren_1","changedChildren_2","mergePath","serverCachePath","oldServerNode","completeServerCache","oldEventCache","serverChildren","EventGenerator","query_","generateEventsForChanges","eventCache","eventRegistrations","events","moves","generateEventsForType_","registrations","filteredChanges","compareChanges_","materializedChange","materializeSingleChange_","registration","aWrapped","bWrapped","View","initialViewCache","eventRegistrations_","indexFilter","getNodeFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","getQuery","getCompleteServerCache","cache","loadsAllData","addEventRegistration","removeEventRegistration","cancelError","cancelEvents","path_1","maybeEvent","existing","generateEventsForChanges_","getInitialEvents","initialChanges","SyncPoint","views_","optCompleteServerCache","events_1","serverCacheComplete","eventCacheComplete","removed","hadCompleteView","hasCompleteView","viewQueryId","getQueryViews","viewForQuery","getCompleteView","viewExistsForQuery","CompoundWrite","writeTree_","addWrite","rootmost","rootMostPath","addWrites","updates","newWrite","removeWrite","hasCompleteWrite","getCompleteNode","getCompleteChildren","childCompoundWrite","shadowingNode","applySubtreeWrite_","writeTree","priorityWrite_1","WriteTree","visibleWrites_","allWrites_","lastWriteId_","childWrites","WriteTreeRef","addOverwrite","writeId","visible","addMerge","getWrite","record","writeToRemove","splice","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","recordContainsPath_","resetTree_","getCompleteWriteData","treePath","writeIdsToExclude","includeHiddenWrites","mergeAtPath","layerTree_","layeredCache","subMerge","completeServerChildren","topLevelSet","merge_1","existingEventSnap","existingServerSnap","childMerge","toIterate","writeRecord","DefaultFilter_","writes","treeRoot","compoundWrite","deepNode","treePath_","existingServerCache","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap_","queryToTagMap_","applyUserOverwrite","newData","applyOperationToSyncPoints_","applyUserMerge","changeTree","affectedTree_1","applyServerOverwrite","applyServerMerge","applyListenComplete","applyTaggedQueryOverwrite","queryKey","queryKeyForTag_","parseQueryKey_","queryPath","applyTaggedOperation_","applyTaggedQueryMerge","applyTaggedListenComplete","foundAncestorDefaultView","pathToSyncPoint","sp","syncPoint","childSyncPoint","viewAlreadyExists","makeQueryKey_","getNextQueryTag_","setupListener_","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","collectDistinctViewsForSubTree_","newQuery","createListenerForView_","startListening","queryForListening_","tagForQuery_","hashFn","stopListening","queryToRemove","tagToRemove","removeTags_","maybeChildSyncPoint","childMap","views_1","childViews","queries","removedQuery","removedQueryKey","removedQueryTag","isDefault","queriesToStop","queries_1","childQueries","queryToStop","error$$1","errorForServerCode","splitIndex","nextQueryTag_","applyOperationHelper_","syncPointTree","applyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","SnapshotHolder","rootNode_","updateSnapshot","newSnapshotNode","AuthTokenProvider","app_","forceRefresh","addTokenChangeListener","removeTokenChangeListener","notifyForInvalidToken","errorMessage","StatsCollection","counters_","incrementCounter","amount","StatsManager","getCollection","hashString","collections_","getOrCreateReporter","creatorFunction","reporters_","StatsListener","collection_","last_","newStats","delta","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","includeStat","stats","reportedStats","haveStatsToReport","reportStats","EventQueue","eventLists_","recursionDepth_","queueEvents","eventDataList","currList","eventPath","EventList","raiseEventsAtPath","raiseQueuedEventsMatchingPredicate_","raiseEventsForChangedPath","changedPath","sentAll","eventList","raise","events_","eventFn","EventEmitter","allowedEvents_","listeners_","trigger","validateEventType_","getInitialEvent","et","VisibilityMonitor","hidden","visibilityChange","visible_","getInstance","OnlineMonitor","online_","currentlyOnline","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","_loop_1","toProcess","this_1","_loop_2","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","BrowserPollConnection","connId","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","readyState","called_1","wrappedFn_1","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","incrementIncomingBytes_","password","sendNewPolls","pN","urlParams","start","uniqueCallbackIdentifier","href","connectURL","addTag","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","forceDisallow","forceDisallow_","isAvailable","Windows","UI","markConnectionHealthy","shutdown_","myDisconnFrame","dataStr","base64data","MAX_URL_DATA_SIZE","enqueueSegment","pw","dframe","commandCB","onMessageCB","outstandingRequests","pendingSegs","currentSerial","myIFrame","createIFrame_","iframeContents","contentDocument","alive","innerHTML","myID","disconn","myPW","theURL","nodeRestRequest","newRequest_","curDataString","theSeg","seg","ts","addLongPollTag_","segnum","totalsegs","serial","doNewRequest","keepaliveTimeout","loadCB","doNodeLongPoll","newScript_1","rstate","parentNode","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","device","User-Agent","platform","NODE_ENV","origin","mySock","onopen","onclose","handleIncomingFrame","isOldAndroid","userAgent","oldAndroidMatch","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","mess","resetKeepAlive","remainingData","sendString_","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports_1","ALL_TRANSPORTS","transport","initialTransport","upgradeTransport","Connection","repoInfo_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeout_ms","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","ServerActions","put","refreshAuthToken","onDisconnectPut","onDisconnectMerge","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens_","outstandingPuts_","outstandingPutCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","authToken_","forceTokenRefresh_","invalidAuthTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","scheduleConnect_","onVisible_","onOnline_","onResponse","curReqNum","listen","currentHashFn","listenSpec","sendListen_","req","warnOnListenWarnings_","removeListen_","warnings","indexSpec","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","token_1","authMethod","requestData","cred","onAuthRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage_1","onReady_1","onDisconnect_1","connId_1","nextConnectionId_","lastSessionId_1","canceled_1","connection_1","closeFn_1","accessToken","interrupt","serverTimeOffset","normalizedPathString","statusCode","explanation","clientName","ReadonlyRestClient","getListenId_","listenId","thisListen","queryStringParameters","toRestQueryStringParameters","restRequest_","authTokenData","authToken","Repo","forceRestClient","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","persistentConnection_","authTokenProvider","authOverride","statsReporter_","transactions_init_","infoData_","infoSyncTree_","infoEvents","updateInfo_","serverSyncTree_","serverTime","offset","generateServerValues","isMerge","taggedChildren","taggedSnap","rerunTransactions_","interceptServerData_","connectStatus","runOnDisconnectEvents_","getNextWriteId_","newVal","newNodeUnresolved","success","clearEvents","callOnCompleteCallback","abortTransactions_","childrenToMerge","empty","changedKey","changedValue","writeId_1","resolvedOnDisconnectTree","resolvedTree","resolveDeferredValueTree","showDelta","longestName","reduce","previousValue","currentValue","statsIncrementCounter","metric","__database","Database","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","startName","endName","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","indexCompare_1","foundStartPost","changeAccumulator","indexCmp_1","newChildNamedNode","windowBoundary","inRange","oldChildSnap","compareNext","QueryParams","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","WIRE_PROTOCOL_CONSTANTS_","VIEW_FROM_LEFT","copy_","newLimit","VIEW_FROM_RIGHT","WIRE_PROTOCOL_CONSTANTS","INDEX_START_VALUE","INDEX_START_NAME","INDEX_END_VALUE","INDEX_END_NAME","LIMIT","viewFrom","VIEW_FROM","INDEX","REST_CONSTANTS","REST_QUERY_CONSTANTS_","qs","ORDER_BY","START_AT","END_AT","LIMIT_TO_FIRST","LIMIT_TO_LAST","Reference","validateRootPathString","parentPath","getRoot","databaseProp","database","transaction","transactionUpdate","applyLocally","bool","validateBoolean","startTransaction","setPriority","thennablePushRef","pushRef","TransactionStatus","TreeNode","childCount","Tree","parent_","subTree","pathObj","setValue","updateParents_","forEachDescendant","includeSelf","childrenFirst","forEachAncestor","forEachImmediateDescendantWithValue","updateChild_","childEmpty","childExists","MAX_TRANSACTION_RETRIES_","transactionQueueTree_","valueCallback","watchRef","order","retryCount","unwatcher","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","getLatestState_","RUN","queueNode","nodeQueue","priorityForNode","sendReadyTransactions_","excludeSets","pruneCompletedTransactionsBelowNode_","buildTransactionQueue_","sendTransactionQueue_","setsToIgnore","txn","latestState","snapToSend","latestHash","SENT","dataToSend","pathToSend","COMPLETED","SENT_NEEDS_ABORT","NEEDS_ABORT","rootMostTransactionNode","getAncestorTransactionNode_","rerunTransactionQueue_","abortTransaction","currentNode","newDataNode","oldWriteId","newNodeResolved","lastInput","transactionNode","transactionQueue","aggregateTransactionQueuesForNode_","to","from","abortTransactionsOnNode_","lastSent","_staticInstance","RepoManager","repos_","useRestClient_","appName","dbUrl","databaseFromApp","createRepo","deleteRepo","appRepos","DatabaseInternals","checkDeleted_","refFromURL","apiName","parsedURL","goOffline","goOnline","ServerValue","TIMESTAMP",".sv","freeze","forceLongPolling","forceWebSockets","setSecurityDebugCallback","interceptServerData","DataConnection","simpleListen","echo","onEcho","RealTimeConnection","ConnectionTarget","TEST_ACCESS","hijackHash","newHash","oldPut","opt_onComplete","opt_hash","listens","firebaseRef","registerDatabase","instance","unused","setLogLevel","instances","defaultLogLevel","INFO","defaultLogHandler","logType","toISOString","DEBUG","info","WARN","ERROR","_logLevel","_logHandler","debug","level","inst"],"mappings":"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","file":"vendors.bundle.js","sourcesContent":["var store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n","var core = module.exports = { version: '2.5.5' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n","var global = require('./_global');\nvar core = require('./_core');\nvar hide = require('./_hide');\nvar redefine = require('./_redefine');\nvar ctx = require('./_ctx');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // extend global\n    if (target) redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\nglobal.core = core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject');\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n","var global = require('./_global');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar SRC = require('./_uid')('src');\nvar TO_STRING = 'toString';\nvar $toString = Function[TO_STRING];\nvar TPL = ('' + $toString).split(TO_STRING);\n\nrequire('./_core').inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) has(val, 'name') || hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = require('./_object-keys-internal');\nvar enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n","exports.f = {}.propertyIsEnumerable;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n","var global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\nmodule.exports = function (key) {\n  return store[key] || (store[key] = {});\n};\n","// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = require('./_wks')('unscopables');\nvar ArrayProto = Array.prototype;\nif (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});\nmodule.exports = function (key) {\n  ArrayProto[UNSCOPABLES][key] = true;\n};\n","var shared = require('./_shared')('keys');\nvar uid = require('./_uid');\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n","exports.f = Object.getOwnPropertySymbols;\n","var def = require('./_object-dp').f;\nvar has = require('./_has');\nvar TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n","exports.f = require('./_wks');\n","var global = require('./_global');\nvar core = require('./_core');\nvar LIBRARY = require('./_library');\nvar wksExt = require('./_wks-ext');\nvar defineProperty = require('./_object-dp').f;\nmodule.exports = function (name) {\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\n};\n","module.exports = false;\n","module.exports = {};\n","'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nrequire('@firebase/polyfill');\nvar firebase = _interopDefault(require('@firebase/app'));\n\n/**\r\n * @license\r\n * Copyright 2018 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nmodule.exports = firebase;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\nvar ctx = require('./_ctx');\nvar IObject = require('./_iobject');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar asc = require('./_array-species-create');\nmodule.exports = function (TYPE, $create) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  var create = $create || asc;\n  return function ($this, callbackfn, that) {\n    var O = toObject($this);\n    var self = IObject(O);\n    var f = ctx(callbackfn, that, 3);\n    var length = toLength(self.length);\n    var index = 0;\n    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var val, res;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      val = self[index];\n      res = f(val, index, O);\n      if (TYPE) {\n        if (IS_MAP) result[index] = res;   // map\n        else if (res) switch (TYPE) {\n          case 3: return true;             // some\n          case 5: return val;              // find\n          case 6: return index;            // findIndex\n          case 2: result.push(val);        // filter\n        } else if (IS_EVERY) return false; // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};\n","// 7.2.2 IsArray(argument)\nvar cof = require('./_cof');\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n","var has = require('./_has');\nvar toIObject = require('./_to-iobject');\nvar arrayIndexOf = require('./_array-includes')(false);\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n","// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = require('./_object-keys-internal');\nvar hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n","'use strict';\nvar LIBRARY = require('./_library');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar $iterCreate = require('./_iter-create');\nvar setToStringTag = require('./_set-to-string-tag');\nvar getPrototypeOf = require('./_object-gpo');\nvar ITERATOR = require('./_wks')('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar util = require('@firebase/util');\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar contains = function (obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n};\r\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\n// An array to capture listeners before the true auth functions\r\n// exist\r\nvar tokenListeners = [];\r\n/**\r\n * Global context object for a collection of services using\r\n * a shared authentication state.\r\n */\r\nvar FirebaseAppImpl = /** @class */ (function () {\r\n    function FirebaseAppImpl(options, config, firebase_) {\r\n        this.firebase_ = firebase_;\r\n        this.isDeleted_ = false;\r\n        this.services_ = {};\r\n        this.name_ = config.name;\r\n        this._automaticDataCollectionEnabled =\r\n            config.automaticDataCollectionEnabled || false;\r\n        this.options_ = util.deepCopy(options);\r\n        this.INTERNAL = {\r\n            getUid: function () { return null; },\r\n            getToken: function () { return Promise.resolve(null); },\r\n            addAuthTokenListener: function (callback) {\r\n                tokenListeners.push(callback);\r\n                // Make sure callback is called, asynchronously, in the absence of the auth module\r\n                setTimeout(function () { return callback(null); }, 0);\r\n            },\r\n            removeAuthTokenListener: function (callback) {\r\n                tokenListeners = tokenListeners.filter(function (listener) { return listener !== callback; });\r\n            }\r\n        };\r\n    }\r\n    Object.defineProperty(FirebaseAppImpl.prototype, \"automaticDataCollectionEnabled\", {\r\n        get: function () {\r\n            this.checkDestroyed_();\r\n            return this._automaticDataCollectionEnabled;\r\n        },\r\n        set: function (val) {\r\n            this.checkDestroyed_();\r\n            this._automaticDataCollectionEnabled = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FirebaseAppImpl.prototype, \"name\", {\r\n        get: function () {\r\n            this.checkDestroyed_();\r\n            return this.name_;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FirebaseAppImpl.prototype, \"options\", {\r\n        get: function () {\r\n            this.checkDestroyed_();\r\n            return this.options_;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    FirebaseAppImpl.prototype.delete = function () {\r\n        var _this = this;\r\n        return new Promise(function (resolve) {\r\n            _this.checkDestroyed_();\r\n            resolve();\r\n        })\r\n            .then(function () {\r\n            _this.firebase_.INTERNAL.removeApp(_this.name_);\r\n            var services = [];\r\n            Object.keys(_this.services_).forEach(function (serviceKey) {\r\n                Object.keys(_this.services_[serviceKey]).forEach(function (instanceKey) {\r\n                    services.push(_this.services_[serviceKey][instanceKey]);\r\n                });\r\n            });\r\n            return Promise.all(services.map(function (service) {\r\n                return service.INTERNAL.delete();\r\n            }));\r\n        })\r\n            .then(function () {\r\n            _this.isDeleted_ = true;\r\n            _this.services_ = {};\r\n        });\r\n    };\r\n    /**\r\n     * Return a service instance associated with this app (creating it\r\n     * on demand), identified by the passed instanceIdentifier.\r\n     *\r\n     * NOTE: Currently storage is the only one that is leveraging this\r\n     * functionality. They invoke it by calling:\r\n     *\r\n     * ```javascript\r\n     * firebase.app().storage('STORAGE BUCKET ID')\r\n     * ```\r\n     *\r\n     * The service name is passed to this already\r\n     * @internal\r\n     */\r\n    FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {\r\n        if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME; }\r\n        this.checkDestroyed_();\r\n        if (!this.services_[name]) {\r\n            this.services_[name] = {};\r\n        }\r\n        if (!this.services_[name][instanceIdentifier]) {\r\n            /**\r\n             * If a custom instance has been defined (i.e. not '[DEFAULT]')\r\n             * then we will pass that instance on, otherwise we pass `null`\r\n             */\r\n            var instanceSpecifier = instanceIdentifier !== DEFAULT_ENTRY_NAME\r\n                ? instanceIdentifier\r\n                : undefined;\r\n            var service = this.firebase_.INTERNAL.factories[name](this, this.extendApp.bind(this), instanceSpecifier);\r\n            this.services_[name][instanceIdentifier] = service;\r\n        }\r\n        return this.services_[name][instanceIdentifier];\r\n    };\r\n    /**\r\n     * Callback function used to extend an App instance at the time\r\n     * of service instance creation.\r\n     */\r\n    FirebaseAppImpl.prototype.extendApp = function (props) {\r\n        var _this = this;\r\n        // Copy the object onto the FirebaseAppImpl prototype\r\n        util.deepExtend(this, props);\r\n        /**\r\n         * If the app has overwritten the addAuthTokenListener stub, forward\r\n         * the active token listeners on to the true fxn.\r\n         *\r\n         * TODO: This function is required due to our current module\r\n         * structure. Once we are able to rely strictly upon a single module\r\n         * implementation, this code should be refactored and Auth should\r\n         * provide these stubs and the upgrade logic\r\n         */\r\n        if (props.INTERNAL && props.INTERNAL.addAuthTokenListener) {\r\n            tokenListeners.forEach(function (listener) {\r\n                _this.INTERNAL.addAuthTokenListener(listener);\r\n            });\r\n            tokenListeners = [];\r\n        }\r\n    };\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    FirebaseAppImpl.prototype.checkDestroyed_ = function () {\r\n        if (this.isDeleted_) {\r\n            error('app-deleted', { name: this.name_ });\r\n        }\r\n    };\r\n    return FirebaseAppImpl;\r\n}());\r\n// Prevent dead-code elimination of these methods w/o invalid property\r\n// copying.\r\n(FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||\r\n    FirebaseAppImpl.prototype.delete ||\r\n    console.log('dc');\r\n/**\r\n * Return a firebase namespace object.\r\n *\r\n * In production, this will be called exactly once and the result\r\n * assigned to the 'firebase' global.  It may be called multiple times\r\n * in unit tests.\r\n */\r\nfunction createFirebaseNamespace() {\r\n    var apps_ = {};\r\n    var factories = {};\r\n    var appHooks = {};\r\n    // A namespace is a plain JavaScript Object.\r\n    var namespace = {\r\n        // Hack to prevent Babel from modifying the object returned\r\n        // as the firebase namespace.\r\n        __esModule: true,\r\n        initializeApp: initializeApp,\r\n        app: app,\r\n        apps: null,\r\n        Promise: Promise,\r\n        SDK_VERSION: '5.8.3',\r\n        INTERNAL: {\r\n            registerService: registerService,\r\n            createFirebaseNamespace: createFirebaseNamespace,\r\n            extendNamespace: extendNamespace,\r\n            createSubscribe: util.createSubscribe,\r\n            ErrorFactory: util.ErrorFactory,\r\n            removeApp: removeApp,\r\n            factories: factories,\r\n            useAsService: useAsService,\r\n            Promise: Promise,\r\n            deepExtend: util.deepExtend\r\n        }\r\n    };\r\n    // Inject a circular default export to allow Babel users who were previously\r\n    // using:\r\n    //\r\n    //   import firebase from 'firebase';\r\n    //   which becomes: var firebase = require('firebase').default;\r\n    //\r\n    // instead of\r\n    //\r\n    //   import * as firebase from 'firebase';\r\n    //   which becomes: var firebase = require('firebase');\r\n    util.patchProperty(namespace, 'default', namespace);\r\n    // firebase.apps is a read-only getter.\r\n    Object.defineProperty(namespace, 'apps', {\r\n        get: getApps\r\n    });\r\n    /**\r\n     * Called by App.delete() - but before any services associated with the App\r\n     * are deleted.\r\n     */\r\n    function removeApp(name) {\r\n        var app = apps_[name];\r\n        callAppHooks(app, 'delete');\r\n        delete apps_[name];\r\n    }\r\n    /**\r\n     * Get the App object for a given name (or DEFAULT).\r\n     */\r\n    function app(name) {\r\n        name = name || DEFAULT_ENTRY_NAME;\r\n        if (!contains(apps_, name)) {\r\n            error('no-app', { name: name });\r\n        }\r\n        return apps_[name];\r\n    }\r\n    util.patchProperty(app, 'App', FirebaseAppImpl);\r\n    function initializeApp(options, rawConfig) {\r\n        if (rawConfig === void 0) { rawConfig = {}; }\r\n        if (typeof rawConfig !== 'object' || rawConfig === null) {\r\n            var name_1 = rawConfig;\r\n            rawConfig = { name: name_1 };\r\n        }\r\n        var config = rawConfig;\r\n        if (config.name === undefined) {\r\n            config.name = DEFAULT_ENTRY_NAME;\r\n        }\r\n        var name = config.name;\r\n        if (typeof name !== 'string' || !name) {\r\n            error('bad-app-name', { name: name + '' });\r\n        }\r\n        if (contains(apps_, name)) {\r\n            error('duplicate-app', { name: name });\r\n        }\r\n        var app = new FirebaseAppImpl(options, config, namespace);\r\n        apps_[name] = app;\r\n        callAppHooks(app, 'create');\r\n        return app;\r\n    }\r\n    /*\r\n     * Return an array of all the non-deleted FirebaseApps.\r\n     */\r\n    function getApps() {\r\n        // Make a copy so caller cannot mutate the apps list.\r\n        return Object.keys(apps_).map(function (name) { return apps_[name]; });\r\n    }\r\n    /*\r\n     * Register a Firebase Service.\r\n     *\r\n     * firebase.INTERNAL.registerService()\r\n     *\r\n     * TODO: Implement serviceProperties.\r\n     */\r\n    function registerService(name, createService, serviceProperties, appHook, allowMultipleInstances) {\r\n        // Cannot re-register a service that already exists\r\n        if (factories[name]) {\r\n            error('duplicate-service', { name: name });\r\n        }\r\n        // Capture the service factory for later service instantiation\r\n        factories[name] = createService;\r\n        // Capture the appHook, if passed\r\n        if (appHook) {\r\n            appHooks[name] = appHook;\r\n            // Run the **new** app hook on all existing apps\r\n            getApps().forEach(function (app) {\r\n                appHook('create', app);\r\n            });\r\n        }\r\n        // The Service namespace is an accessor function ...\r\n        var serviceNamespace = function (appArg) {\r\n            if (appArg === void 0) { appArg = app(); }\r\n            if (typeof appArg[name] !== 'function') {\r\n                // Invalid argument.\r\n                // This happens in the following case: firebase.storage('gs:/')\r\n                error('invalid-app-argument', { name: name });\r\n            }\r\n            // Forward service instance lookup to the FirebaseApp.\r\n            return appArg[name]();\r\n        };\r\n        // ... and a container for service-level properties.\r\n        if (serviceProperties !== undefined) {\r\n            util.deepExtend(serviceNamespace, serviceProperties);\r\n        }\r\n        // Monkey-patch the serviceNamespace onto the firebase namespace\r\n        namespace[name] = serviceNamespace;\r\n        // Patch the FirebaseAppImpl prototype\r\n        FirebaseAppImpl.prototype[name] = function () {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            var serviceFxn = this._getService.bind(this, name);\r\n            return serviceFxn.apply(this, allowMultipleInstances ? args : []);\r\n        };\r\n        return serviceNamespace;\r\n    }\r\n    /**\r\n     * Patch the top-level firebase namespace with additional properties.\r\n     *\r\n     * firebase.INTERNAL.extendNamespace()\r\n     */\r\n    function extendNamespace(props) {\r\n        util.deepExtend(namespace, props);\r\n    }\r\n    function callAppHooks(app, eventName) {\r\n        Object.keys(factories).forEach(function (serviceName) {\r\n            // Ignore virtual services\r\n            var factoryName = useAsService(app, serviceName);\r\n            if (factoryName === null) {\r\n                return;\r\n            }\r\n            if (appHooks[factoryName]) {\r\n                appHooks[factoryName](eventName, app);\r\n            }\r\n        });\r\n    }\r\n    // Map the requested service to a registered service name\r\n    // (used to map auth to serverAuth service when needed).\r\n    function useAsService(app, name) {\r\n        if (name === 'serverAuth') {\r\n            return null;\r\n        }\r\n        var useService = name;\r\n        var options = app.options;\r\n        return useService;\r\n    }\r\n    return namespace;\r\n}\r\nfunction error(code, args) {\r\n    throw appErrors.create(code, args);\r\n}\r\n// TypeScript does not support non-string indexes!\r\n// let errors: {[code: AppError: string} = {\r\nvar errors = {\r\n    'no-app': \"No Firebase App '{$name}' has been created - \" +\r\n        'call Firebase App.initializeApp()',\r\n    'bad-app-name': \"Illegal App name: '{$name}\",\r\n    'duplicate-app': \"Firebase App named '{$name}' already exists\",\r\n    'app-deleted': \"Firebase App named '{$name}' already deleted\",\r\n    'duplicate-service': \"Firebase service named '{$name}' already registered\",\r\n    'sa-not-supported': 'Initializing the Firebase SDK with a service ' +\r\n        'account is only allowed in a Node.js environment. On client ' +\r\n        'devices, you should instead initialize the SDK with an api key and ' +\r\n        'auth domain',\r\n    'invalid-app-argument': 'firebase.{$name}() takes either no argument or a ' +\r\n        'Firebase App instance.'\r\n};\r\nvar appErrors = new util.ErrorFactory('app', 'Firebase', errors);\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar firebase = createFirebaseNamespace();\n\nexports.firebase = firebase;\nexports.default = firebase;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar tslib_1 = require('tslib');\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */\r\nvar CONSTANTS = {\r\n    /**\r\n     * @define {boolean} Whether this is the client Node.js SDK.\r\n     */\r\n    NODE_CLIENT: false,\r\n    /**\r\n     * @define {boolean} Whether this is the Admin Node.js SDK.\r\n     */\r\n    NODE_ADMIN: false,\r\n    /**\r\n     * Firebase SDK Version\r\n     */\r\n    SDK_VERSION: '${JSCORE_VERSION}'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws an error if the provided assertion is falsy\r\n * @param {*} assertion The assertion to be tested for falsiness\r\n * @param {!string} message The message to display if the check fails\r\n */\r\nvar assert = function (assertion, message) {\r\n    if (!assertion) {\r\n        throw assertionError(message);\r\n    }\r\n};\r\n/**\r\n * Returns an Error object suitable for throwing.\r\n * @param {string} message\r\n * @return {!Error}\r\n */\r\nvar assertionError = function (message) {\r\n    return new Error('Firebase Database (' +\r\n        CONSTANTS.SDK_VERSION +\r\n        ') INTERNAL ASSERT FAILED: ' +\r\n        message);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar stringToByteArray = function (str) {\r\n    // TODO(user): Use native implementations if/when available\r\n    var out = [], p = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n        var c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if ((c & 0xfc00) == 0xd800 &&\r\n            i + 1 < str.length &&\r\n            (str.charCodeAt(i + 1) & 0xfc00) == 0xdc00) {\r\n            // Surrogate Pair\r\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param {Array<number>} bytes Array of numbers representing characters.\r\n * @return {string} Stringification of the array.\r\n */\r\nvar byteArrayToString = function (bytes) {\r\n    // TODO(user): Use native implementations if/when available\r\n    var out = [], pos = 0, c = 0;\r\n    while (pos < bytes.length) {\r\n        var c1 = bytes[pos++];\r\n        if (c1 < 128) {\r\n            out[c++] = String.fromCharCode(c1);\r\n        }\r\n        else if (c1 > 191 && c1 < 224) {\r\n            var c2 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\r\n        }\r\n        else if (c1 > 239 && c1 < 365) {\r\n            // Surrogate Pair\r\n            var c2 = bytes[pos++];\r\n            var c3 = bytes[pos++];\r\n            var c4 = bytes[pos++];\r\n            var u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\r\n                0x10000;\r\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\r\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\r\n        }\r\n        else {\r\n            var c2 = bytes[pos++];\r\n            var c3 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n        }\r\n    }\r\n    return out.join('');\r\n};\r\n// Static lookup maps, lazily populated by init_()\r\nvar base64 = {\r\n    /**\r\n     * Maps bytes to characters.\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    byteToCharMap_: null,\r\n    /**\r\n     * Maps characters to bytes.\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    charToByteMap_: null,\r\n    /**\r\n     * Maps bytes to websafe characters.\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    byteToCharMapWebSafe_: null,\r\n    /**\r\n     * Maps websafe characters to bytes.\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    charToByteMapWebSafe_: null,\r\n    /**\r\n     * Our default alphabet, shared between\r\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n     * @type {string}\r\n     */\r\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\r\n    /**\r\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n     * @type {string}\r\n     */\r\n    get ENCODED_VALS() {\r\n        return this.ENCODED_VALS_BASE + '+/=';\r\n    },\r\n    /**\r\n     * Our websafe alphabet.\r\n     * @type {string}\r\n     */\r\n    get ENCODED_VALS_WEBSAFE() {\r\n        return this.ENCODED_VALS_BASE + '-_.';\r\n    },\r\n    /**\r\n     * Whether this browser supports the atob and btoa functions. This extension\r\n     * started at Mozilla but is now implemented by many browsers. We use the\r\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n     * but still allowing the standard per-browser compilations.\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    HAS_NATIVE_SUPPORT: typeof atob === 'function',\r\n    /**\r\n     * Base64-encode an array of bytes.\r\n     *\r\n     * @param {Array<number>|Uint8Array} input An array of bytes (numbers with\r\n     *     value in [0, 255]) to encode.\r\n     * @param {boolean=} opt_webSafe Boolean indicating we should use the\r\n     *     alternative alphabet.\r\n     * @return {string} The base64 encoded string.\r\n     */\r\n    encodeByteArray: function (input, opt_webSafe) {\r\n        if (!Array.isArray(input)) {\r\n            throw Error('encodeByteArray takes an array as a parameter');\r\n        }\r\n        this.init_();\r\n        var byteToCharMap = opt_webSafe\r\n            ? this.byteToCharMapWebSafe_\r\n            : this.byteToCharMap_;\r\n        var output = [];\r\n        for (var i = 0; i < input.length; i += 3) {\r\n            var byte1 = input[i];\r\n            var haveByte2 = i + 1 < input.length;\r\n            var byte2 = haveByte2 ? input[i + 1] : 0;\r\n            var haveByte3 = i + 2 < input.length;\r\n            var byte3 = haveByte3 ? input[i + 2] : 0;\r\n            var outByte1 = byte1 >> 2;\r\n            var outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\r\n            var outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\r\n            var outByte4 = byte3 & 0x3f;\r\n            if (!haveByte3) {\r\n                outByte4 = 64;\r\n                if (!haveByte2) {\r\n                    outByte3 = 64;\r\n                }\r\n            }\r\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\r\n        }\r\n        return output.join('');\r\n    },\r\n    /**\r\n     * Base64-encode a string.\r\n     *\r\n     * @param {string} input A string to encode.\r\n     * @param {boolean=} opt_webSafe If true, we should use the\r\n     *     alternative alphabet.\r\n     * @return {string} The base64 encoded string.\r\n     */\r\n    encodeString: function (input, opt_webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {\r\n            return btoa(input);\r\n        }\r\n        return this.encodeByteArray(stringToByteArray(input), opt_webSafe);\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * @param {string} input to decode.\r\n     * @param {boolean=} opt_webSafe True if we should use the\r\n     *     alternative alphabet.\r\n     * @return {string} string representing the decoded value.\r\n     */\r\n    decodeString: function (input, opt_webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {\r\n            return atob(input);\r\n        }\r\n        return byteArrayToString(this.decodeStringToByteArray(input, opt_webSafe));\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * In base-64 decoding, groups of four characters are converted into three\r\n     * bytes.  If the encoder did not apply padding, the input length may not\r\n     * be a multiple of 4.\r\n     *\r\n     * In this case, the last group will have fewer than 4 characters, and\r\n     * padding will be inferred.  If the group has one or two characters, it decodes\r\n     * to one byte.  If the group has three characters, it decodes to two bytes.\r\n     *\r\n     * @param {string} input Input to decode.\r\n     * @param {boolean=} opt_webSafe True if we should use the web-safe alphabet.\r\n     * @return {!Array<number>} bytes representing the decoded value.\r\n     */\r\n    decodeStringToByteArray: function (input, opt_webSafe) {\r\n        this.init_();\r\n        var charToByteMap = opt_webSafe\r\n            ? this.charToByteMapWebSafe_\r\n            : this.charToByteMap_;\r\n        var output = [];\r\n        for (var i = 0; i < input.length;) {\r\n            var byte1 = charToByteMap[input.charAt(i++)];\r\n            var haveByte2 = i < input.length;\r\n            var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\r\n            ++i;\r\n            var haveByte3 = i < input.length;\r\n            var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            var haveByte4 = i < input.length;\r\n            var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\r\n                throw Error();\r\n            }\r\n            var outByte1 = (byte1 << 2) | (byte2 >> 4);\r\n            output.push(outByte1);\r\n            if (byte3 != 64) {\r\n                var outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\r\n                output.push(outByte2);\r\n                if (byte4 != 64) {\r\n                    var outByte3 = ((byte3 << 6) & 0xc0) | byte4;\r\n                    output.push(outByte3);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    },\r\n    /**\r\n     * Lazy static initialization function. Called before\r\n     * accessing any of the static map variables.\r\n     * @private\r\n     */\r\n    init_: function () {\r\n        if (!this.byteToCharMap_) {\r\n            this.byteToCharMap_ = {};\r\n            this.charToByteMap_ = {};\r\n            this.byteToCharMapWebSafe_ = {};\r\n            this.charToByteMapWebSafe_ = {};\r\n            // We want quick mappings back and forth, so we precompute two maps.\r\n            for (var i = 0; i < this.ENCODED_VALS.length; i++) {\r\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\r\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\r\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\r\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\r\n                // Be forgiving when decoding and correctly decode both encodings.\r\n                if (i >= this.ENCODED_VALS_BASE.length) {\r\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\r\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * URL-safe base64 encoding\r\n * @param {!string} str\r\n * @return {!string}\r\n */\r\nvar base64Encode = function (str) {\r\n    var utf8Bytes = stringToByteArray(str);\r\n    return base64.encodeByteArray(utf8Bytes, true);\r\n};\r\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param {string} str To be decoded\r\n * @return {?string} Decoded result, if possible\r\n */\r\nvar base64Decode = function (str) {\r\n    try {\r\n        return base64.decodeString(str, true);\r\n    }\r\n    catch (e) {\r\n        console.error('base64Decode failed: ', e);\r\n    }\r\n    return null;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n */\r\nfunction deepCopy(value) {\r\n    return deepExtend(undefined, value);\r\n}\r\n/**\r\n * Copy properties from source to target (recursively allows extension\r\n * of Objects and Arrays).  Scalar values in the target are over-written.\r\n * If target is undefined, an object of the appropriate type will be created\r\n * (and returned).\r\n *\r\n * We recursively copy all child properties of plain Objects in the source- so\r\n * that namespace- like dictionaries are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in\r\n * the source Object are copied onto it as static properties of the Function.\r\n */\r\nfunction deepExtend(target, source) {\r\n    if (!(source instanceof Object)) {\r\n        return source;\r\n    }\r\n    switch (source.constructor) {\r\n        case Date:\r\n            // Treat Dates like scalars; if the target date object had any child\r\n            // properties - they will be lost!\r\n            var dateValue = source;\r\n            return new Date(dateValue.getTime());\r\n        case Object:\r\n            if (target === undefined) {\r\n                target = {};\r\n            }\r\n            break;\r\n        case Array:\r\n            // Always copy the array source and overwrite the target.\r\n            target = [];\r\n            break;\r\n        default:\r\n            // Not a plain Object - treat it as a scalar.\r\n            return source;\r\n    }\r\n    for (var prop in source) {\r\n        if (!source.hasOwnProperty(prop)) {\r\n            continue;\r\n        }\r\n        target[prop] = deepExtend(target[prop], source[prop]);\r\n    }\r\n    return target;\r\n}\r\n// TODO: Really needed (for JSCompiler type checking)?\r\nfunction patchProperty(obj, prop, value) {\r\n    obj[prop] = value;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Deferred = /** @class */ (function () {\r\n    function Deferred() {\r\n        var _this = this;\r\n        this.promise = new Promise(function (resolve, reject) {\r\n            _this.resolve = resolve;\r\n            _this.reject = reject;\r\n        });\r\n    }\r\n    /**\r\n     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n     * @param {((?function(?(Error)): (?|undefined))| (?function(?(Error),?=): (?|undefined)))=} callback\r\n     * @return {!function(?(Error), ?=)}\r\n     */\r\n    Deferred.prototype.wrapCallback = function (callback) {\r\n        var _this = this;\r\n        return function (error, value) {\r\n            if (error) {\r\n                _this.reject(error);\r\n            }\r\n            else {\r\n                _this.resolve(value);\r\n            }\r\n            if (typeof callback === 'function') {\r\n                // Attaching noop handler just in case developer wasn't expecting\r\n                // promises\r\n                _this.promise.catch(function () { });\r\n                // Some of our callbacks don't expect a value and our own tests\r\n                // assert that the parameter length is 1\r\n                if (callback.length === 1) {\r\n                    callback(error);\r\n                }\r\n                else {\r\n                    callback(error, value);\r\n                }\r\n            }\r\n        };\r\n    };\r\n    return Deferred;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return {string} user agent string\r\n */\r\nvar getUA = function () {\r\n    if (typeof navigator !== 'undefined' &&\r\n        typeof navigator['userAgent'] === 'string') {\r\n        return navigator['userAgent'];\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n};\r\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap in the Ripple emulator) nor\r\n * Cordova `onDeviceReady`, which would normally wait for a callback.\r\n *\r\n * @return {boolean} isMobileCordova\r\n */\r\nvar isMobileCordova = function () {\r\n    return (typeof window !== 'undefined' &&\r\n        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\r\n        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));\r\n};\r\n/**\r\n * Detect React Native.\r\n *\r\n * @return {boolean} True if ReactNative environment is detected.\r\n */\r\nvar isReactNative = function () {\r\n    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');\r\n};\r\n/**\r\n * Detect Node.js.\r\n *\r\n * @return {boolean} True if Node.js environment is detected.\r\n */\r\nvar isNodeSdk = function () {\r\n    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\r\n};\n\nvar ERROR_NAME = 'FirebaseError';\r\nvar captureStackTrace = Error\r\n    .captureStackTrace;\r\n// Export for faking in tests\r\nfunction patchCapture(captureFake) {\r\n    var result = captureStackTrace;\r\n    captureStackTrace = captureFake;\r\n    return result;\r\n}\r\nvar FirebaseError = /** @class */ (function () {\r\n    function FirebaseError(code, message) {\r\n        this.code = code;\r\n        this.message = message;\r\n        // We want the stack value, if implemented by Error\r\n        if (captureStackTrace) {\r\n            // Patches this.stack, omitted calls above ErrorFactory#create\r\n            captureStackTrace(this, ErrorFactory.prototype.create);\r\n        }\r\n        else {\r\n            try {\r\n                // In case of IE11, stack will be set only after error is raised.\r\n                // https://docs.microsoft.com/en-us/scripting/javascript/reference/stack-property-error-javascript\r\n                throw Error.apply(this, arguments);\r\n            }\r\n            catch (err) {\r\n                this.name = ERROR_NAME;\r\n                // Make non-enumerable getter for the property.\r\n                Object.defineProperty(this, 'stack', {\r\n                    get: function () {\r\n                        return err.stack;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    return FirebaseError;\r\n}());\r\n// Back-door inheritance\r\nFirebaseError.prototype = Object.create(Error.prototype);\r\nFirebaseError.prototype.constructor = FirebaseError;\r\nFirebaseError.prototype.name = ERROR_NAME;\r\nvar ErrorFactory = /** @class */ (function () {\r\n    function ErrorFactory(service, serviceName, errors) {\r\n        this.service = service;\r\n        this.serviceName = serviceName;\r\n        this.errors = errors;\r\n        // Matches {$name}, by default.\r\n        this.pattern = /\\{\\$([^}]+)}/g;\r\n        // empty\r\n    }\r\n    ErrorFactory.prototype.create = function (code, data) {\r\n        if (data === undefined) {\r\n            data = {};\r\n        }\r\n        var template = this.errors[code];\r\n        var fullCode = this.service + '/' + code;\r\n        var message;\r\n        if (template === undefined) {\r\n            message = 'Error';\r\n        }\r\n        else {\r\n            message = template.replace(this.pattern, function (match, key) {\r\n                var value = data[key];\r\n                return value !== undefined ? value.toString() : '<' + key + '?>';\r\n            });\r\n        }\r\n        // Service: Error message (service/code).\r\n        message = this.serviceName + ': ' + message + ' (' + fullCode + ').';\r\n        var err = new FirebaseError(fullCode, message);\r\n        // Populate the Error object with message parts for programmatic\r\n        // accesses (e.g., e.file).\r\n        for (var prop in data) {\r\n            if (!data.hasOwnProperty(prop) || prop.slice(-1) === '_') {\r\n                continue;\r\n            }\r\n            err[prop] = data[prop];\r\n        }\r\n        return err;\r\n    };\r\n    return ErrorFactory;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */\r\nfunction jsonEval(str) {\r\n    return JSON.parse(str);\r\n}\r\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data Javascript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */\r\nfunction stringify(data) {\r\n    return JSON.stringify(data);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {{header: *, claims: *, data: *, signature: string}}\r\n */\r\nvar decode = function (token) {\r\n    var header = {}, claims = {}, data = {}, signature = '';\r\n    try {\r\n        var parts = token.split('.');\r\n        header = jsonEval(base64Decode(parts[0]) || '');\r\n        claims = jsonEval(base64Decode(parts[1]) || '');\r\n        signature = parts[2];\r\n        data = claims['d'] || {};\r\n        delete claims['d'];\r\n    }\r\n    catch (e) { }\r\n    return {\r\n        header: header,\r\n        claims: claims,\r\n        data: data,\r\n        signature: signature\r\n    };\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {boolean}\r\n */\r\nvar isValidTimestamp = function (token) {\r\n    var claims = decode(token).claims, now = Math.floor(new Date().getTime() / 1000), validSince, validUntil;\r\n    if (typeof claims === 'object') {\r\n        if (claims.hasOwnProperty('nbf')) {\r\n            validSince = claims['nbf'];\r\n        }\r\n        else if (claims.hasOwnProperty('iat')) {\r\n            validSince = claims['iat'];\r\n        }\r\n        if (claims.hasOwnProperty('exp')) {\r\n            validUntil = claims['exp'];\r\n        }\r\n        else {\r\n            // token will expire after 24h by default\r\n            validUntil = validSince + 86400;\r\n        }\r\n    }\r\n    return (now && validSince && validUntil && now >= validSince && now <= validUntil);\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {?number}\r\n */\r\nvar issuedAtTime = function (token) {\r\n    var claims = decode(token).claims;\r\n    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\r\n        return claims['iat'];\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {boolean}\r\n */\r\nvar isValidFormat = function (token) {\r\n    var decoded = decode(token), claims = decoded.claims;\r\n    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\r\n};\r\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {boolean}\r\n */\r\nvar isAdmin = function (token) {\r\n    var claims = decode(token).claims;\r\n    return typeof claims === 'object' && claims['admin'] === true;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// See http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/\r\nvar contains = function (obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n};\r\nvar safeGet = function (obj, key) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key))\r\n        return obj[key];\r\n    // else return undefined.\r\n};\r\n/**\r\n * Enumerates the keys/values in an object, excluding keys defined on the prototype.\r\n *\r\n * @param {?Object.<K,V>} obj Object to enumerate.\r\n * @param {!function(K, V)} fn Function to call for each key and value.\r\n * @template K,V\r\n */\r\nvar forEach = function (obj, fn) {\r\n    for (var key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n};\r\n/**\r\n * Copies all the (own) properties from one object to another.\r\n * @param {!Object} objTo\r\n * @param {!Object} objFrom\r\n * @return {!Object} objTo\r\n */\r\nvar extend = function (objTo, objFrom) {\r\n    forEach(objFrom, function (key, value) {\r\n        objTo[key] = value;\r\n    });\r\n    return objTo;\r\n};\r\n/**\r\n * Returns a clone of the specified object.\r\n * @param {!Object} obj\r\n * @return {!Object} cloned obj.\r\n */\r\nvar clone = function (obj) {\r\n    return extend({}, obj);\r\n};\r\n/**\r\n * Returns true if obj has typeof \"object\" and is not null.  Unlike goog.isObject(), does not return true\r\n * for functions.\r\n *\r\n * @param obj {*} A potential object.\r\n * @returns {boolean} True if it's an object.\r\n */\r\nvar isNonNullObject = function (obj) {\r\n    return typeof obj === 'object' && obj !== null;\r\n};\r\nvar isEmpty = function (obj) {\r\n    for (var key in obj) {\r\n        return false;\r\n    }\r\n    return true;\r\n};\r\nvar getCount = function (obj) {\r\n    var rv = 0;\r\n    for (var key in obj) {\r\n        rv++;\r\n    }\r\n    return rv;\r\n};\r\nvar map = function (obj, f, opt_obj) {\r\n    var res = {};\r\n    for (var key in obj) {\r\n        res[key] = f.call(opt_obj, obj[key], key, obj);\r\n    }\r\n    return res;\r\n};\r\nvar findKey = function (obj, fn, opt_this) {\r\n    for (var key in obj) {\r\n        if (fn.call(opt_this, obj[key], key, obj)) {\r\n            return key;\r\n        }\r\n    }\r\n    return undefined;\r\n};\r\nvar findValue = function (obj, fn, opt_this) {\r\n    var key = findKey(obj, fn, opt_this);\r\n    return key && obj[key];\r\n};\r\nvar getAnyKey = function (obj) {\r\n    for (var key in obj) {\r\n        return key;\r\n    }\r\n};\r\nvar getValues = function (obj) {\r\n    var res = [];\r\n    var i = 0;\r\n    for (var key in obj) {\r\n        res[i++] = obj[key];\r\n    }\r\n    return res;\r\n};\r\n/**\r\n * Tests whether every key/value pair in an object pass the test implemented\r\n * by the provided function\r\n *\r\n * @param {?Object.<K,V>} obj Object to test.\r\n * @param {!function(K, V)} fn Function to call for each key and value.\r\n * @template K,V\r\n */\r\nvar every = function (obj, fn) {\r\n    for (var key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            if (!fn(key, obj[key])) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a params\r\n * object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n *\r\n * @param {!Object} querystringParams\r\n * @return {string}\r\n */\r\nvar querystring = function (querystringParams) {\r\n    var params = [];\r\n    forEach(querystringParams, function (key, value) {\r\n        if (Array.isArray(value)) {\r\n            value.forEach(function (arrayVal) {\r\n                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\r\n            });\r\n        }\r\n        else {\r\n            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n        }\r\n    });\r\n    return params.length ? '&' + params.join('&') : '';\r\n};\r\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object (e.g. {arg: 'val', arg2: 'val2'})\r\n *\r\n * @param {string} querystring\r\n * @return {!Object}\r\n */\r\nvar querystringDecode = function (querystring) {\r\n    var obj = {};\r\n    var tokens = querystring.replace(/^\\?/, '').split('&');\r\n    tokens.forEach(function (token) {\r\n        if (token) {\r\n            var key = token.split('=');\r\n            obj[key[0]] = key[1];\r\n        }\r\n    });\r\n    return obj;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Copyright 2011 The Closure Library Authors. All Rights Reserved.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n/**\r\n * @fileoverview Abstract cryptographic hash interface.\r\n *\r\n * See Sha1 and Md5 for sample implementations.\r\n *\r\n */\r\n/**\r\n * Create a cryptographic hash instance.\r\n *\r\n * @constructor\r\n * @struct\r\n */\r\nvar Hash = /** @class */ (function () {\r\n    function Hash() {\r\n        /**\r\n         * The block size for the hasher.\r\n         * @type {number}\r\n         */\r\n        this.blockSize = -1;\r\n    }\r\n    return Hash;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */\r\n/**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @extends {Hash}\r\n * @final\r\n * @struct\r\n */\r\nvar Sha1 = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Sha1, _super);\r\n    function Sha1() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Holds the previous values of accumulated variables a-e in the compress_\r\n         * function.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\r\n        _this.chain_ = [];\r\n        /**\r\n         * A buffer holding the partially computed hash result.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\r\n        _this.buf_ = [];\r\n        /**\r\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n         * as the message schedule in the docs.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\r\n        _this.W_ = [];\r\n        /**\r\n         * Contains data needed to pad messages less than 64 bytes.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\r\n        _this.pad_ = [];\r\n        /**\r\n         * @private {number}\r\n         */\r\n        _this.inbuf_ = 0;\r\n        /**\r\n         * @private {number}\r\n         */\r\n        _this.total_ = 0;\r\n        _this.blockSize = 512 / 8;\r\n        _this.pad_[0] = 128;\r\n        for (var i = 1; i < _this.blockSize; ++i) {\r\n            _this.pad_[i] = 0;\r\n        }\r\n        _this.reset();\r\n        return _this;\r\n    }\r\n    Sha1.prototype.reset = function () {\r\n        this.chain_[0] = 0x67452301;\r\n        this.chain_[1] = 0xefcdab89;\r\n        this.chain_[2] = 0x98badcfe;\r\n        this.chain_[3] = 0x10325476;\r\n        this.chain_[4] = 0xc3d2e1f0;\r\n        this.inbuf_ = 0;\r\n        this.total_ = 0;\r\n    };\r\n    /**\r\n     * Internal compress helper function.\r\n     * @param {!Array<number>|!Uint8Array|string} buf Block to compress.\r\n     * @param {number=} opt_offset Offset of the block in the buffer.\r\n     * @private\r\n     */\r\n    Sha1.prototype.compress_ = function (buf, opt_offset) {\r\n        if (!opt_offset) {\r\n            opt_offset = 0;\r\n        }\r\n        var W = this.W_;\r\n        // get 16 big endian words\r\n        if (typeof buf === 'string') {\r\n            for (var i = 0; i < 16; i++) {\r\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\r\n                // have a bug that turns the post-increment ++ operator into pre-increment\r\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\r\n                // correctness and which is affected by this bug, so I've removed all uses\r\n                // of post-increment ++ in which the result value is used.  We can revert\r\n                // this change once the Safari bug\r\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\r\n                // most clients have been updated.\r\n                W[i] =\r\n                    (buf.charCodeAt(opt_offset) << 24) |\r\n                        (buf.charCodeAt(opt_offset + 1) << 16) |\r\n                        (buf.charCodeAt(opt_offset + 2) << 8) |\r\n                        buf.charCodeAt(opt_offset + 3);\r\n                opt_offset += 4;\r\n            }\r\n        }\r\n        else {\r\n            for (var i = 0; i < 16; i++) {\r\n                W[i] =\r\n                    (buf[opt_offset] << 24) |\r\n                        (buf[opt_offset + 1] << 16) |\r\n                        (buf[opt_offset + 2] << 8) |\r\n                        buf[opt_offset + 3];\r\n                opt_offset += 4;\r\n            }\r\n        }\r\n        // expand to 80 words\r\n        for (var i = 16; i < 80; i++) {\r\n            var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\r\n            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\r\n        }\r\n        var a = this.chain_[0];\r\n        var b = this.chain_[1];\r\n        var c = this.chain_[2];\r\n        var d = this.chain_[3];\r\n        var e = this.chain_[4];\r\n        var f, k;\r\n        // TODO(user): Try to unroll this loop to speed up the computation.\r\n        for (var i = 0; i < 80; i++) {\r\n            if (i < 40) {\r\n                if (i < 20) {\r\n                    f = d ^ (b & (c ^ d));\r\n                    k = 0x5a827999;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0x6ed9eba1;\r\n                }\r\n            }\r\n            else {\r\n                if (i < 60) {\r\n                    f = (b & c) | (d & (b | c));\r\n                    k = 0x8f1bbcdc;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0xca62c1d6;\r\n                }\r\n            }\r\n            var t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\r\n            e = d;\r\n            d = c;\r\n            c = ((b << 30) | (b >>> 2)) & 0xffffffff;\r\n            b = a;\r\n            a = t;\r\n        }\r\n        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\r\n        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\r\n        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\r\n        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\r\n        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\r\n    };\r\n    Sha1.prototype.update = function (bytes, opt_length) {\r\n        // TODO(johnlenz): tighten the function signature and remove this check\r\n        if (bytes == null) {\r\n            return;\r\n        }\r\n        if (opt_length === undefined) {\r\n            opt_length = bytes.length;\r\n        }\r\n        var lengthMinusBlock = opt_length - this.blockSize;\r\n        var n = 0;\r\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\r\n        var buf = this.buf_;\r\n        var inbuf = this.inbuf_;\r\n        // The outer while loop should execute at most twice.\r\n        while (n < opt_length) {\r\n            // When we have no data in the block to top up, we can directly process the\r\n            // input buffer (assuming it contains sufficient data). This gives ~25%\r\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\r\n            // the data is provided in large chunks (or in multiples of 64 bytes).\r\n            if (inbuf == 0) {\r\n                while (n <= lengthMinusBlock) {\r\n                    this.compress_(bytes, n);\r\n                    n += this.blockSize;\r\n                }\r\n            }\r\n            if (typeof bytes === 'string') {\r\n                while (n < opt_length) {\r\n                    buf[inbuf] = bytes.charCodeAt(n);\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf == this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                while (n < opt_length) {\r\n                    buf[inbuf] = bytes[n];\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf == this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.inbuf_ = inbuf;\r\n        this.total_ += opt_length;\r\n    };\r\n    /** @override */\r\n    Sha1.prototype.digest = function () {\r\n        var digest = [];\r\n        var totalBits = this.total_ * 8;\r\n        // Add pad 0x80 0x00*.\r\n        if (this.inbuf_ < 56) {\r\n            this.update(this.pad_, 56 - this.inbuf_);\r\n        }\r\n        else {\r\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\r\n        }\r\n        // Add # bits.\r\n        for (var i = this.blockSize - 1; i >= 56; i--) {\r\n            this.buf_[i] = totalBits & 255;\r\n            totalBits /= 256; // Don't use bit-shifting here!\r\n        }\r\n        this.compress_(this.buf_);\r\n        var n = 0;\r\n        for (var i = 0; i < 5; i++) {\r\n            for (var j = 24; j >= 0; j -= 8) {\r\n                digest[n] = (this.chain_[i] >> j) & 255;\r\n                ++n;\r\n            }\r\n        }\r\n        return digest;\r\n    };\r\n    return Sha1;\r\n}(Hash));\n\n/**\r\n * Helper to make a Subscribe function (just like Promise helps make a\r\n * Thenable).\r\n *\r\n * @param executor Function which can make calls to a single Observer\r\n *     as a proxy.\r\n * @param onNoObservers Callback when count of Observers goes to zero.\r\n */\r\nfunction createSubscribe(executor, onNoObservers) {\r\n    var proxy = new ObserverProxy(executor, onNoObservers);\r\n    return proxy.subscribe.bind(proxy);\r\n}\r\n/**\r\n * Implement fan-out for any number of Observers attached via a subscribe\r\n * function.\r\n */\r\nvar ObserverProxy = /** @class */ (function () {\r\n    /**\r\n     * @param executor Function which can make calls to a single Observer\r\n     *     as a proxy.\r\n     * @param onNoObservers Callback when count of Observers goes to zero.\r\n     */\r\n    function ObserverProxy(executor, onNoObservers) {\r\n        var _this = this;\r\n        this.observers = [];\r\n        this.unsubscribes = [];\r\n        this.observerCount = 0;\r\n        // Micro-task scheduling by calling task.then().\r\n        this.task = Promise.resolve();\r\n        this.finalized = false;\r\n        this.onNoObservers = onNoObservers;\r\n        // Call the executor asynchronously so subscribers that are called\r\n        // synchronously after the creation of the subscribe function\r\n        // can still receive the very first value generated in the executor.\r\n        this.task\r\n            .then(function () {\r\n            executor(_this);\r\n        })\r\n            .catch(function (e) {\r\n            _this.error(e);\r\n        });\r\n    }\r\n    ObserverProxy.prototype.next = function (value) {\r\n        this.forEachObserver(function (observer) {\r\n            observer.next(value);\r\n        });\r\n    };\r\n    ObserverProxy.prototype.error = function (error) {\r\n        this.forEachObserver(function (observer) {\r\n            observer.error(error);\r\n        });\r\n        this.close(error);\r\n    };\r\n    ObserverProxy.prototype.complete = function () {\r\n        this.forEachObserver(function (observer) {\r\n            observer.complete();\r\n        });\r\n        this.close();\r\n    };\r\n    /**\r\n     * Subscribe function that can be used to add an Observer to the fan-out list.\r\n     *\r\n     * - We require that no event is sent to a subscriber sychronously to their\r\n     *   call to subscribe().\r\n     */\r\n    ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {\r\n        var _this = this;\r\n        var observer;\r\n        if (nextOrObserver === undefined &&\r\n            error === undefined &&\r\n            complete === undefined) {\r\n            throw new Error('Missing Observer.');\r\n        }\r\n        // Assemble an Observer object when passed as callback functions.\r\n        if (implementsAnyMethods(nextOrObserver, ['next', 'error', 'complete'])) {\r\n            observer = nextOrObserver;\r\n        }\r\n        else {\r\n            observer = {\r\n                next: nextOrObserver,\r\n                error: error,\r\n                complete: complete\r\n            };\r\n        }\r\n        if (observer.next === undefined) {\r\n            observer.next = noop;\r\n        }\r\n        if (observer.error === undefined) {\r\n            observer.error = noop;\r\n        }\r\n        if (observer.complete === undefined) {\r\n            observer.complete = noop;\r\n        }\r\n        var unsub = this.unsubscribeOne.bind(this, this.observers.length);\r\n        // Attempt to subscribe to a terminated Observable - we\r\n        // just respond to the Observer with the final error or complete\r\n        // event.\r\n        if (this.finalized) {\r\n            this.task.then(function () {\r\n                try {\r\n                    if (_this.finalError) {\r\n                        observer.error(_this.finalError);\r\n                    }\r\n                    else {\r\n                        observer.complete();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // nothing\r\n                }\r\n                return;\r\n            });\r\n        }\r\n        this.observers.push(observer);\r\n        return unsub;\r\n    };\r\n    // Unsubscribe is synchronous - we guarantee that no events are sent to\r\n    // any unsubscribed Observer.\r\n    ObserverProxy.prototype.unsubscribeOne = function (i) {\r\n        if (this.observers === undefined || this.observers[i] === undefined) {\r\n            return;\r\n        }\r\n        delete this.observers[i];\r\n        this.observerCount -= 1;\r\n        if (this.observerCount === 0 && this.onNoObservers !== undefined) {\r\n            this.onNoObservers(this);\r\n        }\r\n    };\r\n    ObserverProxy.prototype.forEachObserver = function (fn) {\r\n        if (this.finalized) {\r\n            // Already closed by previous event....just eat the additional values.\r\n            return;\r\n        }\r\n        // Since sendOne calls asynchronously - there is no chance that\r\n        // this.observers will become undefined.\r\n        for (var i = 0; i < this.observers.length; i++) {\r\n            this.sendOne(i, fn);\r\n        }\r\n    };\r\n    // Call the Observer via one of it's callback function. We are careful to\r\n    // confirm that the observe has not been unsubscribed since this asynchronous\r\n    // function had been queued.\r\n    ObserverProxy.prototype.sendOne = function (i, fn) {\r\n        var _this = this;\r\n        // Execute the callback asynchronously\r\n        this.task.then(function () {\r\n            if (_this.observers !== undefined && _this.observers[i] !== undefined) {\r\n                try {\r\n                    fn(_this.observers[i]);\r\n                }\r\n                catch (e) {\r\n                    // Ignore exceptions raised in Observers or missing methods of an\r\n                    // Observer.\r\n                    // Log error to console. b/31404806\r\n                    if (typeof console !== 'undefined' && console.error) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n    ObserverProxy.prototype.close = function (err) {\r\n        var _this = this;\r\n        if (this.finalized) {\r\n            return;\r\n        }\r\n        this.finalized = true;\r\n        if (err !== undefined) {\r\n            this.finalError = err;\r\n        }\r\n        // Proxy is no longer needed - garbage collect references\r\n        this.task.then(function () {\r\n            _this.observers = undefined;\r\n            _this.onNoObservers = undefined;\r\n        });\r\n    };\r\n    return ObserverProxy;\r\n}());\r\n/** Turn synchronous function into one called asynchronously. */\r\nfunction async(fn, onError) {\r\n    return function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        Promise.resolve(true)\r\n            .then(function () {\r\n            fn.apply(void 0, args);\r\n        })\r\n            .catch(function (error) {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n        });\r\n    };\r\n}\r\n/**\r\n * Return true if the object passed in implements any of the named methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {\r\n        var method = methods_1[_i];\r\n        if (method in obj && typeof obj[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction noop() {\r\n    // do nothing\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param {!string} fnName The function name\r\n * @param {!number} minCount The minimum number of arguments to allow for the function call\r\n * @param {!number} maxCount The maximum number of argument to allow for the function call\r\n * @param {!number} argCount The actual number of arguments provided.\r\n */\r\nvar validateArgCount = function (fnName, minCount, maxCount, argCount) {\r\n    var argError;\r\n    if (argCount < minCount) {\r\n        argError = 'at least ' + minCount;\r\n    }\r\n    else if (argCount > maxCount) {\r\n        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\r\n    }\r\n    if (argError) {\r\n        var error = fnName +\r\n            ' failed: Was called with ' +\r\n            argCount +\r\n            (argCount === 1 ? ' argument.' : ' arguments.') +\r\n            ' Expects ' +\r\n            argError +\r\n            '.';\r\n        throw new Error(error);\r\n    }\r\n};\r\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param {!string} fnName The function name\r\n * @param {!number} argumentNumber The index of the argument\r\n * @param {boolean} optional Whether or not the argument is optional\r\n * @return {!string} The prefix to add to the error thrown for validation.\r\n */\r\nfunction errorPrefix(fnName, argumentNumber, optional) {\r\n    var argName = '';\r\n    switch (argumentNumber) {\r\n        case 1:\r\n            argName = optional ? 'first' : 'First';\r\n            break;\r\n        case 2:\r\n            argName = optional ? 'second' : 'Second';\r\n            break;\r\n        case 3:\r\n            argName = optional ? 'third' : 'Third';\r\n            break;\r\n        case 4:\r\n            argName = optional ? 'fourth' : 'Fourth';\r\n            break;\r\n        default:\r\n            throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');\r\n    }\r\n    var error = fnName + ' failed: ';\r\n    error += argName + ' argument ';\r\n    return error;\r\n}\r\n/**\r\n * @param {!string} fnName\r\n * @param {!number} argumentNumber\r\n * @param {!string} namespace\r\n * @param {boolean} optional\r\n */\r\nfunction validateNamespace(fnName, argumentNumber, namespace, optional) {\r\n    if (optional && !namespace)\r\n        return;\r\n    if (typeof namespace !== 'string') {\r\n        //TODO: I should do more validation here. We only allow certain chars in namespaces.\r\n        throw new Error(errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid firebase namespace.');\r\n    }\r\n}\r\nfunction validateCallback(fnName, argumentNumber, callback, optional) {\r\n    if (optional && !callback)\r\n        return;\r\n    if (typeof callback !== 'function')\r\n        throw new Error(errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid function.');\r\n}\r\nfunction validateContextObject(fnName, argumentNumber, context, optional) {\r\n    if (optional && !context)\r\n        return;\r\n    if (typeof context !== 'object' || context === null)\r\n        throw new Error(errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid context object.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\r\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\r\n// so it's been modified.\r\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\r\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\r\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\r\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\r\n// pair).\r\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\r\n/**\r\n * @param {string} str\r\n * @return {Array}\r\n */\r\nvar stringToByteArray$1 = function (str) {\r\n    var out = [], p = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n        var c = str.charCodeAt(i);\r\n        // Is this the lead surrogate in a surrogate pair?\r\n        if (c >= 0xd800 && c <= 0xdbff) {\r\n            var high = c - 0xd800; // the high 10 bits.\r\n            i++;\r\n            assert(i < str.length, 'Surrogate pair missing trail surrogate.');\r\n            var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\r\n            c = 0x10000 + (high << 10) + low;\r\n        }\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if (c < 65536) {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */\r\nvar stringLength = function (str) {\r\n    var p = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n        var c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            p++;\r\n        }\r\n        else if (c < 2048) {\r\n            p += 2;\r\n        }\r\n        else if (c >= 0xd800 && c <= 0xdbff) {\r\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\r\n            p += 4;\r\n            i++; // skip trail surrogate.\r\n        }\r\n        else {\r\n            p += 3;\r\n        }\r\n    }\r\n    return p;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nexports.assert = assert;\nexports.assertionError = assertionError;\nexports.base64 = base64;\nexports.base64Decode = base64Decode;\nexports.base64Encode = base64Encode;\nexports.CONSTANTS = CONSTANTS;\nexports.deepCopy = deepCopy;\nexports.deepExtend = deepExtend;\nexports.patchProperty = patchProperty;\nexports.Deferred = Deferred;\nexports.getUA = getUA;\nexports.isMobileCordova = isMobileCordova;\nexports.isNodeSdk = isNodeSdk;\nexports.isReactNative = isReactNative;\nexports.ErrorFactory = ErrorFactory;\nexports.FirebaseError = FirebaseError;\nexports.patchCapture = patchCapture;\nexports.jsonEval = jsonEval;\nexports.stringify = stringify;\nexports.decode = decode;\nexports.isAdmin = isAdmin;\nexports.issuedAtTime = issuedAtTime;\nexports.isValidFormat = isValidFormat;\nexports.isValidTimestamp = isValidTimestamp;\nexports.clone = clone;\nexports.contains = contains;\nexports.every = every;\nexports.extend = extend;\nexports.findKey = findKey;\nexports.findValue = findValue;\nexports.forEach = forEach;\nexports.getAnyKey = getAnyKey;\nexports.getCount = getCount;\nexports.getValues = getValues;\nexports.isEmpty = isEmpty;\nexports.isNonNullObject = isNonNullObject;\nexports.map = map;\nexports.safeGet = safeGet;\nexports.querystring = querystring;\nexports.querystringDecode = querystringDecode;\nexports.Sha1 = Sha1;\nexports.async = async;\nexports.createSubscribe = createSubscribe;\nexports.errorPrefix = errorPrefix;\nexports.validateArgCount = validateArgCount;\nexports.validateCallback = validateCallback;\nexports.validateContextObject = validateContextObject;\nexports.validateNamespace = validateNamespace;\nexports.stringLength = stringLength;\nexports.stringToByteArray = stringToByteArray$1;\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import 'whatwg-fetch';\nimport 'promise-polyfill/lib/polyfill';\nimport 'core-js/fn/array/find';\nimport 'core-js/fn/array/find-index';\nimport 'core-js/fn/object/assign';\nimport 'core-js/fn/string/starts-with';\nimport 'core-js/fn/string/repeat';\nimport 'core-js/fn/symbol';\nimport 'core-js/fn/symbol/iterator';\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n","(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = options.status === undefined ? 200 : options.status\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n","'use strict';\n\n// Store setTimeout reference so promise-polyfill will be unaffected by\n// other code modifying setTimeout (like sinon.useFakeTimers())\nvar setTimeoutFunc = setTimeout;\n\nfunction noop() {}\n\n// Polyfill for Function.prototype.bind\nfunction bind(fn, thisArg) {\n  return function() {\n    fn.apply(thisArg, arguments);\n  };\n}\n\nfunction Promise(fn) {\n  if (!(this instanceof Promise))\n    throw new TypeError('Promises must be constructed via new');\n  if (typeof fn !== 'function') throw new TypeError('not a function');\n  this._state = 0;\n  this._handled = false;\n  this._value = undefined;\n  this._deferreds = [];\n\n  doResolve(fn, this);\n}\n\nfunction handle(self, deferred) {\n  while (self._state === 3) {\n    self = self._value;\n  }\n  if (self._state === 0) {\n    self._deferreds.push(deferred);\n    return;\n  }\n  self._handled = true;\n  Promise._immediateFn(function() {\n    var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;\n    if (cb === null) {\n      (self._state === 1 ? resolve : reject)(deferred.promise, self._value);\n      return;\n    }\n    var ret;\n    try {\n      ret = cb(self._value);\n    } catch (e) {\n      reject(deferred.promise, e);\n      return;\n    }\n    resolve(deferred.promise, ret);\n  });\n}\n\nfunction resolve(self, newValue) {\n  try {\n    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n    if (newValue === self)\n      throw new TypeError('A promise cannot be resolved with itself.');\n    if (\n      newValue &&\n      (typeof newValue === 'object' || typeof newValue === 'function')\n    ) {\n      var then = newValue.then;\n      if (newValue instanceof Promise) {\n        self._state = 3;\n        self._value = newValue;\n        finale(self);\n        return;\n      } else if (typeof then === 'function') {\n        doResolve(bind(then, newValue), self);\n        return;\n      }\n    }\n    self._state = 1;\n    self._value = newValue;\n    finale(self);\n  } catch (e) {\n    reject(self, e);\n  }\n}\n\nfunction reject(self, newValue) {\n  self._state = 2;\n  self._value = newValue;\n  finale(self);\n}\n\nfunction finale(self) {\n  if (self._state === 2 && self._deferreds.length === 0) {\n    Promise._immediateFn(function() {\n      if (!self._handled) {\n        Promise._unhandledRejectionFn(self._value);\n      }\n    });\n  }\n\n  for (var i = 0, len = self._deferreds.length; i < len; i++) {\n    handle(self, self._deferreds[i]);\n  }\n  self._deferreds = null;\n}\n\nfunction Handler(onFulfilled, onRejected, promise) {\n  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n  this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n  this.promise = promise;\n}\n\n/**\n * Take a potentially misbehaving resolver function and make sure\n * onFulfilled and onRejected are only called once.\n *\n * Makes no guarantees about asynchrony.\n */\nfunction doResolve(fn, self) {\n  var done = false;\n  try {\n    fn(\n      function(value) {\n        if (done) return;\n        done = true;\n        resolve(self, value);\n      },\n      function(reason) {\n        if (done) return;\n        done = true;\n        reject(self, reason);\n      }\n    );\n  } catch (ex) {\n    if (done) return;\n    done = true;\n    reject(self, ex);\n  }\n}\n\nPromise.prototype['catch'] = function(onRejected) {\n  return this.then(null, onRejected);\n};\n\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  var prom = new this.constructor(noop);\n\n  handle(this, new Handler(onFulfilled, onRejected, prom));\n  return prom;\n};\n\nPromise.prototype['finally'] = function(callback) {\n  var constructor = this.constructor;\n  return this.then(\n    function(value) {\n      return constructor.resolve(callback()).then(function() {\n        return value;\n      });\n    },\n    function(reason) {\n      return constructor.resolve(callback()).then(function() {\n        return constructor.reject(reason);\n      });\n    }\n  );\n};\n\nPromise.all = function(arr) {\n  return new Promise(function(resolve, reject) {\n    if (!arr || typeof arr.length === 'undefined')\n      throw new TypeError('Promise.all accepts an array');\n    var args = Array.prototype.slice.call(arr);\n    if (args.length === 0) return resolve([]);\n    var remaining = args.length;\n\n    function res(i, val) {\n      try {\n        if (val && (typeof val === 'object' || typeof val === 'function')) {\n          var then = val.then;\n          if (typeof then === 'function') {\n            then.call(\n              val,\n              function(val) {\n                res(i, val);\n              },\n              reject\n            );\n            return;\n          }\n        }\n        args[i] = val;\n        if (--remaining === 0) {\n          resolve(args);\n        }\n      } catch (ex) {\n        reject(ex);\n      }\n    }\n\n    for (var i = 0; i < args.length; i++) {\n      res(i, args[i]);\n    }\n  });\n};\n\nPromise.resolve = function(value) {\n  if (value && typeof value === 'object' && value.constructor === Promise) {\n    return value;\n  }\n\n  return new Promise(function(resolve) {\n    resolve(value);\n  });\n};\n\nPromise.reject = function(value) {\n  return new Promise(function(resolve, reject) {\n    reject(value);\n  });\n};\n\nPromise.race = function(values) {\n  return new Promise(function(resolve, reject) {\n    for (var i = 0, len = values.length; i < len; i++) {\n      values[i].then(resolve, reject);\n    }\n  });\n};\n\n// Use polyfill for setImmediate for performance gains\nPromise._immediateFn =\n  (typeof setImmediate === 'function' &&\n    function(fn) {\n      setImmediate(fn);\n    }) ||\n  function(fn) {\n    setTimeoutFunc(fn, 0);\n  };\n\nPromise._unhandledRejectionFn = function _unhandledRejectionFn(err) {\n  if (typeof console !== 'undefined' && console) {\n    console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console\n  }\n};\n\nvar globalNS = (function() {\n  // the only reliable means to get the global object is\n  // `Function('return this')()`\n  // However, this causes CSP violations in Chrome apps.\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('unable to locate global object');\n})();\n\nif (!globalNS.Promise) {\n  globalNS.Promise = Promise;\n}\n","var apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmeidate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","require('../../modules/es6.array.find');\nmodule.exports = require('../../modules/_core').Array.find;\n","'use strict';\n// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(5);\nvar KEY = 'find';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  find: function find(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n","// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\nvar speciesConstructor = require('./_array-species-constructor');\n\nmodule.exports = function (original, length) {\n  return new (speciesConstructor(original))(length);\n};\n","var isObject = require('./_is-object');\nvar isArray = require('./_is-array');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (original) {\n  var C;\n  if (isArray(original)) {\n    C = original.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};\n","require('../../modules/es6.array.find-index');\nmodule.exports = require('../../modules/_core').Array.findIndex;\n","'use strict';\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(6);\nvar KEY = 'findIndex';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n","require('../../modules/es6.object.assign');\nmodule.exports = require('../../modules/_core').Object.assign;\n","// 19.1.3.1 Object.assign(target, source)\nvar $export = require('./_export');\n\n$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });\n","'use strict';\n// 19.1.2.1 Object.assign(target, source, ...)\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nvar toObject = require('./_to-object');\nvar IObject = require('./_iobject');\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || require('./_fails')(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = gOPS.f;\n  var isEnum = pIE.f;\n  while (aLen > index) {\n    var S = IObject(arguments[index++]);\n    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\n  } return T;\n} : $assign;\n","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n","var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n","require('../../modules/es6.string.starts-with');\nmodule.exports = require('../../modules/_core').String.startsWith;\n","// 21.1.3.18 String.prototype.startsWith(searchString [, position ])\n'use strict';\nvar $export = require('./_export');\nvar toLength = require('./_to-length');\nvar context = require('./_string-context');\nvar STARTS_WITH = 'startsWith';\nvar $startsWith = ''[STARTS_WITH];\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = context(this, searchString, STARTS_WITH);\n    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return $startsWith\n      ? $startsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n","// helper for String#{startsWith, endsWith, includes}\nvar isRegExp = require('./_is-regexp');\nvar defined = require('./_defined');\n\nmodule.exports = function (that, searchString, NAME) {\n  if (isRegExp(searchString)) throw TypeError('String#' + NAME + \" doesn't accept regex!\");\n  return String(defined(that));\n};\n","// 7.2.8 IsRegExp(argument)\nvar isObject = require('./_is-object');\nvar cof = require('./_cof');\nvar MATCH = require('./_wks')('match');\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');\n};\n","var MATCH = require('./_wks')('match');\nmodule.exports = function (KEY) {\n  var re = /./;\n  try {\n    '/./'[KEY](re);\n  } catch (e) {\n    try {\n      re[MATCH] = false;\n      return !'/./'[KEY](re);\n    } catch (f) { /* empty */ }\n  } return true;\n};\n","require('../../modules/es6.string.repeat');\nmodule.exports = require('../../modules/_core').String.repeat;\n","var $export = require('./_export');\n\n$export($export.P, 'String', {\n  // 21.1.3.13 String.prototype.repeat(count)\n  repeat: require('./_string-repeat')\n});\n","'use strict';\nvar toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n\nmodule.exports = function repeat(count) {\n  var str = String(defined(this));\n  var res = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError(\"Count can't be negative\");\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;\n  return res;\n};\n","require('../../modules/es6.symbol');\nrequire('../../modules/es6.object.to-string');\nrequire('../../modules/es7.symbol.async-iterator');\nrequire('../../modules/es7.symbol.observable');\nmodule.exports = require('../../modules/_core').Symbol;\n","'use strict';\n// ECMAScript 6 symbols shim\nvar global = require('./_global');\nvar has = require('./_has');\nvar DESCRIPTORS = require('./_descriptors');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar META = require('./_meta').KEY;\nvar $fails = require('./_fails');\nvar shared = require('./_shared');\nvar setToStringTag = require('./_set-to-string-tag');\nvar uid = require('./_uid');\nvar wks = require('./_wks');\nvar wksExt = require('./_wks-ext');\nvar wksDefine = require('./_wks-define');\nvar enumKeys = require('./_enum-keys');\nvar isArray = require('./_is-array');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar createDesc = require('./_property-desc');\nvar _create = require('./_object-create');\nvar gOPNExt = require('./_object-gopn-ext');\nvar $GOPD = require('./_object-gopd');\nvar $DP = require('./_object-dp');\nvar $keys = require('./_object-keys');\nvar gOPD = $GOPD.f;\nvar dP = $DP.f;\nvar gOPN = gOPNExt.f;\nvar $Symbol = global.Symbol;\nvar $JSON = global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE = 'prototype';\nvar HIDDEN = wks('_hidden');\nvar TO_PRIMITIVE = wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = shared('symbol-registry');\nvar AllSymbols = shared('symbols');\nvar OPSymbols = shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE];\nvar USE_NATIVE = typeof $Symbol == 'function';\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n  return _create(dP({}, 'a', {\n    get: function () { return dP(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if (has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _create(D, { enumerable: createDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = toIObject(it);\n  key = toPrimitive(key, true);\n  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\n  var D = gOPD(it, key);\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN(toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f = $defineProperty;\n  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;\n  require('./_object-pie').f = $propertyIsEnumerable;\n  require('./_object-gops').f = $getOwnPropertySymbols;\n\n  if (DESCRIPTORS && !require('./_library')) {\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function (name) {\n    return wrap(wks(name));\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    $replacer = replacer = args[1];\n    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    if (!isArray(replacer)) replacer = function (key, value) {\n      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n","var META = require('./_uid')('meta');\nvar isObject = require('./_is-object');\nvar has = require('./_has');\nvar setDesc = require('./_object-dp').f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !require('./_fails')(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n","// all enumerable object keys, includes symbols\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nmodule.exports = function (it) {\n  var result = getKeys(it);\n  var getSymbols = gOPS.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = pIE.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n","var dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n","var document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n","// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = require('./_to-iobject');\nvar gOPN = require('./_object-gopn').f;\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n","var pIE = require('./_object-pie');\nvar createDesc = require('./_property-desc');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar has = require('./_has');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n","'use strict';\n// 19.1.3.6 Object.prototype.toString()\nvar classof = require('./_classof');\nvar test = {};\ntest[require('./_wks')('toStringTag')] = 'z';\nif (test + '' != '[object z]') {\n  require('./_redefine')(Object.prototype, 'toString', function toString() {\n    return '[object ' + classof(this) + ']';\n  }, true);\n}\n","// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./_cof');\nvar TAG = require('./_wks')('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n","require('./_wks-define')('asyncIterator');\n","require('./_wks-define')('observable');\n","require('../../modules/es6.string.iterator');\nrequire('../../modules/web.dom.iterable');\nmodule.exports = require('../../modules/_wks-ext').f('iterator');\n","'use strict';\nvar $at = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n","var toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n","'use strict';\nvar create = require('./_object-create');\nvar descriptor = require('./_property-desc');\nvar setToStringTag = require('./_set-to-string-tag');\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = require('./_has');\nvar toObject = require('./_to-object');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n","var $iterators = require('./es6.array.iterator');\nvar getKeys = require('./_object-keys');\nvar redefine = require('./_redefine');\nvar global = require('./_global');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar wks = require('./_wks');\nvar ITERATOR = wks('iterator');\nvar TO_STRING_TAG = wks('toStringTag');\nvar ArrayValues = Iterators.Array;\n\nvar DOMIterables = {\n  CSSRuleList: true, // TODO: Not spec compliant, should be false.\n  CSSStyleDeclaration: false,\n  CSSValueList: false,\n  ClientRectList: false,\n  DOMRectList: false,\n  DOMStringList: false,\n  DOMTokenList: true,\n  DataTransferItemList: false,\n  FileList: false,\n  HTMLAllCollection: false,\n  HTMLCollection: false,\n  HTMLFormElement: false,\n  HTMLSelectElement: false,\n  MediaList: true, // TODO: Not spec compliant, should be false.\n  MimeTypeArray: false,\n  NamedNodeMap: false,\n  NodeList: true,\n  PaintRequestList: false,\n  Plugin: false,\n  PluginArray: false,\n  SVGLengthList: false,\n  SVGNumberList: false,\n  SVGPathSegList: false,\n  SVGPointList: false,\n  SVGStringList: false,\n  SVGTransformList: false,\n  SourceBufferList: false,\n  StyleSheetList: true, // TODO: Not spec compliant, should be false.\n  TextTrackCueList: false,\n  TextTrackList: false,\n  TouchList: false\n};\n\nfor (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {\n  var NAME = collections[i];\n  var explicit = DOMIterables[NAME];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  var key;\n  if (proto) {\n    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);\n    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n    Iterators[NAME] = ArrayValues;\n    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);\n  }\n}\n","'use strict';\nvar addToUnscopables = require('./_add-to-unscopables');\nvar step = require('./_iter-step');\nvar Iterators = require('./_iterators');\nvar toIObject = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n","module.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n","import '@firebase/database';\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar util = require('@firebase/util');\nvar logger = require('@firebase/logger');\nvar tslib_1 = require('tslib');\nvar firebase = _interopDefault(require('@firebase/app'));\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n * @constructor\r\n */\r\nvar DOMStorageWrapper = /** @class */ (function () {\r\n    /**\r\n     * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    function DOMStorageWrapper(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param {string} key The key to save the value under\r\n     * @param {?Object} value The value being stored, or null to remove the key.\r\n     */\r\n    DOMStorageWrapper.prototype.set = function (key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), util.stringify(value));\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} key\r\n     * @return {*} The value that was stored under this key, or null\r\n     */\r\n    DOMStorageWrapper.prototype.get = function (key) {\r\n        var storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return util.jsonEval(storedVal);\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} key\r\n     */\r\n    DOMStorageWrapper.prototype.remove = function (key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    };\r\n    /**\r\n     * @param {string} name\r\n     * @return {string}\r\n     */\r\n    DOMStorageWrapper.prototype.prefixedName_ = function (name) {\r\n        return this.prefix_ + name;\r\n    };\r\n    DOMStorageWrapper.prototype.toString = function () {\r\n        return this.domStorage_.toString();\r\n    };\r\n    return DOMStorageWrapper;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n *\r\n * @constructor\r\n */\r\nvar MemoryStorage = /** @class */ (function () {\r\n    function MemoryStorage() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    MemoryStorage.prototype.set = function (key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    };\r\n    MemoryStorage.prototype.get = function (key) {\r\n        if (util.contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    };\r\n    MemoryStorage.prototype.remove = function (key) {\r\n        delete this.cache_[key];\r\n    };\r\n    return MemoryStorage;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param {string} domStorageName Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @return {?} Turning off type information until a common interface is defined.\r\n */\r\nvar createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            var domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nvar PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nvar SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar logClient = new logger.Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n * @type {function(): number} Generated ID.\r\n */\r\nvar LUIDGenerator = (function () {\r\n    var id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param {!string} str The string to hash\r\n * @return {!string} The resulting hash\r\n */\r\nvar sha1 = function (str) {\r\n    var utf8Bytes = util.stringToByteArray(str);\r\n    var sha1 = new util.Sha1();\r\n    sha1.update(utf8Bytes);\r\n    var sha1Bytes = sha1.digest();\r\n    return util.base64.encodeByteArray(sha1Bytes);\r\n};\r\n/**\r\n * @param {...*} var_args\r\n * @return {string}\r\n * @private\r\n */\r\nvar buildLogMessage_ = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = '';\r\n    for (var i = 0; i < var_args.length; i++) {\r\n        if (Array.isArray(var_args[i]) ||\r\n            (var_args[i] &&\r\n                typeof var_args[i] === 'object' &&\r\n                typeof var_args[i].length === 'number')) {\r\n            message += buildLogMessage_.apply(null, var_args[i]);\r\n        }\r\n        else if (typeof var_args[i] === 'object') {\r\n            message += util.stringify(var_args[i]);\r\n        }\r\n        else {\r\n            message += var_args[i];\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n * @type {?function(string)}\r\n */\r\nvar logger$1 = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n * @type {boolean}\r\n * @private\r\n */\r\nvar firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\r\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\r\n */\r\nvar enableLogging = function (logger_, persistent) {\r\n    util.assert(!persistent || (logger_ === true || logger_ === false), \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = logger.LogLevel.VERBOSE;\r\n        logger$1 = logClient.log.bind(logClient);\r\n        if (persistent)\r\n            SessionStorage.set('logging_enabled', true);\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger$1 = logger_;\r\n    }\r\n    else {\r\n        logger$1 = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\n/**\r\n *\r\n * @param {...(string|Arguments)} var_args\r\n */\r\nvar log = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger$1 === null && SessionStorage.get('logging_enabled') === true)\r\n            enableLogging(true);\r\n    }\r\n    if (logger$1) {\r\n        var message = buildLogMessage_.apply(null, var_args);\r\n        logger$1(message);\r\n    }\r\n};\r\n/**\r\n * @param {!string} prefix\r\n * @return {function(...[*])}\r\n */\r\nvar logWrapper = function (prefix) {\r\n    return function () {\r\n        var var_args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            var_args[_i] = arguments[_i];\r\n        }\r\n        log.apply(void 0, [prefix].concat(var_args));\r\n    };\r\n};\r\n/**\r\n * @param {...string} var_args\r\n */\r\nvar error = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, var_args);\r\n    logClient.error(message);\r\n};\r\n/**\r\n * @param {...string} var_args\r\n */\r\nvar fatal = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = \"FIREBASE FATAL ERROR: \" + buildLogMessage_.apply(void 0, var_args);\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\n/**\r\n * @param {...*} var_args\r\n */\r\nvar warn = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, var_args);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nvar warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n * @param {*} data\r\n * @return {boolean}\r\n */\r\nvar isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data != data || // NaN\r\n            data == Number.POSITIVE_INFINITY ||\r\n            data == Number.NEGATIVE_INFINITY));\r\n};\r\n/**\r\n * @param {function()} fn\r\n */\r\nvar executeWhenDOMReady = function (fn) {\r\n    if (util.isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        var called_1 = false;\r\n        var wrappedFn_1 = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn_1, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called_1) {\r\n                called_1 = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn_1, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn_1, false);\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            document.attachEvent('onreadystatechange', function () {\r\n                if (document.readyState === 'complete')\r\n                    wrappedFn_1();\r\n            });\r\n            // fallback to onload.\r\n            window.attachEvent('onload', wrappedFn_1);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n * @type {!string}\r\n */\r\nvar MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n * @type {!string}\r\n */\r\nvar MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number}\r\n */\r\nvar nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        var aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt == 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number} comparison result.\r\n */\r\nvar stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\n/**\r\n * @param {string} key\r\n * @param {Object} obj\r\n * @return {*}\r\n */\r\nvar requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + util.stringify(obj));\r\n    }\r\n};\r\n/**\r\n * @param {*} obj\r\n * @return {string}\r\n */\r\nvar ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null)\r\n        return util.stringify(obj);\r\n    var keys = [];\r\n    for (var k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    var key = '{';\r\n    for (var i = 0; i < keys.length; i++) {\r\n        if (i !== 0)\r\n            key += ',';\r\n        key += util.stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param {!string} str The string\r\n * @param {!number} segsize The maximum number of chars in the string.\r\n * @return {Array.<string>} The string, split into appropriately-sized chunks\r\n */\r\nvar splitStringBySize = function (str, segsize) {\r\n    var len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    var dataSegs = [];\r\n    for (var c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param {!(Object|Array)} obj The object or array to iterate over\r\n * @param {function(?, ?)} fn The function to apply\r\n */\r\nvar each = function (obj, fn) {\r\n    if (Array.isArray(obj)) {\r\n        for (var i = 0; i < obj.length; ++i) {\r\n            fn(i, obj[i]);\r\n        }\r\n    }\r\n    else {\r\n        /**\r\n         * in the conversion of code we removed the goog.object.forEach\r\n         * function which did a value,key callback. We standardized on\r\n         * a single impl that does a key, value callback. So we invert\r\n         * to not have to touch the `each` code points\r\n         */\r\n        util.forEach(obj, function (key, val) { return fn(val, key); });\r\n    }\r\n};\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param {!number} v A double\r\n * @return {string}\r\n */\r\nvar doubleToIEEE754String = function (v) {\r\n    util.assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    var ebits = 11, fbits = 52;\r\n    var bias = (1 << (ebits - 1)) - 1, s, e, f, ln, i, bits, str;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    var hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        var hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1)\r\n            hexByte = '0' + hexByte;\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n * @return {boolean}\r\n */\r\nvar isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n * @return {boolean}\r\n */\r\nvar isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n * @param {!string} code\r\n * @param {!Query} query\r\n * @return {Error}\r\n */\r\nvar errorForServerCode = function (code, query) {\r\n    var reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code == 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code == 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    var error = new Error(code + ' at ' + query.path.toString() + ': ' + reason);\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n};\r\n/**\r\n * Used to test for integer-looking strings\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INTEGER_REGEXP_ = new RegExp('^-?\\\\d{1,10}$');\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n * @param {!string} str\r\n * @return {?number}\r\n */\r\nvar tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        var intVal = Number(str);\r\n        if (intVal >= -2147483648 && intVal <= 2147483647) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param {!function()} fn The code to guard.\r\n */\r\nvar exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(function () {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            var stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @return {boolean} true if we think we're currently being crawled.\r\n */\r\nvar beingCrawled = function () {\r\n    var userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param {Function} fn Function to run.\r\n * @param {number} time Milliseconds to wait before running.\r\n * @return {number|Object} The setTimeout() return value.\r\n */\r\nvar setTimeoutNonBlocking = function (fn, time) {\r\n    var timeout = setTimeout(fn, time);\r\n    if (typeof timeout === 'object' && timeout['unref']) {\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nvar Path = /** @class */ (function () {\r\n    /**\r\n     * @param {string|Array.<string>} pathOrString Path string to parse,\r\n     *      or another path, or the raw tokens array\r\n     * @param {number=} pieceNum\r\n     */\r\n    function Path(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            var copyTo = 0;\r\n            for (var i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    Object.defineProperty(Path, \"Empty\", {\r\n        /**\r\n         * Singleton to represent an empty path\r\n         *\r\n         * @const\r\n         */\r\n        get: function () {\r\n            return new Path('');\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Path.prototype.getFront = function () {\r\n        if (this.pieceNum_ >= this.pieces_.length)\r\n            return null;\r\n        return this.pieces_[this.pieceNum_];\r\n    };\r\n    /**\r\n     * @return {number} The number of segments in this path\r\n     */\r\n    Path.prototype.getLength = function () {\r\n        return this.pieces_.length - this.pieceNum_;\r\n    };\r\n    /**\r\n     * @return {!Path}\r\n     */\r\n    Path.prototype.popFront = function () {\r\n        var pieceNum = this.pieceNum_;\r\n        if (pieceNum < this.pieces_.length) {\r\n            pieceNum++;\r\n        }\r\n        return new Path(this.pieces_, pieceNum);\r\n    };\r\n    /**\r\n     * @return {?string}\r\n     */\r\n    Path.prototype.getBack = function () {\r\n        if (this.pieceNum_ < this.pieces_.length)\r\n            return this.pieces_[this.pieces_.length - 1];\r\n        return null;\r\n    };\r\n    Path.prototype.toString = function () {\r\n        var pathString = '';\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '')\r\n                pathString += '/' + this.pieces_[i];\r\n        }\r\n        return pathString || '/';\r\n    };\r\n    Path.prototype.toUrlEncodedString = function () {\r\n        var pathString = '';\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '')\r\n                pathString += '/' + encodeURIComponent(String(this.pieces_[i]));\r\n        }\r\n        return pathString || '/';\r\n    };\r\n    /**\r\n     * Shallow copy of the parts of the path.\r\n     *\r\n     * @param {number=} begin\r\n     * @return {!Array<string>}\r\n     */\r\n    Path.prototype.slice = function (begin) {\r\n        if (begin === void 0) { begin = 0; }\r\n        return this.pieces_.slice(this.pieceNum_ + begin);\r\n    };\r\n    /**\r\n     * @return {?Path}\r\n     */\r\n    Path.prototype.parent = function () {\r\n        if (this.pieceNum_ >= this.pieces_.length)\r\n            return null;\r\n        var pieces = [];\r\n        for (var i = this.pieceNum_; i < this.pieces_.length - 1; i++)\r\n            pieces.push(this.pieces_[i]);\r\n        return new Path(pieces, 0);\r\n    };\r\n    /**\r\n     * @param {string|!Path} childPathObj\r\n     * @return {!Path}\r\n     */\r\n    Path.prototype.child = function (childPathObj) {\r\n        var pieces = [];\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++)\r\n            pieces.push(this.pieces_[i]);\r\n        if (childPathObj instanceof Path) {\r\n            for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n                pieces.push(childPathObj.pieces_[i]);\r\n            }\r\n        }\r\n        else {\r\n            var childPieces = childPathObj.split('/');\r\n            for (var i = 0; i < childPieces.length; i++) {\r\n                if (childPieces[i].length > 0)\r\n                    pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n        return new Path(pieces, 0);\r\n    };\r\n    /**\r\n     * @return {boolean} True if there are no segments in this path\r\n     */\r\n    Path.prototype.isEmpty = function () {\r\n        return this.pieceNum_ >= this.pieces_.length;\r\n    };\r\n    /**\r\n     * @param {!Path} outerPath\r\n     * @param {!Path} innerPath\r\n     * @return {!Path} The path from outerPath to innerPath\r\n     */\r\n    Path.relativePath = function (outerPath, innerPath) {\r\n        var outer = outerPath.getFront(), inner = innerPath.getFront();\r\n        if (outer === null) {\r\n            return innerPath;\r\n        }\r\n        else if (outer === inner) {\r\n            return Path.relativePath(outerPath.popFront(), innerPath.popFront());\r\n        }\r\n        else {\r\n            throw new Error('INTERNAL ERROR: innerPath (' +\r\n                innerPath +\r\n                ') is not within ' +\r\n                'outerPath (' +\r\n                outerPath +\r\n                ')');\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Path} left\r\n     * @param {!Path} right\r\n     * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.\r\n     */\r\n    Path.comparePaths = function (left, right) {\r\n        var leftKeys = left.slice();\r\n        var rightKeys = right.slice();\r\n        for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n            var cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n            if (cmp !== 0)\r\n                return cmp;\r\n        }\r\n        if (leftKeys.length === rightKeys.length)\r\n            return 0;\r\n        return leftKeys.length < rightKeys.length ? -1 : 1;\r\n    };\r\n    /**\r\n     *\r\n     * @param {Path} other\r\n     * @return {boolean} true if paths are the same.\r\n     */\r\n    Path.prototype.equals = function (other) {\r\n        if (this.getLength() !== other.getLength()) {\r\n            return false;\r\n        }\r\n        for (var i = this.pieceNum_, j = other.pieceNum_; i <= this.pieces_.length; i++, j++) {\r\n            if (this.pieces_[i] !== other.pieces_[j]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Path} other\r\n     * @return {boolean} True if this path is a parent (or the same as) other\r\n     */\r\n    Path.prototype.contains = function (other) {\r\n        var i = this.pieceNum_;\r\n        var j = other.pieceNum_;\r\n        if (this.getLength() > other.getLength()) {\r\n            return false;\r\n        }\r\n        while (i < this.pieces_.length) {\r\n            if (this.pieces_[i] !== other.pieces_[j]) {\r\n                return false;\r\n            }\r\n            ++i;\r\n            ++j;\r\n        }\r\n        return true;\r\n    };\r\n    return Path;\r\n}()); // end Path\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nvar ValidationPath = /** @class */ (function () {\r\n    /**\r\n     * @param {!Path} path Initial Path.\r\n     * @param {string} errorPrefix_ Prefix for any error messages.\r\n     */\r\n    function ValidationPath(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        /** @type {!Array<string>} */\r\n        this.parts_ = path.slice();\r\n        /** @type {number} Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (var i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += util.stringLength(this.parts_[i]);\r\n        }\r\n        this.checkValid_();\r\n    }\r\n    Object.defineProperty(ValidationPath, \"MAX_PATH_DEPTH\", {\r\n        /** @const {number} Maximum key depth. */\r\n        get: function () {\r\n            return 32;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValidationPath, \"MAX_PATH_LENGTH_BYTES\", {\r\n        /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */\r\n        get: function () {\r\n            return 768;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @param {string} child */\r\n    ValidationPath.prototype.push = function (child) {\r\n        // Count the needed '/'\r\n        if (this.parts_.length > 0) {\r\n            this.byteLength_ += 1;\r\n        }\r\n        this.parts_.push(child);\r\n        this.byteLength_ += util.stringLength(child);\r\n        this.checkValid_();\r\n    };\r\n    ValidationPath.prototype.pop = function () {\r\n        var last = this.parts_.pop();\r\n        this.byteLength_ -= util.stringLength(last);\r\n        // Un-count the previous '/'\r\n        if (this.parts_.length > 0) {\r\n            this.byteLength_ -= 1;\r\n        }\r\n    };\r\n    ValidationPath.prototype.checkValid_ = function () {\r\n        if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {\r\n            throw new Error(this.errorPrefix_ +\r\n                'has a key path longer than ' +\r\n                ValidationPath.MAX_PATH_LENGTH_BYTES +\r\n                ' bytes (' +\r\n                this.byteLength_ +\r\n                ').');\r\n        }\r\n        if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {\r\n            throw new Error(this.errorPrefix_ +\r\n                'path specified exceeds the maximum depth that can be written (' +\r\n                ValidationPath.MAX_PATH_DEPTH +\r\n                ') or object contains a cycle ' +\r\n                this.toErrorString());\r\n        }\r\n    };\r\n    /**\r\n     * String for use in error messages - uses '.' notation for path.\r\n     *\r\n     * @return {string}\r\n     */\r\n    ValidationPath.prototype.toErrorString = function () {\r\n        if (this.parts_.length == 0) {\r\n            return '';\r\n        }\r\n        return \"in property '\" + this.parts_.join('.') + \"'\";\r\n    };\r\n    return ValidationPath;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar PROTOCOL_VERSION = '5';\r\nvar VERSION_PARAM = 'v';\r\nvar TRANSPORT_SESSION_PARAM = 's';\r\nvar REFERER_PARAM = 'r';\r\nvar FORGE_REF = 'f';\r\nvar FORGE_DOMAIN = 'firebaseio.com';\r\nvar LAST_SESSION_PARAM = 'ls';\r\nvar WEBSOCKET = 'websocket';\r\nvar LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n *\r\n * @constructor\r\n */\r\nvar RepoInfo = /** @class */ (function () {\r\n    /**\r\n     * @param {string} host Hostname portion of the url for the repo\r\n     * @param {boolean} secure Whether or not this repo is accessed over ssl\r\n     * @param {string} namespace The namespace represented by the repo\r\n     * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param {string=} persistenceKey Override the default session persistence storage key\r\n     */\r\n    function RepoInfo(host, secure, namespace, webSocketOnly, persistenceKey) {\r\n        if (persistenceKey === void 0) { persistenceKey = ''; }\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.persistenceKey = persistenceKey;\r\n        this.host = host.toLowerCase();\r\n        this.domain = this.host.substr(this.host.indexOf('.') + 1);\r\n        this.internalHost = PersistentStorage.get('host:' + host) || this.host;\r\n    }\r\n    RepoInfo.prototype.needsQueryParam = function () {\r\n        return this.host !== this.internalHost || this.isCustomHost();\r\n    };\r\n    RepoInfo.prototype.isCacheableHost = function () {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    };\r\n    RepoInfo.prototype.isDemoHost = function () {\r\n        return this.domain === 'firebaseio-demo.com';\r\n    };\r\n    RepoInfo.prototype.isCustomHost = function () {\r\n        return (this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com');\r\n    };\r\n    RepoInfo.prototype.updateHost = function (newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this.host, this.internalHost);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns the websocket URL for this repo\r\n     * @param {string} type of connection\r\n     * @param {Object} params list\r\n     * @return {string} The URL for this repo\r\n     */\r\n    RepoInfo.prototype.connectionURL = function (type, params) {\r\n        util.assert(typeof type === 'string', 'typeof type must == string');\r\n        util.assert(typeof params === 'object', 'typeof params must == object');\r\n        var connURL;\r\n        if (type === WEBSOCKET) {\r\n            connURL =\r\n                (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\r\n        }\r\n        else if (type === LONG_POLLING) {\r\n            connURL =\r\n                (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\r\n        }\r\n        else {\r\n            throw new Error('Unknown connection type: ' + type);\r\n        }\r\n        if (this.needsQueryParam()) {\r\n            params['ns'] = this.namespace;\r\n        }\r\n        var pairs = [];\r\n        util.forEach(params, function (key, value) {\r\n            pairs.push(key + '=' + value);\r\n        });\r\n        return connURL + pairs.join('&');\r\n    };\r\n    /** @return {string} */\r\n    RepoInfo.prototype.toString = function () {\r\n        var str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    };\r\n    /** @return {string} */\r\n    RepoInfo.prototype.toURLString = function () {\r\n        return (this.secure ? 'https://' : 'http://') + this.host;\r\n    };\r\n    return RepoInfo;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!string} pathString\r\n * @return {string}\r\n */\r\nfunction decodePath(pathString) {\r\n    var pathStringDecoded = '';\r\n    var pieces = pathString.split('/');\r\n    for (var i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            var piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @param {!string} queryString\r\n * @return {!{[key:string]:string}} key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    var results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (var _i = 0, _a = queryString.split('&'); _i < _a.length; _i++) {\r\n        var segment = _a[_i];\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        var kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(\"Invalid query segment '\" + segment + \"' in query '\" + queryString + \"'\");\r\n        }\r\n    }\r\n    return results;\r\n}\r\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{repoInfo: !RepoInfo, path: !Path}}\r\n */\r\nvar parseRepoInfo = function (dataURL) {\r\n    var parsedUrl = parseURL(dataURL), namespace = parsedUrl.subdomain;\r\n    if (parsedUrl.domain === 'firebase') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace == 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string}}\r\n */\r\nvar parseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    var host = '', domain = '', subdomain = '', pathString = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    var secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        var colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        var slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        var questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = dataURL.length;\r\n        }\r\n        var parts = host.split('.');\r\n        if (parts.length === 3) {\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            domain = parts[1];\r\n            subdomain = parts[0].toLowerCase();\r\n        }\r\n        else if (parts.length === 2) {\r\n            domain = parts[0];\r\n        }\r\n        else if (parts[0].slice(0, colonInd).toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        // Support `ns` query param if subdomain not already set\r\n        if (subdomain === '' && 'ns' in queryParams) {\r\n            subdomain = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host: host,\r\n        port: port,\r\n        domain: domain,\r\n        subdomain: subdomain,\r\n        secure: secure,\r\n        scheme: scheme,\r\n        pathString: pathString\r\n    };\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n * @type {number}\r\n * @private\r\n */\r\nvar MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\n/**\r\n * @param {*} key\r\n * @return {boolean}\r\n */\r\nvar isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\r\nvar isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\r\nvar isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\n/**\r\n * @param {*} priority\r\n * @return {boolean}\r\n */\r\nvar isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority && typeof priority === 'object' && util.contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\r\nvar validateFirebaseDataArg = function (fnName, argumentNumber, data, path, optional) {\r\n    if (optional && data === undefined)\r\n        return;\r\n    validateFirebaseData(util.errorPrefix(fnName, argumentNumber, optional), data, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {*} data\r\n * @param {!Path|!ValidationPath} path_\r\n */\r\nvar validateFirebaseData = function (errorPrefix, data, path_) {\r\n    var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            path.toErrorString() +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString());\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        util.stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            path.toErrorString() +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        var hasDotValue_1 = false, hasActualChild_1 = false;\r\n        util.forEach(data, function (key, value) {\r\n            if (key === '.value') {\r\n                hasDotValue_1 = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild_1 = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        path.toErrorString() +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            path.push(key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            path.pop();\r\n        });\r\n        if (hasDotValue_1 && hasActualChild_1) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                path.toErrorString() +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {Array<!Path>} mergePaths\r\n */\r\nvar validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    var i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        var keys = curPath.slice();\r\n        for (var j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) {\r\n                // .priority is OK\r\n            }\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(Path.comparePaths);\r\n    var prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && prevPath.contains(curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\r\nvar validateFirebaseMergeDataArg = function (fnName, argumentNumber, data, path, optional) {\r\n    if (optional && data === undefined)\r\n        return;\r\n    var errorPrefix = util.errorPrefix(fnName, argumentNumber, optional);\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix + ' must be an object containing the children to replace.');\r\n    }\r\n    var mergePaths = [];\r\n    util.forEach(data, function (key, value) {\r\n        var curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix, value, path.child(curPath));\r\n        if (curPath.getBack() === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix, mergePaths);\r\n};\r\nvar validatePriority = function (fnName, argumentNumber, priority, optional) {\r\n    if (optional && priority === undefined)\r\n        return;\r\n    if (isInvalidJSONNumber(priority))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n};\r\nvar validateEventType = function (fnName, argumentNumber, eventType, optional) {\r\n    if (optional && eventType === undefined)\r\n        return;\r\n    switch (eventType) {\r\n        case 'value':\r\n        case 'child_added':\r\n        case 'child_removed':\r\n        case 'child_changed':\r\n        case 'child_moved':\r\n            break;\r\n        default:\r\n            throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n                'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\r\n                '\"child_changed\", or \"child_moved\".');\r\n    }\r\n};\r\nvar validateKey = function (fnName, argumentNumber, key, optional) {\r\n    if (optional && key === undefined)\r\n        return;\r\n    if (!isValidKey(key))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n};\r\nvar validatePathString = function (fnName, argumentNumber, pathString, optional) {\r\n    if (optional && pathString === undefined)\r\n        return;\r\n    if (!isValidPathString(pathString))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n};\r\nvar validateRootPathString = function (fnName, argumentNumber, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentNumber, pathString, optional);\r\n};\r\nvar validateWritablePath = function (fnName, path) {\r\n    if (path.getFront() === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nvar validateUrl = function (fnName, argumentNumber, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    var pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, false) +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\r\nvar validateBoolean = function (fnName, argumentNumber, bool, optional) {\r\n    if (optional && bool === undefined)\r\n        return;\r\n    if (typeof bool !== 'boolean')\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'must be a boolean.');\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n */\r\nvar OnDisconnect = /** @class */ (function () {\r\n    /**\r\n     * @param {!Repo} repo_\r\n     * @param {!Path} path_\r\n     */\r\n    function OnDisconnect(repo_, path_) {\r\n        this.repo_ = repo_;\r\n        this.path_ = path_;\r\n    }\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.cancel = function (onComplete) {\r\n        util.validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\r\n        util.validateCallback('OnDisconnect.cancel', 1, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.remove = function (onComplete) {\r\n        util.validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\r\n        validateWritablePath('OnDisconnect.remove', this.path_);\r\n        util.validateCallback('OnDisconnect.remove', 1, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} value\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.set = function (value, onComplete) {\r\n        util.validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\r\n        validateWritablePath('OnDisconnect.set', this.path_);\r\n        validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\r\n        util.validateCallback('OnDisconnect.set', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} value\r\n     * @param {number|string|null} priority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {\r\n        util.validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\r\n        validateWritablePath('OnDisconnect.setWithPriority', this.path_);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);\r\n        validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\r\n        util.validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {!Object} objectToMerge\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.update = function (objectToMerge, onComplete) {\r\n        util.validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\r\n        validateWritablePath('OnDisconnect.update', this.path_);\r\n        if (Array.isArray(objectToMerge)) {\r\n            var newObjectToMerge = {};\r\n            for (var i = 0; i < objectToMerge.length; ++i) {\r\n                newObjectToMerge['' + i] = objectToMerge[i];\r\n            }\r\n            objectToMerge = newObjectToMerge;\r\n            warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\r\n                'existing data, or an Object with integer keys if you really do want to only update some of the children.');\r\n        }\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);\r\n        util.validateCallback('OnDisconnect.update', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    return OnDisconnect;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar TransactionResult = /** @class */ (function () {\r\n    /**\r\n     * A type for the resolve value of Firebase.transaction.\r\n     * @constructor\r\n     * @dict\r\n     * @param {boolean} committed\r\n     * @param {DataSnapshot} snapshot\r\n     */\r\n    function TransactionResult(committed, snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    TransactionResult.prototype.toJSON = function () {\r\n        util.validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    };\r\n    return TransactionResult;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nvar nextPushId = (function () {\r\n    // Modeled after base64 web-safe chars, but ordered by ASCII.\r\n    var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    var lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    var lastRandChars = [];\r\n    return function (now) {\r\n        var duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        var i;\r\n        var timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        util.assert(now === 0, 'Cannot push at time == 0');\r\n        var id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        util.assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @param {!string} name\r\n * @param {!Node} node\r\n * @constructor\r\n * @struct\r\n */\r\nvar NamedNode = /** @class */ (function () {\r\n    function NamedNode(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    /**\r\n     *\r\n     * @param {!string} name\r\n     * @param {!Node} node\r\n     * @return {NamedNode}\r\n     */\r\n    NamedNode.Wrap = function (name, node) {\r\n        return new NamedNode(name, node);\r\n    };\r\n    return NamedNode;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @constructor\r\n */\r\nvar Index = /** @class */ (function () {\r\n    function Index() {\r\n    }\r\n    /**\r\n     * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\r\n     * this index\r\n     */\r\n    Index.prototype.getCompare = function () {\r\n        return this.compare.bind(this);\r\n    };\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     * @param {!Node} oldNode\r\n     * @param {!Node} newNode\r\n     * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    Index.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        var oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        var newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    };\r\n    /**\r\n     * @return {!NamedNode} a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    Index.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    return Index;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __EMPTY_NODE;\r\nvar KeyIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(KeyIndex, _super);\r\n    function KeyIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Object.defineProperty(KeyIndex, \"__EMPTY_NODE\", {\r\n        get: function () {\r\n            return __EMPTY_NODE;\r\n        },\r\n        set: function (val) {\r\n            __EMPTY_NODE = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.compare = function (a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.isDefinedOn = function (node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw util.assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.maxPost = function () {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    KeyIndex.prototype.makePost = function (indexValue, name) {\r\n        util.assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    KeyIndex.prototype.toString = function () {\r\n        return '.key';\r\n    };\r\n    return KeyIndex;\r\n}(Index));\r\nvar KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar MAX_NODE;\r\nfunction setMaxNode(val) {\r\n    MAX_NODE = val;\r\n}\r\n/**\r\n * @param {(!string|!number)} priority\r\n * @return {!string}\r\n */\r\nvar priorityHashText = function (priority) {\r\n    if (typeof priority === 'number')\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    else\r\n        return 'string:' + priority;\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n *\r\n * @param {!Node} priorityNode\r\n */\r\nvar validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        var val = priorityNode.val();\r\n        util.assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && util.contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        util.assert(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    util.assert(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nvar LeafNode = /** @class */ (function () {\r\n    /**\r\n     * @implements {Node}\r\n     * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.\r\n     *                                         The object type is possible in the event of a deferred value\r\n     * @param {!Node=} priorityNode_ The priority of this node.\r\n     */\r\n    function LeafNode(value_, priorityNode_) {\r\n        if (priorityNode_ === void 0) { priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE; }\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        util.assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    Object.defineProperty(LeafNode, \"__childrenNodeConstructor\", {\r\n        get: function () {\r\n            return __childrenNodeConstructor;\r\n        },\r\n        set: function (val) {\r\n            __childrenNodeConstructor = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.isLeafNode = function () {\r\n        return true;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getPriority = function () {\r\n        return this.priorityNode_;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updatePriority = function (newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getImmediateChild = function (childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getChild = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this;\r\n        }\r\n        else if (path.getFront() === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.hasChild = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {\r\n        return null;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updateChild = function (path, newChildNode) {\r\n        var front = path.getFront();\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            util.assert(front !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(), newChildNode));\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.numChildren = function () {\r\n        return 0;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.forEachChild = function (index, action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.val = function (exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty())\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        else\r\n            return this.getValue();\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.hash = function () {\r\n        if (this.lazyHash_ === null) {\r\n            var toHash = '';\r\n            if (!this.priorityNode_.isEmpty())\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            var type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    };\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @return {Object|string|number|boolean} The value of the node.\r\n     */\r\n    LeafNode.prototype.getValue = function () {\r\n        return this.value_;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.compareTo = function (other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            util.assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    };\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     * @param {!LeafNode} otherLeaf\r\n     * @return {!number}\r\n     * @private\r\n     */\r\n    LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {\r\n        var otherLeafType = typeof otherLeaf.value_;\r\n        var thisLeafType = typeof this.value_;\r\n        var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        util.assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        util.assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.withIndex = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.isIndexed = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.equals = function (other) {\r\n        /**\r\n         * @inheritDoc\r\n         */\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            var otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n     * the same type, the comparison falls back to their value\r\n     * @type {Array.<!string>}\r\n     * @const\r\n     */\r\n    LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\r\n    return LeafNode;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar nodeFromJSON;\r\nvar MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON = val;\r\n}\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\r\nvar PriorityIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PriorityIndex, _super);\r\n    function PriorityIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.compare = function (a, b) {\r\n        var aPriority = a.node.getPriority();\r\n        var bPriority = b.node.getPriority();\r\n        var indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.isDefinedOn = function (node) {\r\n        return !node.getPriority().isEmpty();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.maxPost = function () {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    PriorityIndex.prototype.makePost = function (indexValue, name) {\r\n        var priorityNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    PriorityIndex.prototype.toString = function () {\r\n        return '.priority';\r\n    };\r\n    return PriorityIndex;\r\n}(Index));\r\nvar PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nvar SortedMapIterator = /** @class */ (function () {\r\n    /**\r\n     * @template K, V, T\r\n     * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\r\n     * @param {?K} startKey\r\n     * @param {function(K, K): number} comparator\r\n     * @param {boolean} isReverse_ Whether or not to iterate in reverse\r\n     * @param {(function(K, V):T)=} resultGenerator_\r\n     */\r\n    function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {\r\n        if (resultGenerator_ === void 0) { resultGenerator_ = null; }\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        /** @private\r\n         * @type {Array.<!LLRBNode>}\r\n         */\r\n        this.nodeStack_ = [];\r\n        var cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_)\r\n                cmp *= -1;\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    SortedMapIterator.prototype.getNext = function () {\r\n        if (this.nodeStack_.length === 0)\r\n            return null;\r\n        var node = this.nodeStack_.pop();\r\n        var result;\r\n        if (this.resultGenerator_)\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        else\r\n            result = { key: node.key, value: node.value };\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    SortedMapIterator.prototype.hasNext = function () {\r\n        return this.nodeStack_.length > 0;\r\n    };\r\n    SortedMapIterator.prototype.peek = function () {\r\n        if (this.nodeStack_.length === 0)\r\n            return null;\r\n        var node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    };\r\n    return SortedMapIterator;\r\n}());\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nvar LLRBNode = /** @class */ (function () {\r\n    /**\r\n     * @template K, V\r\n     * @param {!K} key Key associated with this node.\r\n     * @param {!V} value Value associated with this node.\r\n     * @param {?boolean} color Whether this node is red.\r\n     * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\r\n     * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\r\n     */\r\n    function LLRBNode(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param {?K} key New key for the node, or null.\r\n     * @param {?V} value New value for the node, or null.\r\n     * @param {?boolean} color New color for the node, or null.\r\n     * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\r\n     * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\r\n     * @return {!LLRBNode} The node copy.\r\n     */\r\n    LLRBNode.prototype.copy = function (key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the tree.\r\n     */\r\n    LLRBNode.prototype.count = function () {\r\n        return this.left.count() + 1 + this.right.count();\r\n    };\r\n    /**\r\n     * @return {boolean} True if the tree is empty.\r\n     */\r\n    LLRBNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @return {*} The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    LLRBNode.prototype.inorderTraversal = function (action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    };\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!Object, !Object)} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {*} True if traversal was aborted.\r\n     */\r\n    LLRBNode.prototype.reverseTraversal = function (action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    };\r\n    /**\r\n     * @return {!Object} The minimum node in the tree.\r\n     * @private\r\n     */\r\n    LLRBNode.prototype.min_ = function () {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    };\r\n    /**\r\n     * @return {!K} The maximum key in the tree.\r\n     */\r\n    LLRBNode.prototype.minKey = function () {\r\n        return this.min_().key;\r\n    };\r\n    /**\r\n     * @return {!K} The maximum key in the tree.\r\n     */\r\n    LLRBNode.prototype.maxKey = function () {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Object} key Key to insert.\r\n     * @param {!Object} value Value to insert.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode} New tree, with the key/value added.\r\n     */\r\n    LLRBNode.prototype.insert = function (key, value, comparator) {\r\n        var cmp, n;\r\n        n = this;\r\n        cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\r\n     */\r\n    LLRBNode.prototype.removeMin_ = function () {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        var n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_())\r\n            n = n.moveRedLeft_();\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @param {!Object} key The key of the item to remove.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\r\n     */\r\n    LLRBNode.prototype.remove = function (key, comparator) {\r\n        var n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_())\r\n                n = n.rotateRight_();\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {boolean} Whether this is a RED node.\r\n     */\r\n    LLRBNode.prototype.isRed_ = function () {\r\n        return this.color;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree after performing any needed rotations.\r\n     */\r\n    LLRBNode.prototype.fixUp_ = function () {\r\n        var n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_())\r\n            n = n.rotateLeft_();\r\n        if (n.left.isRed_() && n.left.left.isRed_())\r\n            n = n.rotateRight_();\r\n        if (n.left.isRed_() && n.right.isRed_())\r\n            n = n.colorFlip_();\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after moveRedLeft.\r\n     */\r\n    LLRBNode.prototype.moveRedLeft_ = function () {\r\n        var n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after moveRedRight.\r\n     */\r\n    LLRBNode.prototype.moveRedRight_ = function () {\r\n        var n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after rotateLeft.\r\n     */\r\n    LLRBNode.prototype.rotateLeft_ = function () {\r\n        var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after rotateRight.\r\n     */\r\n    LLRBNode.prototype.rotateRight_ = function () {\r\n        var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after colorFlip.\r\n     */\r\n    LLRBNode.prototype.colorFlip_ = function () {\r\n        var left = this.left.copy(null, null, !this.left.color, null, null);\r\n        var right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    };\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @private\r\n     * @return {boolean} True if all is well.\r\n     */\r\n    LLRBNode.prototype.checkMaxDepth_ = function () {\r\n        var blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {number} Not sure what this returns exactly. :-).\r\n     */\r\n    LLRBNode.prototype.check_ = function () {\r\n        var blackDepth;\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    };\r\n    LLRBNode.RED = true;\r\n    LLRBNode.BLACK = false;\r\n    return LLRBNode;\r\n}());\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nvar LLRBEmptyNode = /** @class */ (function () {\r\n    function LLRBEmptyNode() {\r\n    }\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @return {!LLRBEmptyNode} The node copy.\r\n     */\r\n    LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\r\n        return this;\r\n    };\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param {!K} key Key to be added.\r\n     * @param {!V} value Value to be added.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode} New tree, with item added.\r\n     */\r\n    LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    };\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param {!K} key The key to remove.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBEmptyNode} New tree, with item removed.\r\n     */\r\n    LLRBEmptyNode.prototype.remove = function (key, comparator) {\r\n        return this;\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the tree.\r\n     */\r\n    LLRBEmptyNode.prototype.count = function () {\r\n        return 0;\r\n    };\r\n    /**\r\n     * @return {boolean} True if the tree is empty.\r\n     */\r\n    LLRBEmptyNode.prototype.isEmpty = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {boolean} True if traversal was aborted.\r\n     */\r\n    LLRBEmptyNode.prototype.inorderTraversal = function (action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V)} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {boolean} True if traversal was aborted.\r\n     */\r\n    LLRBEmptyNode.prototype.reverseTraversal = function (action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * @return {null}\r\n     */\r\n    LLRBEmptyNode.prototype.minKey = function () {\r\n        return null;\r\n    };\r\n    /**\r\n     * @return {null}\r\n     */\r\n    LLRBEmptyNode.prototype.maxKey = function () {\r\n        return null;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {number} Not sure what this returns exactly. :-).\r\n     */\r\n    LLRBEmptyNode.prototype.check_ = function () {\r\n        return 0;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {boolean} Whether this node is red.\r\n     */\r\n    LLRBEmptyNode.prototype.isRed_ = function () {\r\n        return false;\r\n    };\r\n    return LLRBEmptyNode;\r\n}());\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nvar SortedMap = /** @class */ (function () {\r\n    /**\r\n     * @template K, V\r\n     * @param {function(K, K):number} comparator_ Key comparator.\r\n     * @param {LLRBNode=} root_ (Optional) Root node for the map.\r\n     */\r\n    function SortedMap(comparator_, root_) {\r\n        if (root_ === void 0) { root_ = SortedMap.EMPTY_NODE; }\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param {!K} key Key to be added.\r\n     * @param {!V} value Value to be added.\r\n     * @return {!SortedMap.<K, V>} New map, with item added.\r\n     */\r\n    SortedMap.prototype.insert = function (key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    };\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param {!K} key The key to remove.\r\n     * @return {!SortedMap.<K, V>} New map, with item removed.\r\n     */\r\n    SortedMap.prototype.remove = function (key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    };\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param {!K} key The key to look up.\r\n     * @return {?V} The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    SortedMap.prototype.get = function (key) {\r\n        var cmp;\r\n        var node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param {K} key The key to find the predecessor of\r\n     * @return {?K} The predecessor key.\r\n     */\r\n    SortedMap.prototype.getPredecessorKey = function (key) {\r\n        var cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty())\r\n                        node = node.right;\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    };\r\n    /**\r\n     * @return {boolean} True if the map is empty.\r\n     */\r\n    SortedMap.prototype.isEmpty = function () {\r\n        return this.root_.isEmpty();\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the map.\r\n     */\r\n    SortedMap.prototype.count = function () {\r\n        return this.root_.count();\r\n    };\r\n    /**\r\n     * @return {?K} The minimum key in the map.\r\n     */\r\n    SortedMap.prototype.minKey = function () {\r\n        return this.root_.minKey();\r\n    };\r\n    /**\r\n     * @return {?K} The maximum key in the map.\r\n     */\r\n    SortedMap.prototype.maxKey = function () {\r\n        return this.root_.maxKey();\r\n    };\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @return {*} The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    SortedMap.prototype.inorderTraversal = function (action) {\r\n        return this.root_.inorderTraversal(action);\r\n    };\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param {function(!Object, !Object)} action Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @return {*} True if the traversal was aborted.\r\n     */\r\n    SortedMap.prototype.reverseTraversal = function (action) {\r\n        return this.root_.reverseTraversal(action);\r\n    };\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @template T\r\n     * @param {(function(K, V):T)=} resultGenerator\r\n     * @return {SortedMapIterator.<K, V, T>} The iterator.\r\n     */\r\n    SortedMap.prototype.getIterator = function (resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getReverseIterator = function (resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    };\r\n    /**\r\n     * Always use the same empty node, to reduce memory.\r\n     * @const\r\n     */\r\n    SortedMap.EMPTY_NODE = new LLRBEmptyNode();\r\n    return SortedMap;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar LOG_2 = Math.log(2);\r\n/**\r\n * @constructor\r\n */\r\nvar Base12Num = /** @class */ (function () {\r\n    /**\r\n     * @param {number} length\r\n     */\r\n    function Base12Num(length) {\r\n        var logBase2 = function (num) {\r\n            return parseInt((Math.log(num) / LOG_2), 10);\r\n        };\r\n        var bitMask = function (bits) { return parseInt(Array(bits + 1).join('1'), 2); };\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        var mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    Base12Num.prototype.nextBitIsOne = function () {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        var result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    };\r\n    return Base12Num;\r\n}());\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @template K, V\r\n * @param {Array.<!NamedNode>} childList Unsorted list of children\r\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\r\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\r\n *                                                        type is not NamedNode\r\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\r\n * @return {SortedMap.<K, V>}\r\n */\r\nvar buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    var buildBalancedTree = function (low, high) {\r\n        var length = high - low;\r\n        var namedNode;\r\n        var key;\r\n        if (length == 0) {\r\n            return null;\r\n        }\r\n        else if (length == 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            var middle = parseInt((length / 2), 10) + low;\r\n            var left = buildBalancedTree(low, middle);\r\n            var right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    var buildFrom12Array = function (base12) {\r\n        var node = null;\r\n        var root = null;\r\n        var index = childList.length;\r\n        var buildPennant = function (chunkSize, color) {\r\n            var low = index - chunkSize;\r\n            var high = index;\r\n            index -= chunkSize;\r\n            var childTree = buildBalancedTree(low + 1, high);\r\n            var namedNode = childList[low];\r\n            var key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        var attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (var i = 0; i < base12.count; ++i) {\r\n            var isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            var chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    var base12 = new Base12Num(childList.length);\r\n    var root = buildFrom12Array(base12);\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar _defaultIndexMap;\r\nvar fallbackObject = {};\r\n/**\r\n *\r\n * @param {Object.<string, FallbackType|SortedMap.<NamedNode, Node>>} indexes\r\n * @param {Object.<string, Index>} indexSet\r\n * @constructor\r\n */\r\nvar IndexMap = /** @class */ (function () {\r\n    function IndexMap(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    Object.defineProperty(IndexMap, \"Default\", {\r\n        /**\r\n         * The default IndexMap for nodes without a priority\r\n         * @type {!IndexMap}\r\n         * @const\r\n         */\r\n        get: function () {\r\n            util.assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n            _defaultIndexMap =\r\n                _defaultIndexMap ||\r\n                    new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n            return _defaultIndexMap;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     *\r\n     * @param {!string} indexKey\r\n     * @return {?SortedMap.<NamedNode, Node>}\r\n     */\r\n    IndexMap.prototype.get = function (indexKey) {\r\n        var sortedMap = util.safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap)\r\n            throw new Error('No index defined for ' + indexKey);\r\n        if (sortedMap === fallbackObject) {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n        else {\r\n            return sortedMap;\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {boolean}\r\n     */\r\n    IndexMap.prototype.hasIndex = function (indexDefinition) {\r\n        return util.contains(this.indexSet_, indexDefinition.toString());\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @param {!SortedMap.<string, !Node>} existingChildren\r\n     * @return {!IndexMap}\r\n     */\r\n    IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {\r\n        util.assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        var childList = [];\r\n        var sawIndexedValue = false;\r\n        var iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        var next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        var newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        var indexName = indexDefinition.toString();\r\n        var newIndexSet = util.clone(this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        var newIndexes = util.clone(this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    };\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     * @param {!NamedNode} namedNode\r\n     * @param {!SortedMap.<string, !Node>} existingChildren\r\n     * @return {!IndexMap}\r\n     */\r\n    IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {\r\n        var _this = this;\r\n        var newIndexes = util.map(this.indexes_, function (indexedChildren, indexName) {\r\n            var index = util.safeGet(_this.indexSet_, indexName);\r\n            util.assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    var childList = [];\r\n                    var iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    var next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name != namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                var existingSnap = existingChildren.get(namedNode.name);\r\n                var newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    };\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     * @param {!NamedNode} namedNode\r\n     * @param {!SortedMap.<string, !Node>} existingChildren\r\n     * @return {!IndexMap}\r\n     */\r\n    IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {\r\n        var newIndexes = util.map(this.indexes_, function (indexedChildren) {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                var existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    };\r\n    return IndexMap;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nvar EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n *\r\n * @constructor\r\n * @implements {Node}\r\n */\r\nvar ChildrenNode = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!SortedMap.<string, !Node>} children_ List of children\r\n     * of this node..\r\n     * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).\r\n     * @param {!IndexMap} indexMap_\r\n     */\r\n    function ChildrenNode(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            util.assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    Object.defineProperty(ChildrenNode, \"EMPTY_NODE\", {\r\n        get: function () {\r\n            return (EMPTY_NODE ||\r\n                (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.isLeafNode = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getPriority = function () {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updatePriority = function (newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getImmediateChild = function (childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            var child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getChild = function (path) {\r\n        var front = path.getFront();\r\n        if (front === null)\r\n            return this;\r\n        return this.getImmediateChild(front).getChild(path.popFront());\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.hasChild = function (childName) {\r\n        return this.children_.get(childName) !== null;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {\r\n        util.assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            var namedNode = new NamedNode(childName, newChildNode);\r\n            var newChildren = void 0, newIndexMap = void 0, newPriority = void 0;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updateChild = function (path, newChildNode) {\r\n        var front = path.getFront();\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            util.assert(path.getFront() !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\r\n            var newImmediateChild = this.getImmediateChild(front).updateChild(path.popFront(), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.isEmpty = function () {\r\n        return this.children_.isEmpty();\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.numChildren = function () {\r\n        return this.children_.count();\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.val = function (exportFormat) {\r\n        if (this.isEmpty())\r\n            return null;\r\n        var obj = {};\r\n        var numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            var array = [];\r\n            for (var key in obj)\r\n                array[key] = obj[key];\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.hash = function () {\r\n        if (this.lazyHash_ === null) {\r\n            var toHash_1 = '';\r\n            if (!this.getPriority().isEmpty())\r\n                toHash_1 +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                var childHash = childNode.hash();\r\n                if (childHash !== '')\r\n                    toHash_1 += ':' + key + ':' + childHash;\r\n            });\r\n            this.lazyHash_ = toHash_1 === '' ? '' : sha1(toHash_1);\r\n        }\r\n        return this.lazyHash_;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {\r\n        var idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            var predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?string}\r\n     */\r\n    ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            var minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?NamedNode}\r\n     */\r\n    ChildrenNode.prototype.getFirstChild = function (indexDefinition) {\r\n        var minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     * @param {!Index} indexDefinition\r\n     * @return {?string}\r\n     */\r\n    ChildrenNode.prototype.getLastChildName = function (indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            var maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?NamedNode}\r\n     */\r\n    ChildrenNode.prototype.getLastChild = function (indexDefinition) {\r\n        var maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.forEachChild = function (index, action) {\r\n        var idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(function (wrappedNode) {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getIterator = function (indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    };\r\n    /**\r\n     *\r\n     * @param {!NamedNode} startPost\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, function (key) { return key; });\r\n        }\r\n        else {\r\n            var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            var next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    };\r\n    /**\r\n     * @param {!NamedNode} endPost\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, function (key) {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            var next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.compareTo = function (other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE$2) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.withIndex = function (indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.isIndexed = function (index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.equals = function (other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            var otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                var thisIter = this.getIterator(PRIORITY_INDEX);\r\n                var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                var thisCurrent = thisIter.getNext();\r\n                var otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     * @private\r\n     * @param {!Index} indexDefinition\r\n     * @return {?SortedMap.<NamedNode, Node>}\r\n     */\r\n    ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    };\r\n    /**\r\n     * @private\r\n     * @type {RegExp}\r\n     */\r\n    ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\n    return ChildrenNode;\r\n}());\r\n/**\r\n * @constructor\r\n * @extends {ChildrenNode}\r\n * @private\r\n */\r\nvar MaxNode = /** @class */ (function (_super) {\r\n    tslib_1.__extends(MaxNode, _super);\r\n    function MaxNode() {\r\n        return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default) || this;\r\n    }\r\n    MaxNode.prototype.compareTo = function (other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    };\r\n    MaxNode.prototype.equals = function (other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    };\r\n    MaxNode.prototype.getPriority = function () {\r\n        return this;\r\n    };\r\n    MaxNode.prototype.getImmediateChild = function (childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    };\r\n    MaxNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    return MaxNode;\r\n}(ChildrenNode));\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n * @type {!MAX_NODE}\r\n * @const\r\n */\r\nvar MAX_NODE$2 = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE$2)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode(MAX_NODE$2);\r\nsetMaxNode$1(MAX_NODE$2);\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param {*} json JSON to create a node for.\r\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n * @return {!Node}\r\n */\r\nfunction nodeFromJSON$1(json, priority) {\r\n    if (priority === void 0) { priority = null; }\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    util.assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        var jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON$1(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        var children_1 = [];\r\n        var childrenHavePriority_1 = false;\r\n        var hinzeJsonObj_1 = json;\r\n        util.forEach(hinzeJsonObj_1, function (key, child) {\r\n            if (typeof key !== 'string' || key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                var childNode = nodeFromJSON$1(hinzeJsonObj_1[key]);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority_1 =\r\n                        childrenHavePriority_1 || !childNode.getPriority().isEmpty();\r\n                    children_1.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children_1.length == 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function (namedNode) { return namedNode.name; }, NAME_COMPARATOR);\r\n        if (childrenHavePriority_1) {\r\n            var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON$1(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON$1(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        var node_1 = ChildrenNode.EMPTY_NODE;\r\n        var jsonObj_1 = json;\r\n        util.forEach(jsonObj_1, function (key, childData) {\r\n            if (util.contains(jsonObj_1, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    var childNode = nodeFromJSON$1(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty())\r\n                        node_1 = node_1.updateImmediateChild(key, childNode);\r\n                }\r\n            }\r\n        });\r\n        return node_1.updatePriority(nodeFromJSON$1(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON$1);\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\r\nvar ValueIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ValueIndex, _super);\r\n    function ValueIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.compare = function (a, b) {\r\n        var indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.isDefinedOn = function (node) {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.maxPost = function () {\r\n        return NamedNode.MAX;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    ValueIndex.prototype.makePost = function (indexValue, name) {\r\n        var valueNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    ValueIndex.prototype.toString = function () {\r\n        return '.value';\r\n    };\r\n    return ValueIndex;\r\n}(Index));\r\nvar VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!Path} indexPath\r\n * @constructor\r\n * @extends {Index}\r\n */\r\nvar PathIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PathIndex, _super);\r\n    function PathIndex(indexPath_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.indexPath_ = indexPath_;\r\n        util.assert(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {!Node} snap\r\n     * @return {!Node}\r\n     * @protected\r\n     */\r\n    PathIndex.prototype.extractChild = function (snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.isDefinedOn = function (node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.compare = function (a, b) {\r\n        var aChild = this.extractChild(a.node);\r\n        var bChild = this.extractChild(b.node);\r\n        var indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.makePost = function (indexValue, name) {\r\n        var valueNode = nodeFromJSON$1(indexValue);\r\n        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.maxPost = function () {\r\n        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE$2);\r\n        return new NamedNode(MAX_NAME, node);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.toString = function () {\r\n        return this.indexPath_.slice().join('/');\r\n    };\r\n    return PathIndex;\r\n}(Index));\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\r\n * surfaces the public methods (val, forEach, etc.) we want to expose.\r\n */\r\nvar DataSnapshot = /** @class */ (function () {\r\n    /**\r\n     * @param {!Node} node_ A SnapshotNode to wrap.\r\n     * @param {!Reference} ref_ The ref of the location this snapshot came from.\r\n     * @param {!Index} index_ The iteration order for this snapshot\r\n     */\r\n    function DataSnapshot(node_, ref_, index_) {\r\n        this.node_ = node_;\r\n        this.ref_ = ref_;\r\n        this.index_ = index_;\r\n    }\r\n    /**\r\n     * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\r\n     * empty.\r\n     *\r\n     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    DataSnapshot.prototype.val = function () {\r\n        util.validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\r\n        return this.node_.val();\r\n    };\r\n    /**\r\n     * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\r\n     * the entire node contents.\r\n     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    DataSnapshot.prototype.exportVal = function () {\r\n        util.validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\r\n        return this.node_.val(true);\r\n    };\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    DataSnapshot.prototype.toJSON = function () {\r\n        // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\r\n        util.validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\r\n        return this.exportVal();\r\n    };\r\n    /**\r\n     * Returns whether the snapshot contains a non-null value.\r\n     *\r\n     * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\r\n     */\r\n    DataSnapshot.prototype.exists = function () {\r\n        util.validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\r\n        return !this.node_.isEmpty();\r\n    };\r\n    /**\r\n     * Returns a DataSnapshot of the specified child node's contents.\r\n     *\r\n     * @param {!string} childPathString Path to a child.\r\n     * @return {!DataSnapshot} DataSnapshot for child node.\r\n     */\r\n    DataSnapshot.prototype.child = function (childPathString) {\r\n        util.validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\r\n        // Ensure the childPath is a string (can be a number)\r\n        childPathString = String(childPathString);\r\n        validatePathString('DataSnapshot.child', 1, childPathString, false);\r\n        var childPath = new Path(childPathString);\r\n        var childRef = this.ref_.child(childPath);\r\n        return new DataSnapshot(this.node_.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    };\r\n    /**\r\n     * Returns whether the snapshot contains a child at the specified path.\r\n     *\r\n     * @param {!string} childPathString Path to a child.\r\n     * @return {boolean} Whether the child exists.\r\n     */\r\n    DataSnapshot.prototype.hasChild = function (childPathString) {\r\n        util.validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\r\n        validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\r\n        var childPath = new Path(childPathString);\r\n        return !this.node_.getChild(childPath).isEmpty();\r\n    };\r\n    /**\r\n     * Returns the priority of the object, or null if no priority was set.\r\n     *\r\n     * @return {string|number|null} The priority.\r\n     */\r\n    DataSnapshot.prototype.getPriority = function () {\r\n        util.validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this.node_.getPriority().val();\r\n    };\r\n    /**\r\n     * Iterates through child nodes and calls the specified action for each one.\r\n     *\r\n     * @param {function(!DataSnapshot)} action Callback function to be called\r\n     * for each child.\r\n     * @return {boolean} True if forEach was canceled by action returning true for\r\n     * one of the child nodes.\r\n     */\r\n    DataSnapshot.prototype.forEach = function (action) {\r\n        var _this = this;\r\n        util.validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\r\n        util.validateCallback('DataSnapshot.forEach', 1, action, false);\r\n        if (this.node_.isLeafNode())\r\n            return false;\r\n        var childrenNode = this.node_;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this.index_, function (key, node) {\r\n            return action(new DataSnapshot(node, _this.ref_.child(key), PRIORITY_INDEX));\r\n        });\r\n    };\r\n    /**\r\n     * Returns whether this DataSnapshot has children.\r\n     * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\r\n     */\r\n    DataSnapshot.prototype.hasChildren = function () {\r\n        util.validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\r\n        if (this.node_.isLeafNode())\r\n            return false;\r\n        else\r\n            return !this.node_.isEmpty();\r\n    };\r\n    Object.defineProperty(DataSnapshot.prototype, \"key\", {\r\n        get: function () {\r\n            return this.ref_.getKey();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns the number of children for this DataSnapshot.\r\n     * @return {number} The number of children that this DataSnapshot contains.\r\n     */\r\n    DataSnapshot.prototype.numChildren = function () {\r\n        util.validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\r\n        return this.node_.numChildren();\r\n    };\r\n    /**\r\n     * @return {Reference} The Firebase reference for the location this snapshot's data came from.\r\n     */\r\n    DataSnapshot.prototype.getRef = function () {\r\n        util.validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\r\n        return this.ref_;\r\n    };\r\n    Object.defineProperty(DataSnapshot.prototype, \"ref\", {\r\n        get: function () {\r\n            return this.getRef();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DataSnapshot;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n * @implements {Event}\r\n */\r\nvar DataEvent = /** @class */ (function () {\r\n    /**\r\n     * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided\r\n     * @param {!DataSnapshot} snapshot The data backing the event\r\n     * @param {?string=} prevName Optional, the name of the previous child for child_* events.\r\n     */\r\n    function DataEvent(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getPath = function () {\r\n        var ref = this.snapshot.getRef();\r\n        if (this.eventType === 'value') {\r\n            return ref.path;\r\n        }\r\n        else {\r\n            return ref.getParent().path;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getEventType = function () {\r\n        return this.eventType;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getEventRunner = function () {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.toString = function () {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            util.stringify(this.snapshot.exportVal()));\r\n    };\r\n    return DataEvent;\r\n}());\r\nvar CancelEvent = /** @class */ (function () {\r\n    /**\r\n     * @param {EventRegistration} eventRegistration\r\n     * @param {Error} error\r\n     * @param {!Path} path\r\n     */\r\n    function CancelEvent(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getPath = function () {\r\n        return this.path;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getEventType = function () {\r\n        return 'cancel';\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getEventRunner = function () {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.toString = function () {\r\n        return this.path.toString() + ':cancel';\r\n    };\r\n    return CancelEvent;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nvar ValueEventRegistration = /** @class */ (function () {\r\n    /**\r\n     * @param {?function(!DataSnapshot)} callback_\r\n     * @param {?function(Error)} cancelCallback_\r\n     * @param {?Object} context_\r\n     */\r\n    function ValueEventRegistration(callback_, cancelCallback_, context_) {\r\n        this.callback_ = callback_;\r\n        this.cancelCallback_ = cancelCallback_;\r\n        this.context_ = context_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.respondsTo = function (eventType) {\r\n        return eventType === 'value';\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.createEvent = function (change, query) {\r\n        var index = query.getQueryParams().getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, query.getRef(), index));\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.getEventRunner = function (eventData) {\r\n        var ctx = this.context_;\r\n        if (eventData.getEventType() === 'cancel') {\r\n            util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\r\n            var cancelCB_1 = this.cancelCallback_;\r\n            return function () {\r\n                // We know that error exists, we checked above that this is a cancel event\r\n                cancelCB_1.call(ctx, eventData.error);\r\n            };\r\n        }\r\n        else {\r\n            var cb_1 = this.callback_;\r\n            return function () {\r\n                cb_1.call(ctx, eventData.snapshot);\r\n            };\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.createCancelEvent = function (error, path) {\r\n        if (this.cancelCallback_) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.matches = function (other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callback_ || !this.callback_) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return (other.callback_ === this.callback_ && other.context_ === this.context_);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.hasAnyCallback = function () {\r\n        return this.callback_ !== null;\r\n    };\r\n    return ValueEventRegistration;\r\n}());\r\n/**\r\n * Represents the registration of 1 or more child_xxx events.\r\n *\r\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\r\n * register a group of callbacks together in the future.\r\n *\r\n * @constructor\r\n * @implements {EventRegistration}\r\n */\r\nvar ChildEventRegistration = /** @class */ (function () {\r\n    /**\r\n     * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_\r\n     * @param {?function(Error)} cancelCallback_\r\n     * @param {Object=} context_\r\n     */\r\n    function ChildEventRegistration(callbacks_, cancelCallback_, context_) {\r\n        this.callbacks_ = callbacks_;\r\n        this.cancelCallback_ = cancelCallback_;\r\n        this.context_ = context_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.respondsTo = function (eventType) {\r\n        var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return util.contains(this.callbacks_, eventToCheck);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.createCancelEvent = function (error, path) {\r\n        if (this.cancelCallback_) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.createEvent = function (change, query) {\r\n        util.assert(change.childName != null, 'Child events should have a childName.');\r\n        var ref = query.getRef().child(/** @type {!string} */ (change.childName));\r\n        var index = query.getQueryParams().getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, ref, index), change.prevName);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.getEventRunner = function (eventData) {\r\n        var ctx = this.context_;\r\n        if (eventData.getEventType() === 'cancel') {\r\n            util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\r\n            var cancelCB_2 = this.cancelCallback_;\r\n            return function () {\r\n                // We know that error exists, we checked above that this is a cancel event\r\n                cancelCB_2.call(ctx, eventData.error);\r\n            };\r\n        }\r\n        else {\r\n            var cb_2 = this.callbacks_[eventData.eventType];\r\n            return function () {\r\n                cb_2.call(ctx, eventData.snapshot, eventData.prevName);\r\n            };\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.matches = function (other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            if (!this.callbacks_ || !other.callbacks_) {\r\n                return true;\r\n            }\r\n            else if (this.context_ === other.context_) {\r\n                var otherCount = util.getCount(other.callbacks_);\r\n                var thisCount = util.getCount(this.callbacks_);\r\n                if (otherCount === thisCount) {\r\n                    // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\r\n                    //  If event types don't match, not a match\r\n                    // If count is not 1, exact match across all\r\n                    if (otherCount === 1) {\r\n                        var otherKey /** @type {!string} */ = util.getAnyKey(other.callbacks_);\r\n                        var thisKey /** @type {!string} */ = util.getAnyKey(this.callbacks_);\r\n                        return (thisKey === otherKey &&\r\n                            (!other.callbacks_[otherKey] ||\r\n                                !this.callbacks_[thisKey] ||\r\n                                other.callbacks_[otherKey] === this.callbacks_[thisKey]));\r\n                    }\r\n                    else {\r\n                        // Exact match on each key.\r\n                        return util.every(this.callbacks_, function (eventType, cb) { return other.callbacks_[eventType] === cb; });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.hasAnyCallback = function () {\r\n        return this.callbacks_ !== null;\r\n    };\r\n    return ChildEventRegistration;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __referenceConstructor;\r\n/**\r\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\r\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\r\n *\r\n * Since every Firebase reference is a query, Firebase inherits from this object.\r\n */\r\nvar Query = /** @class */ (function () {\r\n    function Query(repo, path, queryParams_, orderByCalled_) {\r\n        this.repo = repo;\r\n        this.path = path;\r\n        this.queryParams_ = queryParams_;\r\n        this.orderByCalled_ = orderByCalled_;\r\n    }\r\n    Object.defineProperty(Query, \"__referenceConstructor\", {\r\n        get: function () {\r\n            util.assert(__referenceConstructor, 'Reference.ts has not been loaded');\r\n            return __referenceConstructor;\r\n        },\r\n        set: function (val) {\r\n            __referenceConstructor = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Validates start/end values for queries.\r\n     * @param {!QueryParams} params\r\n     * @private\r\n     */\r\n    Query.validateQueryEndpoints_ = function (params) {\r\n        var startNode = null;\r\n        var endNode = null;\r\n        if (params.hasStart()) {\r\n            startNode = params.getIndexStartValue();\r\n        }\r\n        if (params.hasEnd()) {\r\n            endNode = params.getIndexEndValue();\r\n        }\r\n        if (params.getIndex() === KEY_INDEX) {\r\n            var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n                'startAt(), endAt(), or equalTo().';\r\n            var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), endAt(),' +\r\n                'or equalTo() must be a string.';\r\n            if (params.hasStart()) {\r\n                var startName = params.getIndexStartName();\r\n                if (startName != MIN_NAME) {\r\n                    throw new Error(tooManyArgsError);\r\n                }\r\n                else if (typeof startNode !== 'string') {\r\n                    throw new Error(wrongArgTypeError);\r\n                }\r\n            }\r\n            if (params.hasEnd()) {\r\n                var endName = params.getIndexEndName();\r\n                if (endName != MAX_NAME) {\r\n                    throw new Error(tooManyArgsError);\r\n                }\r\n                else if (typeof endNode !== 'string') {\r\n                    throw new Error(wrongArgTypeError);\r\n                }\r\n            }\r\n        }\r\n        else if (params.getIndex() === PRIORITY_INDEX) {\r\n            if ((startNode != null && !isValidPriority(startNode)) ||\r\n                (endNode != null && !isValidPriority(endNode))) {\r\n                throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                    'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).');\r\n            }\r\n        }\r\n        else {\r\n            util.assert(params.getIndex() instanceof PathIndex ||\r\n                params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n            if ((startNode != null && typeof startNode === 'object') ||\r\n                (endNode != null && typeof endNode === 'object')) {\r\n                throw new Error('Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' +\r\n                    'an object.');\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Validates that limit* has been called with the correct combination of parameters\r\n     * @param {!QueryParams} params\r\n     * @private\r\n     */\r\n    Query.validateLimit_ = function (params) {\r\n        if (params.hasStart() &&\r\n            params.hasEnd() &&\r\n            params.hasLimit() &&\r\n            !params.hasAnchoredLimit()) {\r\n            throw new Error(\"Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.\");\r\n        }\r\n    };\r\n    /**\r\n     * Validates that no other order by call has been made\r\n     * @param {!string} fnName\r\n     * @private\r\n     */\r\n    Query.prototype.validateNoPreviousOrderByCall_ = function (fnName) {\r\n        if (this.orderByCalled_ === true) {\r\n            throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n        }\r\n    };\r\n    /**\r\n     * @return {!QueryParams}\r\n     */\r\n    Query.prototype.getQueryParams = function () {\r\n        return this.queryParams_;\r\n    };\r\n    /**\r\n     * @return {!Reference}\r\n     */\r\n    Query.prototype.getRef = function () {\r\n        util.validateArgCount('Query.ref', 0, 0, arguments.length);\r\n        // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\r\n        // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\r\n        // method gets called.\r\n        return new Query.__referenceConstructor(this.repo, this.path);\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @param {!function(DataSnapshot, string=)} callback\r\n     * @param {(function(Error)|Object)=} cancelCallbackOrContext\r\n     * @param {Object=} context\r\n     * @return {!function(DataSnapshot, string=)}\r\n     */\r\n    Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {\r\n        util.validateArgCount('Query.on', 2, 4, arguments.length);\r\n        validateEventType('Query.on', 1, eventType, false);\r\n        util.validateCallback('Query.on', 2, callback, false);\r\n        var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);\r\n        if (eventType === 'value') {\r\n            this.onValueEvent(callback, ret.cancel, ret.context);\r\n        }\r\n        else {\r\n            var callbacks = {};\r\n            callbacks[eventType] = callback;\r\n            this.onChildEvent(callbacks, ret.cancel, ret.context);\r\n        }\r\n        return callback;\r\n    };\r\n    /**\r\n     * @param {!function(!DataSnapshot)} callback\r\n     * @param {?function(Error)} cancelCallback\r\n     * @param {?Object} context\r\n     * @protected\r\n     */\r\n    Query.prototype.onValueEvent = function (callback, cancelCallback, context) {\r\n        var container = new ValueEventRegistration(callback, cancelCallback || null, context || null);\r\n        this.repo.addEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks\r\n     * @param {?function(Error)} cancelCallback\r\n     * @param {?Object} context\r\n     * @protected\r\n     */\r\n    Query.prototype.onChildEvent = function (callbacks, cancelCallback, context) {\r\n        var container = new ChildEventRegistration(callbacks, cancelCallback, context);\r\n        this.repo.addEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * @param {string=} eventType\r\n     * @param {(function(!DataSnapshot, ?string=))=} callback\r\n     * @param {Object=} context\r\n     */\r\n    Query.prototype.off = function (eventType, callback, context) {\r\n        util.validateArgCount('Query.off', 0, 3, arguments.length);\r\n        validateEventType('Query.off', 1, eventType, true);\r\n        util.validateCallback('Query.off', 2, callback, true);\r\n        util.validateContextObject('Query.off', 3, context, true);\r\n        var container = null;\r\n        var callbacks = null;\r\n        if (eventType === 'value') {\r\n            var valueCallback = callback || null;\r\n            container = new ValueEventRegistration(valueCallback, null, context || null);\r\n        }\r\n        else if (eventType) {\r\n            if (callback) {\r\n                callbacks = {};\r\n                callbacks[eventType] = callback;\r\n            }\r\n            container = new ChildEventRegistration(callbacks, null, context || null);\r\n        }\r\n        this.repo.removeEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * Attaches a listener, waits for the first event, and then removes the listener\r\n     * @param {!string} eventType\r\n     * @param {!function(!DataSnapshot, string=)} userCallback\r\n     * @param cancelOrContext\r\n     * @param context\r\n     * @return {!firebase.Promise}\r\n     */\r\n    Query.prototype.once = function (eventType, userCallback, cancelOrContext, context) {\r\n        var _this = this;\r\n        util.validateArgCount('Query.once', 1, 4, arguments.length);\r\n        validateEventType('Query.once', 1, eventType, false);\r\n        util.validateCallback('Query.once', 2, userCallback, true);\r\n        var ret = Query.getCancelAndContextArgs_('Query.once', cancelOrContext, context);\r\n        // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\r\n        // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\r\n        // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\r\n        // against the Promise specification.\r\n        var firstCall = true;\r\n        var deferred = new util.Deferred();\r\n        // A dummy error handler in case a user wasn't expecting promises\r\n        deferred.promise.catch(function () { });\r\n        var onceCallback = function (snapshot) {\r\n            // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\r\n            // triggers multiple events (e.g. child_added or child_changed).\r\n            if (firstCall) {\r\n                firstCall = false;\r\n                _this.off(eventType, onceCallback);\r\n                if (userCallback) {\r\n                    userCallback.bind(ret.context)(snapshot);\r\n                }\r\n                deferred.resolve(snapshot);\r\n            }\r\n        };\r\n        this.on(eventType, onceCallback, \r\n        /*cancel=*/ function (err) {\r\n            _this.off(eventType, onceCallback);\r\n            if (ret.cancel)\r\n                ret.cancel.bind(ret.context)(err);\r\n            deferred.reject(err);\r\n        });\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * Set a limit and anchor it to the start of the window.\r\n     * @param {!number} limit\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.limitToFirst = function (limit) {\r\n        util.validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\r\n        if (typeof limit !== 'number' ||\r\n            Math.floor(limit) !== limit ||\r\n            limit <= 0) {\r\n            throw new Error('Query.limitToFirst: First argument must be a positive integer.');\r\n        }\r\n        if (this.queryParams_.hasLimit()) {\r\n            throw new Error('Query.limitToFirst: Limit was already set (by another call to limit, ' +\r\n                'limitToFirst, or limitToLast).');\r\n        }\r\n        return new Query(this.repo, this.path, this.queryParams_.limitToFirst(limit), this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Set a limit and anchor it to the end of the window.\r\n     * @param {!number} limit\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.limitToLast = function (limit) {\r\n        util.validateArgCount('Query.limitToLast', 1, 1, arguments.length);\r\n        if (typeof limit !== 'number' ||\r\n            Math.floor(limit) !== limit ||\r\n            limit <= 0) {\r\n            throw new Error('Query.limitToLast: First argument must be a positive integer.');\r\n        }\r\n        if (this.queryParams_.hasLimit()) {\r\n            throw new Error('Query.limitToLast: Limit was already set (by another call to limit, ' +\r\n                'limitToFirst, or limitToLast).');\r\n        }\r\n        return new Query(this.repo, this.path, this.queryParams_.limitToLast(limit), this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Given a child path, return a new query ordered by the specified grandchild path.\r\n     * @param {!string} path\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByChild = function (path) {\r\n        util.validateArgCount('Query.orderByChild', 1, 1, arguments.length);\r\n        if (path === '$key') {\r\n            throw new Error('Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.');\r\n        }\r\n        else if (path === '$priority') {\r\n            throw new Error('Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.');\r\n        }\r\n        else if (path === '$value') {\r\n            throw new Error('Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.');\r\n        }\r\n        validatePathString('Query.orderByChild', 1, path, false);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByChild');\r\n        var parsedPath = new Path(path);\r\n        if (parsedPath.isEmpty()) {\r\n            throw new Error('Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.');\r\n        }\r\n        var index = new PathIndex(parsedPath);\r\n        var newParams = this.queryParams_.orderBy(index);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the KeyIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByKey = function () {\r\n        util.validateArgCount('Query.orderByKey', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByKey');\r\n        var newParams = this.queryParams_.orderBy(KEY_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the PriorityIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByPriority = function () {\r\n        util.validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByPriority');\r\n        var newParams = this.queryParams_.orderBy(PRIORITY_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the ValueIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByValue = function () {\r\n        util.validateArgCount('Query.orderByValue', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByValue');\r\n        var newParams = this.queryParams_.orderBy(VALUE_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * @param {number|string|boolean|null} value\r\n     * @param {?string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.startAt = function (value, name) {\r\n        if (value === void 0) { value = null; }\r\n        util.validateArgCount('Query.startAt', 0, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\r\n        validateKey('Query.startAt', 2, name, true);\r\n        var newParams = this.queryParams_.startAt(value, name);\r\n        Query.validateLimit_(newParams);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        if (this.queryParams_.hasStart()) {\r\n            throw new Error('Query.startAt: Starting point was already set (by another call to startAt ' +\r\n                'or equalTo).');\r\n        }\r\n        // Calling with no params tells us to start at the beginning.\r\n        if (value === undefined) {\r\n            value = null;\r\n            name = null;\r\n        }\r\n        return new Query(this.repo, this.path, newParams, this.orderByCalled_);\r\n    };\r\n    /**\r\n     * @param {number|string|boolean|null} value\r\n     * @param {?string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.endAt = function (value, name) {\r\n        if (value === void 0) { value = null; }\r\n        util.validateArgCount('Query.endAt', 0, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\r\n        validateKey('Query.endAt', 2, name, true);\r\n        var newParams = this.queryParams_.endAt(value, name);\r\n        Query.validateLimit_(newParams);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        if (this.queryParams_.hasEnd()) {\r\n            throw new Error('Query.endAt: Ending point was already set (by another call to endAt or ' +\r\n                'equalTo).');\r\n        }\r\n        return new Query(this.repo, this.path, newParams, this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Load the selection of children with exactly the specified value, and, optionally,\r\n     * the specified name.\r\n     * @param {number|string|boolean|null} value\r\n     * @param {string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.equalTo = function (value, name) {\r\n        util.validateArgCount('Query.equalTo', 1, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\r\n        validateKey('Query.equalTo', 2, name, true);\r\n        if (this.queryParams_.hasStart()) {\r\n            throw new Error('Query.equalTo: Starting point was already set (by another call to startAt or ' +\r\n                'equalTo).');\r\n        }\r\n        if (this.queryParams_.hasEnd()) {\r\n            throw new Error('Query.equalTo: Ending point was already set (by another call to endAt or ' +\r\n                'equalTo).');\r\n        }\r\n        return this.startAt(value, name).endAt(value, name);\r\n    };\r\n    /**\r\n     * @return {!string} URL for this location.\r\n     */\r\n    Query.prototype.toString = function () {\r\n        util.validateArgCount('Query.toString', 0, 0, arguments.length);\r\n        return this.repo.toString() + this.path.toUrlEncodedString();\r\n    };\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users.\r\n    Query.prototype.toJSON = function () {\r\n        // An optional spacer argument is unnecessary for a string.\r\n        util.validateArgCount('Query.toJSON', 0, 1, arguments.length);\r\n        return this.toString();\r\n    };\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     * @return {!Object}\r\n     */\r\n    Query.prototype.queryObject = function () {\r\n        return this.queryParams_.getQueryObject();\r\n    };\r\n    /**\r\n     * @return {!string}\r\n     */\r\n    Query.prototype.queryIdentifier = function () {\r\n        var obj = this.queryObject();\r\n        var id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    };\r\n    /**\r\n     * Return true if this query and the provided query are equivalent; otherwise, return false.\r\n     * @param {Query} other\r\n     * @return {boolean}\r\n     */\r\n    Query.prototype.isEqual = function (other) {\r\n        util.validateArgCount('Query.isEqual', 1, 1, arguments.length);\r\n        if (!(other instanceof Query)) {\r\n            var error$$1 = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\r\n            throw new Error(error$$1);\r\n        }\r\n        var sameRepo = this.repo === other.repo;\r\n        var samePath = this.path.equals(other.path);\r\n        var sameQueryIdentifier = this.queryIdentifier() === other.queryIdentifier();\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    };\r\n    /**\r\n     * Helper used by .on and .once to extract the context and or cancel arguments.\r\n     * @param {!string} fnName The function name (on or once)\r\n     * @param {(function(Error)|Object)=} cancelOrContext\r\n     * @param {Object=} context\r\n     * @return {{cancel: ?function(Error), context: ?Object}}\r\n     * @private\r\n     */\r\n    Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {\r\n        var ret = { cancel: null, context: null };\r\n        if (cancelOrContext && context) {\r\n            ret.cancel = cancelOrContext;\r\n            util.validateCallback(fnName, 3, ret.cancel, true);\r\n            ret.context = context;\r\n            util.validateContextObject(fnName, 4, ret.context, true);\r\n        }\r\n        else if (cancelOrContext) {\r\n            // we have either a cancel callback or a context.\r\n            if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\r\n                // it's a context!\r\n                ret.context = cancelOrContext;\r\n            }\r\n            else if (typeof cancelOrContext === 'function') {\r\n                ret.cancel = cancelOrContext;\r\n            }\r\n            else {\r\n                throw new Error(util.errorPrefix(fnName, 3, true) +\r\n                    ' must either be a cancel callback or a context object.');\r\n            }\r\n        }\r\n        return ret;\r\n    };\r\n    Object.defineProperty(Query.prototype, \"ref\", {\r\n        get: function () {\r\n            return this.getRef();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Query;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Implements a set with a count of elements.\r\n *\r\n * @template K, V\r\n */\r\nvar CountedSet = /** @class */ (function () {\r\n    function CountedSet() {\r\n        this.set = {};\r\n    }\r\n    /**\r\n     * @param {!K} item\r\n     * @param {V} val\r\n     */\r\n    CountedSet.prototype.add = function (item, val) {\r\n        this.set[item] = val !== null ? val : true;\r\n    };\r\n    /**\r\n     * @param {!K} key\r\n     * @return {boolean}\r\n     */\r\n    CountedSet.prototype.contains = function (key) {\r\n        return util.contains(this.set, key);\r\n    };\r\n    /**\r\n     * @param {!K} item\r\n     * @return {V}\r\n     */\r\n    CountedSet.prototype.get = function (item) {\r\n        return this.contains(item) ? this.set[item] : undefined;\r\n    };\r\n    /**\r\n     * @param {!K} item\r\n     */\r\n    CountedSet.prototype.remove = function (item) {\r\n        delete this.set[item];\r\n    };\r\n    /**\r\n     * Deletes everything in the set\r\n     */\r\n    CountedSet.prototype.clear = function () {\r\n        this.set = {};\r\n    };\r\n    /**\r\n     * True if there's nothing in the set\r\n     * @return {boolean}\r\n     */\r\n    CountedSet.prototype.isEmpty = function () {\r\n        return util.isEmpty(this.set);\r\n    };\r\n    /**\r\n     * @return {number} The number of items in the set\r\n     */\r\n    CountedSet.prototype.count = function () {\r\n        return util.getCount(this.set);\r\n    };\r\n    /**\r\n     * Run a function on each k,v pair in the set\r\n     * @param {function(K, V)} fn\r\n     */\r\n    CountedSet.prototype.each = function (fn) {\r\n        util.forEach(this.set, function (k, v) { return fn(k, v); });\r\n    };\r\n    /**\r\n     * Mostly for debugging\r\n     * @return {Array.<K>} The keys present in this CountedSet\r\n     */\r\n    CountedSet.prototype.keys = function () {\r\n        var keys = [];\r\n        util.forEach(this.set, function (k) {\r\n            keys.push(k);\r\n        });\r\n        return keys;\r\n    };\r\n    return CountedSet;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper class to store a sparse set of snapshots.\r\n *\r\n * @constructor\r\n */\r\nvar SparseSnapshotTree = /** @class */ (function () {\r\n    function SparseSnapshotTree() {\r\n        /**\r\n         * @private\r\n         * @type {Node}\r\n         */\r\n        this.value_ = null;\r\n        /**\r\n         * @private\r\n         * @type {CountedSet}\r\n         */\r\n        this.children_ = null;\r\n    }\r\n    /**\r\n     * Gets the node stored at the given path if one exists.\r\n     *\r\n     * @param {!Path} path Path to look up snapshot for.\r\n     * @return {?Node} The retrieved node, or null.\r\n     */\r\n    SparseSnapshotTree.prototype.find = function (path) {\r\n        if (this.value_ != null) {\r\n            return this.value_.getChild(path);\r\n        }\r\n        else if (!path.isEmpty() && this.children_ != null) {\r\n            var childKey = path.getFront();\r\n            path = path.popFront();\r\n            if (this.children_.contains(childKey)) {\r\n                var childTree = this.children_.get(childKey);\r\n                return childTree.find(path);\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Stores the given node at the specified path. If there is already a node\r\n     * at a shallower path, it merges the new data into that snapshot node.\r\n     *\r\n     * @param {!Path} path Path to look up snapshot for.\r\n     * @param {!Node} data The new data, or null.\r\n     */\r\n    SparseSnapshotTree.prototype.remember = function (path, data) {\r\n        if (path.isEmpty()) {\r\n            this.value_ = data;\r\n            this.children_ = null;\r\n        }\r\n        else if (this.value_ !== null) {\r\n            this.value_ = this.value_.updateChild(path, data);\r\n        }\r\n        else {\r\n            if (this.children_ == null) {\r\n                this.children_ = new CountedSet();\r\n            }\r\n            var childKey = path.getFront();\r\n            if (!this.children_.contains(childKey)) {\r\n                this.children_.add(childKey, new SparseSnapshotTree());\r\n            }\r\n            var child = this.children_.get(childKey);\r\n            path = path.popFront();\r\n            child.remember(path, data);\r\n        }\r\n    };\r\n    /**\r\n     * Purge the data at path from the cache.\r\n     *\r\n     * @param {!Path} path Path to look up snapshot for.\r\n     * @return {boolean} True if this node should now be removed.\r\n     */\r\n    SparseSnapshotTree.prototype.forget = function (path) {\r\n        if (path.isEmpty()) {\r\n            this.value_ = null;\r\n            this.children_ = null;\r\n            return true;\r\n        }\r\n        else {\r\n            if (this.value_ !== null) {\r\n                if (this.value_.isLeafNode()) {\r\n                    // We're trying to forget a node that doesn't exist\r\n                    return false;\r\n                }\r\n                else {\r\n                    var value = this.value_;\r\n                    this.value_ = null;\r\n                    var self_1 = this;\r\n                    value.forEachChild(PRIORITY_INDEX, function (key, tree) {\r\n                        self_1.remember(new Path(key), tree);\r\n                    });\r\n                    return this.forget(path);\r\n                }\r\n            }\r\n            else if (this.children_ !== null) {\r\n                var childKey = path.getFront();\r\n                path = path.popFront();\r\n                if (this.children_.contains(childKey)) {\r\n                    var safeToRemove = this.children_.get(childKey).forget(path);\r\n                    if (safeToRemove) {\r\n                        this.children_.remove(childKey);\r\n                    }\r\n                }\r\n                if (this.children_.isEmpty()) {\r\n                    this.children_ = null;\r\n                    return true;\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Recursively iterates through all of the stored tree and calls the\r\n     * callback on each one.\r\n     *\r\n     * @param {!Path} prefixPath Path to look up node for.\r\n     * @param {!Function} func The function to invoke for each tree.\r\n     */\r\n    SparseSnapshotTree.prototype.forEachTree = function (prefixPath, func) {\r\n        if (this.value_ !== null) {\r\n            func(prefixPath, this.value_);\r\n        }\r\n        else {\r\n            this.forEachChild(function (key, tree) {\r\n                var path = new Path(prefixPath.toString() + '/' + key);\r\n                tree.forEachTree(path, func);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Iterates through each immediate child and triggers the callback.\r\n     *\r\n     * @param {!Function} func The function to invoke for each child.\r\n     */\r\n    SparseSnapshotTree.prototype.forEachChild = function (func) {\r\n        if (this.children_ !== null) {\r\n            this.children_.each(function (key, tree) {\r\n                func(key, tree);\r\n            });\r\n        }\r\n    };\r\n    return SparseSnapshotTree;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Generate placeholders for deferred values.\r\n * @param {?Object} values\r\n * @return {!Object}\r\n */\r\nvar generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n * @param {(Object|string|number|boolean)} value\r\n * @param {!Object} serverValues\r\n * @return {!(string|number|boolean)}\r\n */\r\nvar resolveDeferredValue = function (value, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    else {\r\n        util.assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n        return serverValues[value['.sv']];\r\n    }\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param {!SparseSnapshotTree} tree\r\n * @param {!Object} serverValues\r\n * @return {!SparseSnapshotTree}\r\n */\r\nvar resolveDeferredValueTree = function (tree, serverValues) {\r\n    var resolvedTree = new SparseSnapshotTree();\r\n    tree.forEachTree(new Path(''), function (path, node) {\r\n        resolvedTree.remember(path, resolveDeferredValueSnapshot(node, serverValues));\r\n    });\r\n    return resolvedTree;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n * @param {!Node} node\r\n * @param {!Object} serverValues\r\n * @return {!Node}\r\n */\r\nvar resolveDeferredValueSnapshot = function (node, serverValues) {\r\n    var rawPri = node.getPriority().val();\r\n    var priority = resolveDeferredValue(rawPri, serverValues);\r\n    var newNode;\r\n    if (node.isLeafNode()) {\r\n        var leafNode = node;\r\n        var value = resolveDeferredValue(leafNode.getValue(), serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON$1(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        var childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n            var newChildNode = resolveDeferredValueSnapshot(childNode, serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\n/**\r\n * @param {boolean} fromUser\r\n * @param {boolean} fromServer\r\n * @param {?string} queryId\r\n * @param {boolean} tagged\r\n * @constructor\r\n */\r\nvar OperationSource = /** @class */ (function () {\r\n    function OperationSource(fromUser, fromServer, queryId, tagged) {\r\n        this.fromUser = fromUser;\r\n        this.fromServer = fromServer;\r\n        this.queryId = queryId;\r\n        this.tagged = tagged;\r\n        util.assert(!tagged || fromServer, 'Tagged queries must be from server.');\r\n    }\r\n    /**\r\n     * @const\r\n     * @type {!OperationSource}\r\n     */\r\n    OperationSource.User = new OperationSource(\r\n    /*fromUser=*/ true, false, null, \r\n    /*tagged=*/ false);\r\n    /**\r\n     * @const\r\n     * @type {!OperationSource}\r\n     */\r\n    OperationSource.Server = new OperationSource(false, \r\n    /*fromServer=*/ true, null, \r\n    /*tagged=*/ false);\r\n    /**\r\n     * @param {string} queryId\r\n     * @return {!OperationSource}\r\n     */\r\n    OperationSource.forServerTaggedQuery = function (queryId) {\r\n        return new OperationSource(false, \r\n        /*fromServer=*/ true, queryId, \r\n        /*tagged=*/ true);\r\n    };\r\n    return OperationSource;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar AckUserWrite = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\r\n     * @param {!boolean} revert\r\n     */\r\n    function AckUserWrite(\r\n    /**@inheritDoc */ path, \r\n    /**@inheritDoc */ affectedTree, \r\n    /**@inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = OperationSource.User;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    AckUserWrite.prototype.operationForChild = function (childName) {\r\n        if (!this.path.isEmpty()) {\r\n            util.assert(this.path.getFront() === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            util.assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            var childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(Path.Empty, childTree, this.revert);\r\n        }\r\n    };\r\n    return AckUserWrite;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n * @const\r\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\r\n */\r\nvar EmptyChildren = function () {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nvar ImmutableTree = /** @class */ (function () {\r\n    /**\r\n     * @template T\r\n     * @param {?T} value\r\n     * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\r\n     */\r\n    function ImmutableTree(value, children) {\r\n        if (children === void 0) { children = EmptyChildren(); }\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {!Object.<string, !T>} obj\r\n     * @return {!ImmutableTree.<!T>}\r\n     */\r\n    ImmutableTree.fromObject = function (obj) {\r\n        var tree = ImmutableTree.Empty;\r\n        util.forEach(obj, function (childPath, childSnap) {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    };\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     * @return {boolean}\r\n     */\r\n    ImmutableTree.prototype.isEmpty = function () {\r\n        return this.value === null && this.children.isEmpty();\r\n    };\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\r\n     * on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param {!Path} relativePath The remainder of the path\r\n     * @param {function(T):boolean} predicate The predicate to satisfy to return a\r\n     *   node\r\n     * @return {?{path:!Path, value:!T}}\r\n     */\r\n    ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: Path.Empty, value: this.value };\r\n        }\r\n        else {\r\n            if (relativePath.isEmpty()) {\r\n                return null;\r\n            }\r\n            else {\r\n                var front = relativePath.getFront();\r\n                var child = this.children.get(front);\r\n                if (child !== null) {\r\n                    var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(relativePath.popFront(), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        var fullPath = new Path(front).child(childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     * @param {!Path} relativePath\r\n     * @return {?{path: !Path, value: !T}}\r\n     */\r\n    ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, function () { return true; });\r\n    };\r\n    /**\r\n     * @param {!Path} relativePath\r\n     * @return {!ImmutableTree.<T>} The subtree at the given path\r\n     */\r\n    ImmutableTree.prototype.subtree = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(relativePath.popFront());\r\n            }\r\n            else {\r\n                return ImmutableTree.Empty;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param {!Path} relativePath Path to set value at.\r\n     * @param {?T} toSet Value to set.\r\n     * @return {!ImmutableTree.<T>} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.set = function (relativePath, toSet) {\r\n        if (relativePath.isEmpty()) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front) || ImmutableTree.Empty;\r\n            var newChild = child.set(relativePath.popFront(), toSet);\r\n            var newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    };\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param {!Path} relativePath Path to value to remove.\r\n     * @return {!ImmutableTree.<T>} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.remove = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            if (this.children.isEmpty()) {\r\n                return ImmutableTree.Empty;\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front);\r\n            if (child) {\r\n                var newChild = child.remove(relativePath.popFront());\r\n                var newChildren = void 0;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return ImmutableTree.Empty;\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param {!Path} relativePath Path to get value for.\r\n     * @return {?T} Value at path, or null.\r\n     */\r\n    ImmutableTree.prototype.get = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(relativePath.popFront());\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param {!Path} relativePath Path to replace subtree for.\r\n     * @param {!ImmutableTree} newTree New tree.\r\n     * @return {!ImmutableTree} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.setTree = function (relativePath, newTree) {\r\n        if (relativePath.isEmpty()) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front) || ImmutableTree.Empty;\r\n            var newChild = child.setTree(relativePath.popFront(), newTree);\r\n            var newChildren = void 0;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    };\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     * @template V\r\n     * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n     * @return {V}\r\n     */\r\n    ImmutableTree.prototype.fold = function (fn) {\r\n        return this.fold_(Path.Empty, fn);\r\n    };\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     * @template V\r\n     * @param {!Path} pathSoFar\r\n     * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n     * @return {V}\r\n     * @private\r\n     */\r\n    ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {\r\n        var accum = {};\r\n        this.children.inorderTraversal(function (childKey, childTree) {\r\n            accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    };\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     * @template V\r\n     * @param {!Path} path\r\n     * @param {!function(!Path, !T):?V} f\r\n     * @return {?V}\r\n     */\r\n    ImmutableTree.prototype.findOnPath = function (path, f) {\r\n        return this.findOnPath_(path, Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {\r\n        var result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathToFollow.isEmpty()) {\r\n                return null;\r\n            }\r\n            else {\r\n                var front = pathToFollow.getFront();\r\n                var nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathToFollow.popFront(), pathSoFar.child(front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!function(!Path, !T)} f\r\n     * @returns {!ImmutableTree.<T>}\r\n     */\r\n    ImmutableTree.prototype.foreachOnPath = function (path, f) {\r\n        return this.foreachOnPath_(path, Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {\r\n        if (pathToFollow.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            var front = pathToFollow.getFront();\r\n            var nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathToFollow.popFront(), currentRelativePath.child(front), f);\r\n            }\r\n            else {\r\n                return ImmutableTree.Empty;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param {function(!Path, !T)} f A function to be called with\r\n     *   the path from the root of the tree to a node, and the value at that node.\r\n     *   Called in depth-first order.\r\n     */\r\n    ImmutableTree.prototype.foreach = function (f) {\r\n        this.foreach_(Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {\r\n        this.children.inorderTraversal(function (childName, childTree) {\r\n            childTree.foreach_(currentRelativePath.child(childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {function(string, !T)} f\r\n     */\r\n    ImmutableTree.prototype.foreachChild = function (f) {\r\n        this.children.inorderTraversal(function (childName, childTree) {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    };\r\n    ImmutableTree.Empty = new ImmutableTree(null);\r\n    return ImmutableTree;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar ListenComplete = /** @class */ (function () {\r\n    function ListenComplete(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    ListenComplete.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            return new ListenComplete(this.source, Path.Empty);\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, this.path.popFront());\r\n        }\r\n    };\r\n    return ListenComplete;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!Node} snap\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar Overwrite = /** @class */ (function () {\r\n    function Overwrite(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    Overwrite.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            return new Overwrite(this.source, Path.Empty, this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, this.path.popFront(), this.snap);\r\n        }\r\n    };\r\n    return Overwrite;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!ImmutableTree.<!Node>} children\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar Merge = /** @class */ (function () {\r\n    function Merge(\r\n    /**@inheritDoc */ source, \r\n    /**@inheritDoc */ path, \r\n    /**@inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    Merge.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            var childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, Path.Empty, childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, Path.Empty, childTree);\r\n            }\r\n        }\r\n        else {\r\n            util.assert(this.path.getFront() === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, this.path.popFront(), this.children);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    Merge.prototype.toString = function () {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    };\r\n    return Merge;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nvar CacheNode = /** @class */ (function () {\r\n    /**\r\n     * @param {!Node} node_\r\n     * @param {boolean} fullyInitialized_\r\n     * @param {boolean} filtered_\r\n     */\r\n    function CacheNode(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isFullyInitialized = function () {\r\n        return this.fullyInitialized_;\r\n    };\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isFiltered = function () {\r\n        return this.filtered_;\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isCompleteForPath = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        var childKey = path.getFront();\r\n        return this.isCompleteForChild(childKey);\r\n    };\r\n    /**\r\n     * @param {!string} key\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isCompleteForChild = function (key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    };\r\n    /**\r\n     * @return {!Node}\r\n     */\r\n    CacheNode.prototype.getNode = function () {\r\n        return this.node_;\r\n    };\r\n    return CacheNode;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Stores the data we have cached for a view.\r\n *\r\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\r\n *\r\n * @constructor\r\n */\r\nvar ViewCache = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!CacheNode} eventCache_\r\n     * @param {!CacheNode} serverCache_\r\n     */\r\n    function ViewCache(eventCache_, serverCache_) {\r\n        this.eventCache_ = eventCache_;\r\n        this.serverCache_ = serverCache_;\r\n    }\r\n    /**\r\n     * @param {!Node} eventSnap\r\n     * @param {boolean} complete\r\n     * @param {boolean} filtered\r\n     * @return {!ViewCache}\r\n     */\r\n    ViewCache.prototype.updateEventSnap = function (eventSnap, complete, filtered) {\r\n        return new ViewCache(new CacheNode(eventSnap, complete, filtered), this.serverCache_);\r\n    };\r\n    /**\r\n     * @param {!Node} serverSnap\r\n     * @param {boolean} complete\r\n     * @param {boolean} filtered\r\n     * @return {!ViewCache}\r\n     */\r\n    ViewCache.prototype.updateServerSnap = function (serverSnap, complete, filtered) {\r\n        return new ViewCache(this.eventCache_, new CacheNode(serverSnap, complete, filtered));\r\n    };\r\n    /**\r\n     * @return {!CacheNode}\r\n     */\r\n    ViewCache.prototype.getEventCache = function () {\r\n        return this.eventCache_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    ViewCache.prototype.getCompleteEventSnap = function () {\r\n        return this.eventCache_.isFullyInitialized()\r\n            ? this.eventCache_.getNode()\r\n            : null;\r\n    };\r\n    /**\r\n     * @return {!CacheNode}\r\n     */\r\n    ViewCache.prototype.getServerCache = function () {\r\n        return this.serverCache_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    ViewCache.prototype.getCompleteServerSnap = function () {\r\n        return this.serverCache_.isFullyInitialized()\r\n            ? this.serverCache_.getNode()\r\n            : null;\r\n    };\r\n    /**\r\n     * @const\r\n     * @type {ViewCache}\r\n     */\r\n    ViewCache.Empty = new ViewCache(new CacheNode(ChildrenNode.EMPTY_NODE, \r\n    /*fullyInitialized=*/ false, \r\n    /*filtered=*/ false), new CacheNode(ChildrenNode.EMPTY_NODE, \r\n    /*fullyInitialized=*/ false, \r\n    /*filtered=*/ false));\r\n    return ViewCache;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @struct\r\n * @param {!string} type The event type\r\n * @param {!Node} snapshotNode The data\r\n * @param {string=} childName The name for this child, if it's a child event\r\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\r\n * @param {string=} prevName The name for the previous child, if applicable\r\n */\r\nvar Change = /** @class */ (function () {\r\n    function Change(type, snapshotNode, childName, oldSnap, prevName) {\r\n        this.type = type;\r\n        this.snapshotNode = snapshotNode;\r\n        this.childName = childName;\r\n        this.oldSnap = oldSnap;\r\n        this.prevName = prevName;\r\n    }\r\n    /**\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.valueChange = function (snapshot) {\r\n        return new Change(Change.VALUE, snapshot);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childAddedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_ADDED, snapshot, childKey);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childRemovedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_REMOVED, snapshot, childKey);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} newSnapshot\r\n     * @param {!Node} oldSnapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {\r\n        return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childMovedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_MOVED, snapshot, childKey);\r\n    };\r\n    //event types\r\n    /** Event type for a child added */\r\n    Change.CHILD_ADDED = 'child_added';\r\n    /** Event type for a child removed */\r\n    Change.CHILD_REMOVED = 'child_removed';\r\n    /** Event type for a child changed */\r\n    Change.CHILD_CHANGED = 'child_changed';\r\n    /** Event type for a child moved */\r\n    Change.CHILD_MOVED = 'child_moved';\r\n    /** Event type for a value change */\r\n    Change.VALUE = 'value';\r\n    return Change;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n * @param {!Index} index\r\n */\r\nvar IndexedFilter = /** @class */ (function () {\r\n    function IndexedFilter(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        util.assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        var oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() == newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, oldChild));\r\n                }\r\n                else {\r\n                    util.assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(Change.childAddedChange(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(Change.childChangedChange(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        var oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(Change.childChangedChange(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(Change.childAddedChange(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.filtersNodes = function () {\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.getIndexedFilter = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    return IndexedFilter;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n */\r\nvar ChildChangeAccumulator = /** @class */ (function () {\r\n    function ChildChangeAccumulator() {\r\n        this.changeMap_ = {};\r\n    }\r\n    /**\r\n     * @param {!Change} change\r\n     */\r\n    ChildChangeAccumulator.prototype.trackChildChange = function (change) {\r\n        var type = change.type;\r\n        var childKey /** @type {!string} */ = change.childName;\r\n        util.assert(type == Change.CHILD_ADDED ||\r\n            type == Change.CHILD_CHANGED ||\r\n            type == Change.CHILD_REMOVED, 'Only child changes supported for tracking');\r\n        util.assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        var oldChange = util.safeGet(this.changeMap_, childKey);\r\n        if (oldChange) {\r\n            var oldType = oldChange.type;\r\n            if (type == Change.CHILD_ADDED && oldType == Change.CHILD_REMOVED) {\r\n                this.changeMap_[childKey] = Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode);\r\n            }\r\n            else if (type == Change.CHILD_REMOVED &&\r\n                oldType == Change.CHILD_ADDED) {\r\n                delete this.changeMap_[childKey];\r\n            }\r\n            else if (type == Change.CHILD_REMOVED &&\r\n                oldType == Change.CHILD_CHANGED) {\r\n                this.changeMap_[childKey] = Change.childRemovedChange(childKey, oldChange.oldSnap);\r\n            }\r\n            else if (type == Change.CHILD_CHANGED &&\r\n                oldType == Change.CHILD_ADDED) {\r\n                this.changeMap_[childKey] = Change.childAddedChange(childKey, change.snapshotNode);\r\n            }\r\n            else if (type == Change.CHILD_CHANGED &&\r\n                oldType == Change.CHILD_CHANGED) {\r\n                this.changeMap_[childKey] = Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap);\r\n            }\r\n            else {\r\n                throw util.assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap_[childKey] = change;\r\n        }\r\n    };\r\n    /**\r\n     * @return {!Array.<!Change>}\r\n     */\r\n    ChildChangeAccumulator.prototype.getChanges = function () {\r\n        return util.getValues(this.changeMap_);\r\n    };\r\n    return ChildChangeAccumulator;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n *\r\n * @private\r\n * @constructor\r\n * @implements CompleteChildSource\r\n */\r\nvar NoCompleteChildSource_ = /** @class */ (function () {\r\n    function NoCompleteChildSource_() {\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {\r\n        return null;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {\r\n        return null;\r\n    };\r\n    return NoCompleteChildSource_;\r\n}());\r\n/**\r\n * Singleton instance.\r\n * @const\r\n * @type {!CompleteChildSource}\r\n */\r\nvar NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n *\r\n *\r\n * @implements CompleteChildSource\r\n */\r\nvar WriteTreeCompleteChildSource = /** @class */ (function () {\r\n    /**\r\n     * @param {!WriteTreeRef} writes_\r\n     * @param {!ViewCache} viewCache_\r\n     * @param {?Node} optCompleteServerCache_\r\n     */\r\n    function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {\r\n        if (optCompleteServerCache_ === void 0) { optCompleteServerCache_ = null; }\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {\r\n        var node = this.viewCache_.getEventCache();\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            var serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.getServerCache();\r\n            return this.writes_.calcCompleteChild(childKey, serverNode);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {\r\n        var completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : this.viewCache_.getCompleteServerSnap();\r\n        var nodes = this.writes_.calcIndexedSlice(completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    };\r\n    return WriteTreeCompleteChildSource;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @struct\r\n */\r\nvar ProcessorResult = /** @class */ (function () {\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Array.<!Change>} changes\r\n     */\r\n    function ProcessorResult(viewCache, changes) {\r\n        this.viewCache = viewCache;\r\n        this.changes = changes;\r\n    }\r\n    return ProcessorResult;\r\n}());\r\n/**\r\n * @constructor\r\n */\r\nvar ViewProcessor = /** @class */ (function () {\r\n    /**\r\n     * @param {!NodeFilter} filter_\r\n     */\r\n    function ViewProcessor(filter_) {\r\n        this.filter_ = filter_;\r\n    }\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     */\r\n    ViewProcessor.prototype.assertIndexed = function (viewCache) {\r\n        util.assert(viewCache\r\n            .getEventCache()\r\n            .getNode()\r\n            .isIndexed(this.filter_.getIndex()), 'Event snap not indexed');\r\n        util.assert(viewCache\r\n            .getServerCache()\r\n            .getNode()\r\n            .isIndexed(this.filter_.getIndex()), 'Server snap not indexed');\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @return {!ProcessorResult}\r\n     */\r\n    ViewProcessor.prototype.applyOperation = function (oldViewCache, operation, writesCache, completeCache) {\r\n        var accumulator = new ChildChangeAccumulator();\r\n        var newViewCache, filterServerNode;\r\n        if (operation.type === OperationType.OVERWRITE) {\r\n            var overwrite = operation;\r\n            if (overwrite.source.fromUser) {\r\n                newViewCache = this.applyUserOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                util.assert(overwrite.source.fromServer, 'Unknown source.');\r\n                // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n                // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n                // again\r\n                filterServerNode =\r\n                    overwrite.source.tagged ||\r\n                        (oldViewCache.getServerCache().isFiltered() &&\r\n                            !overwrite.path.isEmpty());\r\n                newViewCache = this.applyServerOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.MERGE) {\r\n            var merge = operation;\r\n            if (merge.source.fromUser) {\r\n                newViewCache = this.applyUserMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                util.assert(merge.source.fromServer, 'Unknown source.');\r\n                // We filter the node if it's a tagged update or the node has been previously filtered\r\n                filterServerNode =\r\n                    merge.source.tagged || oldViewCache.getServerCache().isFiltered();\r\n                newViewCache = this.applyServerMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n            var ackUserWrite = operation;\r\n            if (!ackUserWrite.revert) {\r\n                newViewCache = this.ackUserWrite_(oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                newViewCache = this.revertUserWrite_(oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n            newViewCache = this.listenComplete_(oldViewCache, operation.path, writesCache, accumulator);\r\n        }\r\n        else {\r\n            throw util.assertionError('Unknown operation type: ' + operation.type);\r\n        }\r\n        var changes = accumulator.getChanges();\r\n        ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\r\n        return new ProcessorResult(newViewCache, changes);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!ViewCache} newViewCache\r\n     * @param {!Array.<!Change>} accumulator\r\n     * @private\r\n     */\r\n    ViewProcessor.maybeAddValueEvent_ = function (oldViewCache, newViewCache, accumulator) {\r\n        var eventSnap = newViewCache.getEventCache();\r\n        if (eventSnap.isFullyInitialized()) {\r\n            var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n            var oldCompleteSnap = oldViewCache.getCompleteEventSnap();\r\n            if (accumulator.length > 0 ||\r\n                !oldViewCache.getEventCache().isFullyInitialized() ||\r\n                (isLeafOrEmpty &&\r\n                    !eventSnap\r\n                        .getNode()\r\n                        .equals(/** @type {!Node} */ (oldCompleteSnap))) ||\r\n                !eventSnap\r\n                    .getNode()\r\n                    .getPriority()\r\n                    .equals(oldCompleteSnap.getPriority())) {\r\n                accumulator.push(Change.valueChange(\r\n                /** @type {!Node} */ newViewCache.getCompleteEventSnap()));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} changePath\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {!CompleteChildSource} source\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.generateEventCacheAfterServerEvent_ = function (viewCache, changePath, writesCache, source, accumulator) {\r\n        var oldEventSnap = viewCache.getEventCache();\r\n        if (writesCache.shadowingWrite(changePath) != null) {\r\n            // we have a shadowing write, ignore changes\r\n            return viewCache;\r\n        }\r\n        else {\r\n            var newEventCache = void 0, serverNode = void 0;\r\n            if (changePath.isEmpty()) {\r\n                // TODO: figure out how this plays with \"sliding ack windows\"\r\n                util.assert(viewCache.getServerCache().isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n                if (viewCache.getServerCache().isFiltered()) {\r\n                    // We need to special case this, because we need to only apply writes to complete children, or\r\n                    // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                    // writes cannot be guaranteed to be complete\r\n                    var serverCache = viewCache.getCompleteServerSnap();\r\n                    var completeChildren = serverCache instanceof ChildrenNode\r\n                        ? serverCache\r\n                        : ChildrenNode.EMPTY_NODE;\r\n                    var completeEventChildren = writesCache.calcCompleteEventChildren(completeChildren);\r\n                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeEventChildren, accumulator);\r\n                }\r\n                else {\r\n                    var completeNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeNode, accumulator);\r\n                }\r\n            }\r\n            else {\r\n                var childKey = changePath.getFront();\r\n                if (childKey == '.priority') {\r\n                    util.assert(changePath.getLength() == 1, \"Can't have a priority with additional path components\");\r\n                    var oldEventNode = oldEventSnap.getNode();\r\n                    serverNode = viewCache.getServerCache().getNode();\r\n                    // we might have overwrites for this priority\r\n                    var updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventNode, serverNode);\r\n                    if (updatedPriority != null) {\r\n                        newEventCache = this.filter_.updatePriority(oldEventNode, updatedPriority);\r\n                    }\r\n                    else {\r\n                        // priority didn't change, keep old node\r\n                        newEventCache = oldEventSnap.getNode();\r\n                    }\r\n                }\r\n                else {\r\n                    var childChangePath = changePath.popFront();\r\n                    // update child\r\n                    var newEventChild = void 0;\r\n                    if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                        serverNode = viewCache.getServerCache().getNode();\r\n                        var eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventSnap.getNode(), serverNode);\r\n                        if (eventChildUpdate != null) {\r\n                            newEventChild = oldEventSnap\r\n                                .getNode()\r\n                                .getImmediateChild(childKey)\r\n                                .updateChild(childChangePath, eventChildUpdate);\r\n                        }\r\n                        else {\r\n                            // Nothing changed, just keep the old child\r\n                            newEventChild = oldEventSnap\r\n                                .getNode()\r\n                                .getImmediateChild(childKey);\r\n                        }\r\n                    }\r\n                    else {\r\n                        newEventChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\r\n                    }\r\n                    if (newEventChild != null) {\r\n                        newEventCache = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                    }\r\n                    else {\r\n                        // no complete child available or no change\r\n                        newEventCache = oldEventSnap.getNode();\r\n                    }\r\n                }\r\n            }\r\n            return viewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized() || changePath.isEmpty(), this.filter_.filtersNodes());\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Path} changePath\r\n     * @param {!Node} changedSnap\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {boolean} filterServerNode\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyServerOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n        var oldServerSnap = oldViewCache.getServerCache();\r\n        var newServerCache;\r\n        var serverFilter = filterServerNode\r\n            ? this.filter_\r\n            : this.filter_.getIndexedFilter();\r\n        if (changePath.isEmpty()) {\r\n            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n        }\r\n        else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n            // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n            var newServerNode = oldServerSnap\r\n                .getNode()\r\n                .updateChild(changePath, changedSnap);\r\n            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n        }\r\n        else {\r\n            var childKey = changePath.getFront();\r\n            if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n                changePath.getLength() > 1) {\r\n                // We don't update incomplete nodes with updates intended for other listeners\r\n                return oldViewCache;\r\n            }\r\n            var childChangePath = changePath.popFront();\r\n            var childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n            var newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n            if (childKey == '.priority') {\r\n                newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n            }\r\n            else {\r\n                newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n            }\r\n        }\r\n        var newViewCache = oldViewCache.updateServerSnap(newServerCache, oldServerSnap.isFullyInitialized() || changePath.isEmpty(), serverFilter.filtersNodes());\r\n        var source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n        return this.generateEventCacheAfterServerEvent_(newViewCache, changePath, writesCache, source, accumulator);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Path} changePath\r\n     * @param {!Node} changedSnap\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyUserOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n        var oldEventSnap = oldViewCache.getEventCache();\r\n        var newViewCache, newEventCache;\r\n        var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n        if (changePath.isEmpty()) {\r\n            newEventCache = this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(), changedSnap, accumulator);\r\n            newViewCache = oldViewCache.updateEventSnap(newEventCache, true, this.filter_.filtersNodes());\r\n        }\r\n        else {\r\n            var childKey = changePath.getFront();\r\n            if (childKey === '.priority') {\r\n                newEventCache = this.filter_.updatePriority(oldViewCache.getEventCache().getNode(), changedSnap);\r\n                newViewCache = oldViewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n            }\r\n            else {\r\n                var childChangePath = changePath.popFront();\r\n                var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                var newChild = void 0;\r\n                if (childChangePath.isEmpty()) {\r\n                    // Child overwrite, we can replace the child\r\n                    newChild = changedSnap;\r\n                }\r\n                else {\r\n                    var childNode = source.getCompleteChild(childKey);\r\n                    if (childNode != null) {\r\n                        if (childChangePath.getBack() === '.priority' &&\r\n                            childNode.getChild(childChangePath.parent()).isEmpty()) {\r\n                            // This is a priority update on an empty node. If this node exists on the server, the\r\n                            // server will send down the priority in the update, so ignore for now\r\n                            newChild = childNode;\r\n                        }\r\n                        else {\r\n                            newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                        }\r\n                    }\r\n                    else {\r\n                        // There is no complete child node available\r\n                        newChild = ChildrenNode.EMPTY_NODE;\r\n                    }\r\n                }\r\n                if (!oldChild.equals(newChild)) {\r\n                    var newEventSnap = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                    newViewCache = oldViewCache.updateEventSnap(newEventSnap, oldEventSnap.isFullyInitialized(), this.filter_.filtersNodes());\r\n                }\r\n                else {\r\n                    newViewCache = oldViewCache;\r\n                }\r\n            }\r\n        }\r\n        return newViewCache;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {string} childKey\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    ViewProcessor.cacheHasChild_ = function (viewCache, childKey) {\r\n        return viewCache.getEventCache().isCompleteForChild(childKey);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {ImmutableTree.<!Node>} changedChildren\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyUserMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n        var _this = this;\r\n        // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n        // window leaving room for new items.  It's important we process these changes first, so we\r\n        // iterate the changes twice, first processing any that affect items currently in view.\r\n        // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n        // not the other.\r\n        var curViewCache = viewCache;\r\n        changedChildren.foreach(function (relativePath, childNode) {\r\n            var writePath = path.child(relativePath);\r\n            if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\r\n                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n            }\r\n        });\r\n        changedChildren.foreach(function (relativePath, childNode) {\r\n            var writePath = path.child(relativePath);\r\n            if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\r\n                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n            }\r\n        });\r\n        return curViewCache;\r\n    };\r\n    /**\r\n     * @param {!Node} node\r\n     * @param {ImmutableTree.<!Node>} merge\r\n     * @return {!Node}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyMerge_ = function (node, merge) {\r\n        merge.foreach(function (relativePath, childNode) {\r\n            node = node.updateChild(relativePath, childNode);\r\n        });\r\n        return node;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!ImmutableTree.<!Node>} changedChildren\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache\r\n     * @param {boolean} filterServerNode\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyServerMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n        var _this = this;\r\n        // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n        // wait for the complete data update coming soon.\r\n        if (viewCache\r\n            .getServerCache()\r\n            .getNode()\r\n            .isEmpty() &&\r\n            !viewCache.getServerCache().isFullyInitialized()) {\r\n            return viewCache;\r\n        }\r\n        // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n        // window leaving room for new items.  It's important we process these changes first, so we\r\n        // iterate the changes twice, first processing any that affect items currently in view.\r\n        // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n        // not the other.\r\n        var curViewCache = viewCache;\r\n        var viewMergeTree;\r\n        if (path.isEmpty()) {\r\n            viewMergeTree = changedChildren;\r\n        }\r\n        else {\r\n            viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);\r\n        }\r\n        var serverNode = viewCache.getServerCache().getNode();\r\n        viewMergeTree.children.inorderTraversal(function (childKey, childTree) {\r\n            if (serverNode.hasChild(childKey)) {\r\n                var serverChild = viewCache\r\n                    .getServerCache()\r\n                    .getNode()\r\n                    .getImmediateChild(childKey);\r\n                var newChild = _this.applyMerge_(serverChild, childTree);\r\n                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n            }\r\n        });\r\n        viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {\r\n            var isUnknownDeepMerge = !viewCache.getServerCache().isCompleteForChild(childKey) &&\r\n                childMergeTree.value == null;\r\n            if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n                var serverChild = viewCache\r\n                    .getServerCache()\r\n                    .getNode()\r\n                    .getImmediateChild(childKey);\r\n                var newChild = _this.applyMerge_(serverChild, childMergeTree);\r\n                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n            }\r\n        });\r\n        return curViewCache;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} ackPath\r\n     * @param {!ImmutableTree<!boolean>} affectedTree\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.ackUserWrite_ = function (viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n        if (writesCache.shadowingWrite(ackPath) != null) {\r\n            return viewCache;\r\n        }\r\n        // Only filter server node if it is currently filtered\r\n        var filterServerNode = viewCache.getServerCache().isFiltered();\r\n        // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n        // now that it won't be shadowed.\r\n        var serverCache = viewCache.getServerCache();\r\n        if (affectedTree.value != null) {\r\n            // This is an overwrite.\r\n            if ((ackPath.isEmpty() && serverCache.isFullyInitialized()) ||\r\n                serverCache.isCompleteForPath(ackPath)) {\r\n                return this.applyServerOverwrite_(viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n            else if (ackPath.isEmpty()) {\r\n                // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n                // should just re-apply whatever we have in our cache as a merge.\r\n                var changedChildren_1 = ImmutableTree.Empty;\r\n                serverCache.getNode().forEachChild(KEY_INDEX, function (name, node) {\r\n                    changedChildren_1 = changedChildren_1.set(new Path(name), node);\r\n                });\r\n                return this.applyServerMerge_(viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n            else {\r\n                return viewCache;\r\n            }\r\n        }\r\n        else {\r\n            // This is a merge.\r\n            var changedChildren_2 = ImmutableTree.Empty;\r\n            affectedTree.foreach(function (mergePath, value) {\r\n                var serverCachePath = ackPath.child(mergePath);\r\n                if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                    changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n                }\r\n            });\r\n            return this.applyServerMerge_(viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.listenComplete_ = function (viewCache, path, writesCache, accumulator) {\r\n        var oldServerNode = viewCache.getServerCache();\r\n        var newViewCache = viewCache.updateServerSnap(oldServerNode.getNode(), oldServerNode.isFullyInitialized() || path.isEmpty(), oldServerNode.isFiltered());\r\n        return this.generateEventCacheAfterServerEvent_(newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeServerCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.revertUserWrite_ = function (viewCache, path, writesCache, completeServerCache, accumulator) {\r\n        var complete;\r\n        if (writesCache.shadowingWrite(path) != null) {\r\n            return viewCache;\r\n        }\r\n        else {\r\n            var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n            var oldEventCache = viewCache.getEventCache().getNode();\r\n            var newEventCache = void 0;\r\n            if (path.isEmpty() || path.getFront() === '.priority') {\r\n                var newNode = void 0;\r\n                if (viewCache.getServerCache().isFullyInitialized()) {\r\n                    newNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                }\r\n                else {\r\n                    var serverChildren = viewCache.getServerCache().getNode();\r\n                    util.assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                    newNode = writesCache.calcCompleteEventChildren(serverChildren);\r\n                }\r\n                newNode = newNode;\r\n                newEventCache = this.filter_.updateFullNode(oldEventCache, newNode, accumulator);\r\n            }\r\n            else {\r\n                var childKey = path.getFront();\r\n                var newChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\r\n                if (newChild == null &&\r\n                    viewCache.getServerCache().isCompleteForChild(childKey)) {\r\n                    newChild = oldEventCache.getImmediateChild(childKey);\r\n                }\r\n                if (newChild != null) {\r\n                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, newChild, path.popFront(), source, accumulator);\r\n                }\r\n                else if (viewCache\r\n                    .getEventCache()\r\n                    .getNode()\r\n                    .hasChild(childKey)) {\r\n                    // No complete child available, delete the existing one, if any\r\n                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, path.popFront(), source, accumulator);\r\n                }\r\n                else {\r\n                    newEventCache = oldEventCache;\r\n                }\r\n                if (newEventCache.isEmpty() &&\r\n                    viewCache.getServerCache().isFullyInitialized()) {\r\n                    // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                    complete = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                    if (complete.isLeafNode()) {\r\n                        newEventCache = this.filter_.updateFullNode(newEventCache, complete, accumulator);\r\n                    }\r\n                }\r\n            }\r\n            complete =\r\n                viewCache.getServerCache().isFullyInitialized() ||\r\n                    writesCache.shadowingWrite(Path.Empty) != null;\r\n            return viewCache.updateEventSnap(newEventCache, complete, this.filter_.filtersNodes());\r\n        }\r\n    };\r\n    return ViewProcessor;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n * @constructor\r\n */\r\nvar EventGenerator = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Query} query_\r\n     */\r\n    function EventGenerator(query_) {\r\n        this.query_ = query_;\r\n        /**\r\n         * @private\r\n         * @type {!Index}\r\n         */\r\n        this.index_ = this.query_.getQueryParams().getIndex();\r\n    }\r\n    /**\r\n     * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n     * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n     *\r\n     * Notes:\r\n     *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n     *    our index.\r\n     *  - prevName will be calculated based on the index ordering.\r\n     *\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Node} eventCache\r\n     * @param {!Array.<!EventRegistration>} eventRegistrations\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {\r\n        var _this = this;\r\n        var events = [];\r\n        var moves = [];\r\n        changes.forEach(function (change) {\r\n            if (change.type === Change.CHILD_CHANGED &&\r\n                _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n                moves.push(Change.childMovedChange(change.childName, change.snapshotNode));\r\n            }\r\n        });\r\n        this.generateEventsForType_(events, Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_ADDED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_MOVED, moves, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.VALUE, changes, eventRegistrations, eventCache);\r\n        return events;\r\n    };\r\n    /**\r\n     * Given changes of a single change type, generate the corresponding events.\r\n     *\r\n     * @param {!Array.<!Event>} events\r\n     * @param {!string} eventType\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Array.<!EventRegistration>} registrations\r\n     * @param {!Node} eventCache\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {\r\n        var _this = this;\r\n        var filteredChanges = changes.filter(function (change) { return change.type === eventType; });\r\n        filteredChanges.sort(this.compareChanges_.bind(this));\r\n        filteredChanges.forEach(function (change) {\r\n            var materializedChange = _this.materializeSingleChange_(change, eventCache);\r\n            registrations.forEach(function (registration) {\r\n                if (registration.respondsTo(change.type)) {\r\n                    events.push(registration.createEvent(materializedChange, _this.query_));\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Change} change\r\n     * @param {!Node} eventCache\r\n     * @return {!Change}\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {\r\n        if (change.type === 'value' || change.type === 'child_removed') {\r\n            return change;\r\n        }\r\n        else {\r\n            change.prevName = eventCache.getPredecessorChildName(\r\n            /** @type {!string} */\r\n            change.childName, change.snapshotNode, this.index_);\r\n            return change;\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Change} a\r\n     * @param {!Change} b\r\n     * @return {number}\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.compareChanges_ = function (a, b) {\r\n        if (a.childName == null || b.childName == null) {\r\n            throw util.assertionError('Should only compare child_ events.');\r\n        }\r\n        var aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n        var bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n        return this.index_.compare(aWrapped, bWrapped);\r\n    };\r\n    return EventGenerator;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n * @constructor\r\n */\r\nvar View = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Query} query_\r\n     * @param {!ViewCache} initialViewCache\r\n     */\r\n    function View(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        var params = this.query_.getQueryParams();\r\n        var indexFilter = new IndexedFilter(params.getIndex());\r\n        var filter = params.getNodeFilter();\r\n        /**\r\n         * @type {ViewProcessor}\r\n         * @private\r\n         */\r\n        this.processor_ = new ViewProcessor(filter);\r\n        var initialServerCache = initialViewCache.getServerCache();\r\n        var initialEventCache = initialViewCache.getEventCache();\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        /**\r\n         * @type {!ViewCache}\r\n         * @private\r\n         */\r\n        this.viewCache_ = new ViewCache(newEventCache, newServerCache);\r\n        /**\r\n         * @type {!EventGenerator}\r\n         * @private\r\n         */\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    /**\r\n     * @return {!Query}\r\n     */\r\n    View.prototype.getQuery = function () {\r\n        return this.query_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    View.prototype.getServerCache = function () {\r\n        return this.viewCache_.getServerCache().getNode();\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    View.prototype.getCompleteServerCache = function (path) {\r\n        var cache = this.viewCache_.getCompleteServerSnap();\r\n        if (cache) {\r\n            // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n            // we need to see if it contains the child we're interested in.\r\n            if (this.query_.getQueryParams().loadsAllData() ||\r\n                (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())) {\r\n                return cache.getChild(path);\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    View.prototype.isEmpty = function () {\r\n        return this.eventRegistrations_.length === 0;\r\n    };\r\n    /**\r\n     * @param {!EventRegistration} eventRegistration\r\n     */\r\n    View.prototype.addEventRegistration = function (eventRegistration) {\r\n        this.eventRegistrations_.push(eventRegistration);\r\n    };\r\n    /**\r\n     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\r\n     */\r\n    View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {\r\n        var cancelEvents = [];\r\n        if (cancelError) {\r\n            util.assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n            var path_1 = this.query_.path;\r\n            this.eventRegistrations_.forEach(function (registration) {\r\n                cancelError /** @type {!Error} */ = cancelError;\r\n                var maybeEvent = registration.createCancelEvent(cancelError, path_1);\r\n                if (maybeEvent) {\r\n                    cancelEvents.push(maybeEvent);\r\n                }\r\n            });\r\n        }\r\n        if (eventRegistration) {\r\n            var remaining = [];\r\n            for (var i = 0; i < this.eventRegistrations_.length; ++i) {\r\n                var existing = this.eventRegistrations_[i];\r\n                if (!existing.matches(eventRegistration)) {\r\n                    remaining.push(existing);\r\n                }\r\n                else if (eventRegistration.hasAnyCallback()) {\r\n                    // We're removing just this one\r\n                    remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\r\n                    break;\r\n                }\r\n            }\r\n            this.eventRegistrations_ = remaining;\r\n        }\r\n        else {\r\n            this.eventRegistrations_ = [];\r\n        }\r\n        return cancelEvents;\r\n    };\r\n    /**\r\n     * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n     *\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeServerCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {\r\n        if (operation.type === OperationType.MERGE &&\r\n            operation.source.queryId !== null) {\r\n            util.assert(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');\r\n            util.assert(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');\r\n        }\r\n        var oldViewCache = this.viewCache_;\r\n        var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);\r\n        this.processor_.assertIndexed(result.viewCache);\r\n        util.assert(result.viewCache.getServerCache().isFullyInitialized() ||\r\n            !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n        this.viewCache_ = result.viewCache;\r\n        return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);\r\n    };\r\n    /**\r\n     * @param {!EventRegistration} registration\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.getInitialEvents = function (registration) {\r\n        var eventSnap = this.viewCache_.getEventCache();\r\n        var initialChanges = [];\r\n        if (!eventSnap.getNode().isLeafNode()) {\r\n            var eventNode = eventSnap.getNode();\r\n            eventNode.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                initialChanges.push(Change.childAddedChange(key, childNode));\r\n            });\r\n        }\r\n        if (eventSnap.isFullyInitialized()) {\r\n            initialChanges.push(Change.valueChange(eventSnap.getNode()));\r\n        }\r\n        return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Node} eventCache\r\n     * @param {EventRegistration=} eventRegistration\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {\r\n        var registrations = eventRegistration\r\n            ? [eventRegistration]\r\n            : this.eventRegistrations_;\r\n        return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);\r\n    };\r\n    return View;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nvar SyncPoint = /** @class */ (function () {\r\n    function SyncPoint() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         *\r\n         * @type {!Object.<!string, !View>}\r\n         * @private\r\n         */\r\n        this.views_ = {};\r\n    }\r\n    Object.defineProperty(SyncPoint, \"__referenceConstructor\", {\r\n        get: function () {\r\n            util.assert(__referenceConstructor$1, 'Reference.ts has not been loaded');\r\n            return __referenceConstructor$1;\r\n        },\r\n        set: function (val) {\r\n            util.assert(!__referenceConstructor$1, '__referenceConstructor has already been defined');\r\n            __referenceConstructor$1 = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    SyncPoint.prototype.isEmpty = function () {\r\n        return util.isEmpty(this.views_);\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} optCompleteServerCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    SyncPoint.prototype.applyOperation = function (operation, writesCache, optCompleteServerCache) {\r\n        var queryId = operation.source.queryId;\r\n        if (queryId !== null) {\r\n            var view = util.safeGet(this.views_, queryId);\r\n            util.assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n            return view.applyOperation(operation, writesCache, optCompleteServerCache);\r\n        }\r\n        else {\r\n            var events_1 = [];\r\n            util.forEach(this.views_, function (key, view) {\r\n                events_1 = events_1.concat(view.applyOperation(operation, writesCache, optCompleteServerCache));\r\n            });\r\n            return events_1;\r\n        }\r\n    };\r\n    /**\r\n     * Add an event callback for the specified query.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache Complete server cache, if we have it.\r\n     * @param {boolean} serverCacheComplete\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncPoint.prototype.addEventRegistration = function (query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n        var queryId = query.queryIdentifier();\r\n        var view = util.safeGet(this.views_, queryId);\r\n        if (!view) {\r\n            // TODO: make writesCache take flag for complete server node\r\n            var eventCache = writesCache.calcCompleteEventCache(serverCacheComplete ? serverCache : null);\r\n            var eventCacheComplete = false;\r\n            if (eventCache) {\r\n                eventCacheComplete = true;\r\n            }\r\n            else if (serverCache instanceof ChildrenNode) {\r\n                eventCache = writesCache.calcCompleteEventChildren(serverCache);\r\n                eventCacheComplete = false;\r\n            }\r\n            else {\r\n                eventCache = ChildrenNode.EMPTY_NODE;\r\n                eventCacheComplete = false;\r\n            }\r\n            var viewCache = new ViewCache(new CacheNode(\r\n            /** @type {!Node} */ (eventCache), eventCacheComplete, false), new CacheNode(\r\n            /** @type {!Node} */ (serverCache), serverCacheComplete, false));\r\n            view = new View(query, viewCache);\r\n            this.views_[queryId] = view;\r\n        }\r\n        // This is guaranteed to exist now, we just created anything that was missing\r\n        view.addEventRegistration(eventRegistration);\r\n        return view.getInitialEvents(eventRegistration);\r\n    };\r\n    /**\r\n     * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n     *\r\n     * If query is the default query, we'll check all views for the specified eventRegistration.\r\n     * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n     *\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events\r\n     */\r\n    SyncPoint.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\r\n        var queryId = query.queryIdentifier();\r\n        var removed = [];\r\n        var cancelEvents = [];\r\n        var hadCompleteView = this.hasCompleteView();\r\n        if (queryId === 'default') {\r\n            // When you do ref.off(...), we search all views for the registration to remove.\r\n            var self_1 = this;\r\n            util.forEach(this.views_, function (viewQueryId, view) {\r\n                cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\r\n                if (view.isEmpty()) {\r\n                    delete self_1.views_[viewQueryId];\r\n                    // We'll deal with complete views later.\r\n                    if (!view\r\n                        .getQuery()\r\n                        .getQueryParams()\r\n                        .loadsAllData()) {\r\n                        removed.push(view.getQuery());\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            // remove the callback from the specific view.\r\n            var view = util.safeGet(this.views_, queryId);\r\n            if (view) {\r\n                cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\r\n                if (view.isEmpty()) {\r\n                    delete this.views_[queryId];\r\n                    // We'll deal with complete views later.\r\n                    if (!view\r\n                        .getQuery()\r\n                        .getQueryParams()\r\n                        .loadsAllData()) {\r\n                        removed.push(view.getQuery());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (hadCompleteView && !this.hasCompleteView()) {\r\n            // We removed our last complete view.\r\n            removed.push(new SyncPoint.__referenceConstructor(query.repo, query.path));\r\n        }\r\n        return { removed: removed, events: cancelEvents };\r\n    };\r\n    /**\r\n     * @return {!Array.<!View>}\r\n     */\r\n    SyncPoint.prototype.getQueryViews = function () {\r\n        var _this = this;\r\n        var values = Object.keys(this.views_).map(function (key) { return _this.views_[key]; });\r\n        return values.filter(function (view) {\r\n            return !view\r\n                .getQuery()\r\n                .getQueryParams()\r\n                .loadsAllData();\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Path} path The path to the desired complete snapshot\r\n     * @return {?Node} A complete cache, if it exists\r\n     */\r\n    SyncPoint.prototype.getCompleteServerCache = function (path) {\r\n        var serverCache = null;\r\n        util.forEach(this.views_, function (key, view) {\r\n            serverCache = serverCache || view.getCompleteServerCache(path);\r\n        });\r\n        return serverCache;\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @return {?View}\r\n     */\r\n    SyncPoint.prototype.viewForQuery = function (query) {\r\n        var params = query.getQueryParams();\r\n        if (params.loadsAllData()) {\r\n            return this.getCompleteView();\r\n        }\r\n        else {\r\n            var queryId = query.queryIdentifier();\r\n            return util.safeGet(this.views_, queryId);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @return {boolean}\r\n     */\r\n    SyncPoint.prototype.viewExistsForQuery = function (query) {\r\n        return this.viewForQuery(query) != null;\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    SyncPoint.prototype.hasCompleteView = function () {\r\n        return this.getCompleteView() != null;\r\n    };\r\n    /**\r\n     * @return {?View}\r\n     */\r\n    SyncPoint.prototype.getCompleteView = function () {\r\n        var completeView = util.findValue(this.views_, function (view) {\r\n            return view\r\n                .getQuery()\r\n                .getQueryParams()\r\n                .loadsAllData();\r\n        });\r\n        return completeView || null;\r\n    };\r\n    return SyncPoint;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n *\r\n * @constructor\r\n * @param {!ImmutableTree.<!Node>} writeTree\r\n */\r\nvar CompoundWrite = /** @class */ (function () {\r\n    function CompoundWrite(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!Node} node\r\n     * @return {!CompoundWrite}\r\n     */\r\n    CompoundWrite.prototype.addWrite = function (path, node) {\r\n        if (path.isEmpty()) {\r\n            return new CompoundWrite(new ImmutableTree(node));\r\n        }\r\n        else {\r\n            var rootmost = this.writeTree_.findRootMostValueAndPath(path);\r\n            if (rootmost != null) {\r\n                var rootMostPath = rootmost.path;\r\n                var value = rootmost.value;\r\n                var relativePath = Path.relativePath(rootMostPath, path);\r\n                value = value.updateChild(relativePath, node);\r\n                return new CompoundWrite(this.writeTree_.set(rootMostPath, value));\r\n            }\r\n            else {\r\n                var subtree = new ImmutableTree(node);\r\n                var newWriteTree = this.writeTree_.setTree(path, subtree);\r\n                return new CompoundWrite(newWriteTree);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} updates\r\n     * @return {!CompoundWrite}\r\n     */\r\n    CompoundWrite.prototype.addWrites = function (path, updates) {\r\n        var newWrite = this;\r\n        util.forEach(updates, function (childKey, node) {\r\n            newWrite = newWrite.addWrite(path.child(childKey), node);\r\n        });\r\n        return newWrite;\r\n    };\r\n    /**\r\n     * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n     * location, which must be removed by calling this method with that path.\r\n     *\r\n     * @param {!Path} path The path at which a write and all deeper writes should be removed\r\n     * @return {!CompoundWrite} The new CompoundWrite with the removed path\r\n     */\r\n    CompoundWrite.prototype.removeWrite = function (path) {\r\n        if (path.isEmpty()) {\r\n            return CompoundWrite.Empty;\r\n        }\r\n        else {\r\n            var newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    };\r\n    /**\r\n     * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n     * considered \"complete\".\r\n     *\r\n     * @param {!Path} path The path to check for\r\n     * @return {boolean} Whether there is a complete write at that path\r\n     */\r\n    CompoundWrite.prototype.hasCompleteWrite = function (path) {\r\n        return this.getCompleteNode(path) != null;\r\n    };\r\n    /**\r\n     * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n     * writes from deeper paths, but will return child nodes from a more shallow path.\r\n     *\r\n     * @param {!Path} path The path to get a complete write\r\n     * @return {?Node} The node if complete at that path, or null otherwise.\r\n     */\r\n    CompoundWrite.prototype.getCompleteNode = function (path) {\r\n        var rootmost = this.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            return this.writeTree_\r\n                .get(rootmost.path)\r\n                .getChild(Path.relativePath(rootmost.path, path));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Returns all children that are guaranteed to be a complete overwrite.\r\n     *\r\n     * @return {!Array.<NamedNode>} A list of all complete children.\r\n     */\r\n    CompoundWrite.prototype.getCompleteChildren = function () {\r\n        var children = [];\r\n        var node = this.writeTree_.value;\r\n        if (node != null) {\r\n            // If it's a leaf node, it has no children; so nothing to do.\r\n            if (!node.isLeafNode()) {\r\n                node.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n                    children.push(new NamedNode(childName, childNode));\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            this.writeTree_.children.inorderTraversal(function (childName, childTree) {\r\n                if (childTree.value != null) {\r\n                    children.push(new NamedNode(childName, childTree.value));\r\n                }\r\n            });\r\n        }\r\n        return children;\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @return {!CompoundWrite}\r\n     */\r\n    CompoundWrite.prototype.childCompoundWrite = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            var shadowingNode = this.getCompleteNode(path);\r\n            if (shadowingNode != null) {\r\n                return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n            }\r\n            else {\r\n                return new CompoundWrite(this.writeTree_.subtree(path));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n     * @return {boolean} Whether this CompoundWrite is empty\r\n     */\r\n    CompoundWrite.prototype.isEmpty = function () {\r\n        return this.writeTree_.isEmpty();\r\n    };\r\n    /**\r\n     * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n     * node\r\n     * @param {!Node} node The node to apply this CompoundWrite to\r\n     * @return {!Node} The node with all writes applied\r\n     */\r\n    CompoundWrite.prototype.apply = function (node) {\r\n        return CompoundWrite.applySubtreeWrite_(Path.Empty, this.writeTree_, node);\r\n    };\r\n    /**\r\n     * @type {!CompoundWrite}\r\n     */\r\n    CompoundWrite.Empty = new CompoundWrite(new ImmutableTree(null));\r\n    /**\r\n     * @param {!Path} relativePath\r\n     * @param {!ImmutableTree.<!Node>} writeTree\r\n     * @param {!Node} node\r\n     * @return {!Node}\r\n     * @private\r\n     */\r\n    CompoundWrite.applySubtreeWrite_ = function (relativePath, writeTree, node) {\r\n        if (writeTree.value != null) {\r\n            // Since there a write is always a leaf, we're done here\r\n            return node.updateChild(relativePath, writeTree.value);\r\n        }\r\n        else {\r\n            var priorityWrite_1 = null;\r\n            writeTree.children.inorderTraversal(function (childKey, childTree) {\r\n                if (childKey === '.priority') {\r\n                    // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                    // to apply priorities to empty nodes that are later filled\r\n                    util.assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                    priorityWrite_1 = childTree.value;\r\n                }\r\n                else {\r\n                    node = CompoundWrite.applySubtreeWrite_(relativePath.child(childKey), childTree, node);\r\n                }\r\n            });\r\n            // If there was a priority write, we only apply it if the node is not empty\r\n            if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {\r\n                node = node.updateChild(relativePath.child('.priority'), priorityWrite_1);\r\n            }\r\n            return node;\r\n        }\r\n    };\r\n    return CompoundWrite;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\r\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\r\n * and addMerge(), and removed with removeWrite().\r\n *\r\n * @constructor\r\n */\r\nvar WriteTree = /** @class */ (function () {\r\n    function WriteTree() {\r\n        /**\r\n         * A tree tracking the result of applying all visible writes.  This does not include transactions with\r\n         * applyLocally=false or writes that are completely shadowed by other writes.\r\n         *\r\n         * @type {!CompoundWrite}\r\n         * @private\r\n         */\r\n        this.visibleWrites_ = CompoundWrite.Empty;\r\n        /**\r\n         * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\r\n         * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\r\n         * used by transactions).\r\n         *\r\n         * @type {!Array.<!WriteRecord>}\r\n         * @private\r\n         */\r\n        this.allWrites_ = [];\r\n        this.lastWriteId_ = -1;\r\n    }\r\n    /**\r\n     * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {!WriteTreeRef}\r\n     */\r\n    WriteTree.prototype.childWrites = function (path) {\r\n        return new WriteTreeRef(path, this);\r\n    };\r\n    /**\r\n     * Record a new overwrite from user code.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} snap\r\n     * @param {!number} writeId\r\n     * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\r\n     */\r\n    WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {\r\n        util.assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');\r\n        if (visible === undefined) {\r\n            visible = true;\r\n        }\r\n        this.allWrites_.push({\r\n            path: path,\r\n            snap: snap,\r\n            writeId: writeId,\r\n            visible: visible\r\n        });\r\n        if (visible) {\r\n            this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\r\n        }\r\n        this.lastWriteId_ = writeId;\r\n    };\r\n    /**\r\n     * Record a new merge from user code.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} writeId\r\n     */\r\n    WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {\r\n        util.assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');\r\n        this.allWrites_.push({\r\n            path: path,\r\n            children: changedChildren,\r\n            writeId: writeId,\r\n            visible: true\r\n        });\r\n        this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\r\n        this.lastWriteId_ = writeId;\r\n    };\r\n    /**\r\n     * @param {!number} writeId\r\n     * @return {?WriteRecord}\r\n     */\r\n    WriteTree.prototype.getWrite = function (writeId) {\r\n        for (var i = 0; i < this.allWrites_.length; i++) {\r\n            var record = this.allWrites_[i];\r\n            if (record.writeId === writeId) {\r\n                return record;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n     * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n     *\r\n     * @param {!number} writeId\r\n     * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n     * events as a result).\r\n     */\r\n    WriteTree.prototype.removeWrite = function (writeId) {\r\n        // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n        // out of order.\r\n        //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n        //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n        var _this = this;\r\n        var idx = this.allWrites_.findIndex(function (s) {\r\n            return s.writeId === writeId;\r\n        });\r\n        util.assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n        var writeToRemove = this.allWrites_[idx];\r\n        this.allWrites_.splice(idx, 1);\r\n        var removedWriteWasVisible = writeToRemove.visible;\r\n        var removedWriteOverlapsWithOtherWrites = false;\r\n        var i = this.allWrites_.length - 1;\r\n        while (removedWriteWasVisible && i >= 0) {\r\n            var currentWrite = this.allWrites_[i];\r\n            if (currentWrite.visible) {\r\n                if (i >= idx &&\r\n                    this.recordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                    // The removed write was completely shadowed by a subsequent write.\r\n                    removedWriteWasVisible = false;\r\n                }\r\n                else if (writeToRemove.path.contains(currentWrite.path)) {\r\n                    // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                    removedWriteOverlapsWithOtherWrites = true;\r\n                }\r\n            }\r\n            i--;\r\n        }\r\n        if (!removedWriteWasVisible) {\r\n            return false;\r\n        }\r\n        else if (removedWriteOverlapsWithOtherWrites) {\r\n            // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n            this.resetTree_();\r\n            return true;\r\n        }\r\n        else {\r\n            // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n            if (writeToRemove.snap) {\r\n                this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);\r\n            }\r\n            else {\r\n                var children = writeToRemove.children;\r\n                util.forEach(children, function (childName) {\r\n                    _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));\r\n                });\r\n            }\r\n            return true;\r\n        }\r\n    };\r\n    /**\r\n     * Return a complete snapshot for the given path if there's visible write data at that path, else null.\r\n     * No server data is considered.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.getCompleteWriteData = function (path) {\r\n        return this.visibleWrites_.getCompleteNode(path);\r\n    };\r\n    /**\r\n     * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n     * writes), attempt to calculate a complete snapshot for the given path\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?Node} completeServerCache\r\n     * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\r\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n        if (!writeIdsToExclude && !includeHiddenWrites) {\r\n            var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\r\n            if (shadowingNode != null) {\r\n                return shadowingNode;\r\n            }\r\n            else {\r\n                var subMerge = this.visibleWrites_.childCompoundWrite(treePath);\r\n                if (subMerge.isEmpty()) {\r\n                    return completeServerCache;\r\n                }\r\n                else if (completeServerCache == null &&\r\n                    !subMerge.hasCompleteWrite(Path.Empty)) {\r\n                    // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                    return null;\r\n                }\r\n                else {\r\n                    var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                    return subMerge.apply(layeredCache);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n            if (!includeHiddenWrites && merge.isEmpty()) {\r\n                return completeServerCache;\r\n            }\r\n            else {\r\n                // If the server cache is null, and we don't have a complete cache, we need to return null\r\n                if (!includeHiddenWrites &&\r\n                    completeServerCache == null &&\r\n                    !merge.hasCompleteWrite(Path.Empty)) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    var filter = function (write) {\r\n                        return ((write.visible || includeHiddenWrites) &&\r\n                            (!writeIdsToExclude ||\r\n                                !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                            (write.path.contains(treePath) || treePath.contains(write.path)));\r\n                    };\r\n                    var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);\r\n                    var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                    return mergeAtPath.apply(layeredCache);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n     * Used when creating new views, to pre-fill their complete event children snapshot.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?ChildrenNode} completeServerChildren\r\n     * @return {!ChildrenNode}\r\n     */\r\n    WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {\r\n        var completeChildren = ChildrenNode.EMPTY_NODE;\r\n        var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\r\n        if (topLevelSet) {\r\n            if (!topLevelSet.isLeafNode()) {\r\n                // we're shadowing everything. Return the children.\r\n                topLevelSet.forEachChild(PRIORITY_INDEX, function (childName, childSnap) {\r\n                    completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n                });\r\n            }\r\n            return completeChildren;\r\n        }\r\n        else if (completeServerChildren) {\r\n            // Layer any children we have on top of this\r\n            // We know we don't have a top-level set, so just enumerate existing children\r\n            var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);\r\n            completeServerChildren.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n                var node = merge_1\r\n                    .childCompoundWrite(new Path(childName))\r\n                    .apply(childNode);\r\n                completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n            });\r\n            // Add any complete children we have from the set\r\n            merge_1.getCompleteChildren().forEach(function (namedNode) {\r\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n            });\r\n            return completeChildren;\r\n        }\r\n        else {\r\n            // We don't have anything to layer on top of. Layer on any children we have\r\n            // Note that we can return an empty snap if we have a defined delete\r\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n            merge.getCompleteChildren().forEach(function (namedNode) {\r\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n            });\r\n            return completeChildren;\r\n        }\r\n    };\r\n    /**\r\n     * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n     * applied to the event cache.\r\n     *\r\n     * Possibilities:\r\n     *\r\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n     *\r\n     * 2. Some write is completely shadowing. No events to be raised\r\n     *\r\n     * 3. Is partially shadowed. Events\r\n     *\r\n     * Either existingEventSnap or existingServerSnap must exist\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {!Path} childPath\r\n     * @param {?Node} existingEventSnap\r\n     * @param {?Node} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {\r\n        util.assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n        var path = treePath.child(childPath);\r\n        if (this.visibleWrites_.hasCompleteWrite(path)) {\r\n            // At this point we can probably guarantee that we're in case 2, meaning no events\r\n            // May need to check visibility while doing the findRootMostValueAndPath call\r\n            return null;\r\n        }\r\n        else {\r\n            // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n            var childMerge = this.visibleWrites_.childCompoundWrite(path);\r\n            if (childMerge.isEmpty()) {\r\n                // We're not shadowing at all. Case 1\r\n                return existingServerSnap.getChild(childPath);\r\n            }\r\n            else {\r\n                // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n                // However this is tricky to find out, since user updates don't necessary change the server\r\n                // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n                // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n                // only check if the updates change the serverNode.\r\n                // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n                return childMerge.apply(existingServerSnap.getChild(childPath));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n     * complete child for this ChildKey.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {!string} childKey\r\n     * @param {!CacheNode} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {\r\n        var path = treePath.child(childKey);\r\n        var shadowingNode = this.visibleWrites_.getCompleteNode(path);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            if (existingServerSnap.isCompleteForChild(childKey)) {\r\n                var childMerge = this.visibleWrites_.childCompoundWrite(path);\r\n                return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n     * a higher path, this will return the child of that write relative to the write and this path.\r\n     * Returns null if there is no write at this path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.shadowingWrite = function (path) {\r\n        return this.visibleWrites_.getCompleteNode(path);\r\n    };\r\n    /**\r\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n     * the window, but may now be in the window.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?Node} completeServerData\r\n     * @param {!NamedNode} startPost\r\n     * @param {!number} count\r\n     * @param {boolean} reverse\r\n     * @param {!Index} index\r\n     * @return {!Array.<!NamedNode>}\r\n     */\r\n    WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {\r\n        var toIterate;\r\n        var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n        var shadowingNode = merge.getCompleteNode(Path.Empty);\r\n        if (shadowingNode != null) {\r\n            toIterate = shadowingNode;\r\n        }\r\n        else if (completeServerData != null) {\r\n            toIterate = merge.apply(completeServerData);\r\n        }\r\n        else {\r\n            // no children to iterate on\r\n            return [];\r\n        }\r\n        toIterate = toIterate.withIndex(index);\r\n        if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n            var nodes = [];\r\n            var cmp = index.getCompare();\r\n            var iter = reverse\r\n                ? toIterate.getReverseIteratorFrom(startPost, index)\r\n                : toIterate.getIteratorFrom(startPost, index);\r\n            var next = iter.getNext();\r\n            while (next && nodes.length < count) {\r\n                if (cmp(next, startPost) !== 0) {\r\n                    nodes.push(next);\r\n                }\r\n                next = iter.getNext();\r\n            }\r\n            return nodes;\r\n        }\r\n        else {\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * @param {!WriteRecord} writeRecord\r\n     * @param {!Path} path\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {\r\n        if (writeRecord.snap) {\r\n            return writeRecord.path.contains(path);\r\n        }\r\n        else {\r\n            // findKey can return undefined, so use !! to coerce to boolean\r\n            return !!util.findKey(writeRecord.children, function (childSnap, childName) {\r\n                return writeRecord.path.child(childName).contains(path);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n     * @private\r\n     */\r\n    WriteTree.prototype.resetTree_ = function () {\r\n        this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path.Empty);\r\n        if (this.allWrites_.length > 0) {\r\n            this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\r\n        }\r\n        else {\r\n            this.lastWriteId_ = -1;\r\n        }\r\n    };\r\n    /**\r\n     * The default filter used when constructing the tree. Keep everything that's visible.\r\n     *\r\n     * @param {!WriteRecord} write\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    WriteTree.DefaultFilter_ = function (write) {\r\n        return write.visible;\r\n    };\r\n    /**\r\n     * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n     * event data at that path.\r\n     *\r\n     * @param {!Array.<!WriteRecord>} writes\r\n     * @param {!function(!WriteRecord):boolean} filter\r\n     * @param {!Path} treeRoot\r\n     * @return {!CompoundWrite}\r\n     * @private\r\n     */\r\n    WriteTree.layerTree_ = function (writes, filter, treeRoot) {\r\n        var compoundWrite = CompoundWrite.Empty;\r\n        for (var i = 0; i < writes.length; ++i) {\r\n            var write = writes[i];\r\n            // Theory, a later set will either:\r\n            // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n            // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n            if (filter(write)) {\r\n                var writePath = write.path;\r\n                var relativePath = void 0;\r\n                if (write.snap) {\r\n                    if (treeRoot.contains(writePath)) {\r\n                        relativePath = Path.relativePath(treeRoot, writePath);\r\n                        compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\r\n                    }\r\n                    else if (writePath.contains(treeRoot)) {\r\n                        relativePath = Path.relativePath(writePath, treeRoot);\r\n                        compoundWrite = compoundWrite.addWrite(Path.Empty, write.snap.getChild(relativePath));\r\n                    }\r\n                    else {\r\n                        // There is no overlap between root path and write path, ignore write\r\n                    }\r\n                }\r\n                else if (write.children) {\r\n                    if (treeRoot.contains(writePath)) {\r\n                        relativePath = Path.relativePath(treeRoot, writePath);\r\n                        compoundWrite = compoundWrite.addWrites(relativePath, write.children);\r\n                    }\r\n                    else if (writePath.contains(treeRoot)) {\r\n                        relativePath = Path.relativePath(writePath, treeRoot);\r\n                        if (relativePath.isEmpty()) {\r\n                            compoundWrite = compoundWrite.addWrites(Path.Empty, write.children);\r\n                        }\r\n                        else {\r\n                            var child = util.safeGet(write.children, relativePath.getFront());\r\n                            if (child) {\r\n                                // There exists a child in this node that matches the root path\r\n                                var deepNode = child.getChild(relativePath.popFront());\r\n                                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        // There is no overlap between root path and write path, ignore write\r\n                    }\r\n                }\r\n                else {\r\n                    throw util.assertionError('WriteRecord should have .snap or .children');\r\n                }\r\n            }\r\n        }\r\n        return compoundWrite;\r\n    };\r\n    return WriteTree;\r\n}());\r\n/**\r\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\r\n * just proxy to the underlying WriteTree.\r\n *\r\n * @constructor\r\n */\r\nvar WriteTreeRef = /** @class */ (function () {\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!WriteTree} writeTree\r\n     */\r\n    function WriteTreeRef(path, writeTree) {\r\n        this.treePath_ = path;\r\n        this.writeTree_ = writeTree;\r\n    }\r\n    /**\r\n     * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n     * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n     * can lead to a more expensive calculation.\r\n     *\r\n     * @param {?Node} completeServerCache\r\n     * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\r\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n        return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n    };\r\n    /**\r\n     * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n     * mix of the given server data and write data.\r\n     *\r\n     * @param {?ChildrenNode} completeServerChildren\r\n     * @return {!ChildrenNode}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {\r\n        return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);\r\n    };\r\n    /**\r\n     * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n     * if anything, needs to be applied to the event cache.\r\n     *\r\n     * Possibilities:\r\n     *\r\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n     *\r\n     * 2. Some write is completely shadowing. No events to be raised\r\n     *\r\n     * 3. Is partially shadowed. Events should be raised\r\n     *\r\n     * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n     *\r\n     * @param {!Path} path\r\n     * @param {?Node} existingEventSnap\r\n     * @param {?Node} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {\r\n        return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);\r\n    };\r\n    /**\r\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n     * a higher path, this will return the child of that write relative to the write and this path.\r\n     * Returns null if there is no write at this path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.shadowingWrite = function (path) {\r\n        return this.writeTree_.shadowingWrite(this.treePath_.child(path));\r\n    };\r\n    /**\r\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n     * the window, but may now be in the window\r\n     *\r\n     * @param {?Node} completeServerData\r\n     * @param {!NamedNode} startPost\r\n     * @param {!number} count\r\n     * @param {boolean} reverse\r\n     * @param {!Index} index\r\n     * @return {!Array.<!NamedNode>}\r\n     */\r\n    WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {\r\n        return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);\r\n    };\r\n    /**\r\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n     * complete child for this ChildKey.\r\n     *\r\n     * @param {!string} childKey\r\n     * @param {!CacheNode} existingServerCache\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {\r\n        return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);\r\n    };\r\n    /**\r\n     * Return a WriteTreeRef for a child.\r\n     *\r\n     * @param {string} childName\r\n     * @return {!WriteTreeRef}\r\n     */\r\n    WriteTreeRef.prototype.child = function (childName) {\r\n        return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\r\n    };\r\n    return WriteTreeRef;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n * @constructor\r\n */\r\nvar SyncTree = /** @class */ (function () {\r\n    /**\r\n     * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    function SyncTree(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         * @type {!ImmutableTree.<!SyncPoint>}\r\n         * @private\r\n         */\r\n        this.syncPointTree_ = ImmutableTree.Empty;\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         * @type {!WriteTree}\r\n         * @private\r\n         */\r\n        this.pendingWriteTree_ = new WriteTree();\r\n        this.tagToQueryMap_ = {};\r\n        this.queryToTagMap_ = {};\r\n    }\r\n    /**\r\n     * Apply the data changes for a user-generated set() or transaction() call.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} newData\r\n     * @param {number} writeId\r\n     * @param {boolean=} visible\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {\r\n        // Record pending write.\r\n        this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\r\n        if (!visible) {\r\n            return [];\r\n        }\r\n        else {\r\n            return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.User, path, newData));\r\n        }\r\n    };\r\n    /**\r\n     * Apply the data from a user-generated update() call\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} writeId\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {\r\n        // Record pending merge.\r\n        this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\r\n        var changeTree = ImmutableTree.fromObject(changedChildren);\r\n        return this.applyOperationToSyncPoints_(new Merge(OperationSource.User, path, changeTree));\r\n    };\r\n    /**\r\n     * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n     *\r\n     * @param {!number} writeId\r\n     * @param {boolean=} revert True if the given write failed and needs to be reverted\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.ackUserWrite = function (writeId, revert) {\r\n        if (revert === void 0) { revert = false; }\r\n        var write = this.pendingWriteTree_.getWrite(writeId);\r\n        var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\r\n        if (!needToReevaluate) {\r\n            return [];\r\n        }\r\n        else {\r\n            var affectedTree_1 = ImmutableTree.Empty;\r\n            if (write.snap != null) {\r\n                // overwrite\r\n                affectedTree_1 = affectedTree_1.set(Path.Empty, true);\r\n            }\r\n            else {\r\n                util.forEach(write.children, function (pathString, node) {\r\n                    affectedTree_1 = affectedTree_1.set(new Path(pathString), node);\r\n                });\r\n            }\r\n            return this.applyOperationToSyncPoints_(new AckUserWrite(write.path, affectedTree_1, revert));\r\n        }\r\n    };\r\n    /**\r\n     * Apply new server data for the specified path..\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} newData\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyServerOverwrite = function (path, newData) {\r\n        return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.Server, path, newData));\r\n    };\r\n    /**\r\n     * Apply new server data to be merged in at the specified path.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyServerMerge = function (path, changedChildren) {\r\n        var changeTree = ImmutableTree.fromObject(changedChildren);\r\n        return this.applyOperationToSyncPoints_(new Merge(OperationSource.Server, path, changeTree));\r\n    };\r\n    /**\r\n     * Apply a listen complete for a query\r\n     *\r\n     * @param {!Path} path\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyListenComplete = function (path) {\r\n        return this.applyOperationToSyncPoints_(new ListenComplete(OperationSource.Server, path));\r\n    };\r\n    /**\r\n     * Apply new server data for the specified tagged query.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} snap\r\n     * @param {!number} tag\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey != null) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var op = new Overwrite(OperationSource.forServerTaggedQuery(queryId), relativePath, snap);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // Query must have been removed already\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Apply server data to be merged in for the specified tagged query.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} tag\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var changeTree = ImmutableTree.fromObject(changedChildren);\r\n            var op = new Merge(OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // We've already removed the query. No big deal, ignore the update\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Apply a listen complete for a tagged query\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!number} tag\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var op = new ListenComplete(OperationSource.forServerTaggedQuery(queryId), relativePath);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // We've already removed the query. No big deal, ignore the update\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Add an event callback for the specified query.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {\r\n        var path = query.path;\r\n        var serverCache = null;\r\n        var foundAncestorDefaultView = false;\r\n        // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n        // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n        this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {\r\n            var relativePath = Path.relativePath(pathToSyncPoint, path);\r\n            serverCache = serverCache || sp.getCompleteServerCache(relativePath);\r\n            foundAncestorDefaultView =\r\n                foundAncestorDefaultView || sp.hasCompleteView();\r\n        });\r\n        var syncPoint = this.syncPointTree_.get(path);\r\n        if (!syncPoint) {\r\n            syncPoint = new SyncPoint();\r\n            this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\r\n        }\r\n        else {\r\n            foundAncestorDefaultView =\r\n                foundAncestorDefaultView || syncPoint.hasCompleteView();\r\n            serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);\r\n        }\r\n        var serverCacheComplete;\r\n        if (serverCache != null) {\r\n            serverCacheComplete = true;\r\n        }\r\n        else {\r\n            serverCacheComplete = false;\r\n            serverCache = ChildrenNode.EMPTY_NODE;\r\n            var subtree = this.syncPointTree_.subtree(path);\r\n            subtree.foreachChild(function (childName, childSyncPoint) {\r\n                var completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);\r\n                if (completeCache) {\r\n                    serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n                }\r\n            });\r\n        }\r\n        var viewAlreadyExists = syncPoint.viewExistsForQuery(query);\r\n        if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\r\n            // We need to track a tag for this query\r\n            var queryKey = SyncTree.makeQueryKey_(query);\r\n            util.assert(!(queryKey in this.queryToTagMap_), 'View does not exist, but we have a tag');\r\n            var tag = SyncTree.getNextQueryTag_();\r\n            this.queryToTagMap_[queryKey] = tag;\r\n            // Coerce to string to avoid sparse arrays.\r\n            this.tagToQueryMap_['_' + tag] = queryKey;\r\n        }\r\n        var writesCache = this.pendingWriteTree_.childWrites(path);\r\n        var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n        if (!viewAlreadyExists && !foundAncestorDefaultView) {\r\n            var view /** @type !View */ = syncPoint.viewForQuery(query);\r\n            events = events.concat(this.setupListener_(query, view));\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     * Remove event callback(s).\r\n     *\r\n     * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n     * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration If null, all callbacks are removed.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\r\n     */\r\n    SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\r\n        var _this = this;\r\n        // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n        var path = query.path;\r\n        var maybeSyncPoint = this.syncPointTree_.get(path);\r\n        var cancelEvents = [];\r\n        // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n        // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n        // not loadsAllData().\r\n        if (maybeSyncPoint &&\r\n            (query.queryIdentifier() === 'default' ||\r\n                maybeSyncPoint.viewExistsForQuery(query))) {\r\n            /**\r\n             * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\r\n             */\r\n            var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);\r\n            if (maybeSyncPoint.isEmpty()) {\r\n                this.syncPointTree_ = this.syncPointTree_.remove(path);\r\n            }\r\n            var removed = removedAndEvents.removed;\r\n            cancelEvents = removedAndEvents.events;\r\n            // We may have just removed one of many listeners and can short-circuit this whole process\r\n            // We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n            // properly set up.\r\n            //\r\n            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n            // queryId === 'default'\r\n            var removingDefault = -1 !==\r\n                removed.findIndex(function (query) {\r\n                    return query.getQueryParams().loadsAllData();\r\n                });\r\n            var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {\r\n                return parentSyncPoint.hasCompleteView();\r\n            });\r\n            if (removingDefault && !covered) {\r\n                var subtree = this.syncPointTree_.subtree(path);\r\n                // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n                // removal\r\n                if (!subtree.isEmpty()) {\r\n                    // We need to fold over our subtree and collect the listeners to send\r\n                    var newViews = this.collectDistinctViewsForSubTree_(subtree);\r\n                    // Ok, we've collected all the listens we need. Set them up.\r\n                    for (var i = 0; i < newViews.length; ++i) {\r\n                        var view = newViews[i], newQuery = view.getQuery();\r\n                        var listener = this.createListenerForView_(view);\r\n                        this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);\r\n                    }\r\n                }\r\n                else {\r\n                    // There's nothing below us, so nothing we need to start listening on\r\n                }\r\n            }\r\n            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n            // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n            if (!covered && removed.length > 0 && !cancelError) {\r\n                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n                // default. Otherwise, we need to iterate through and cancel each individual query\r\n                if (removingDefault) {\r\n                    // We don't tag default listeners\r\n                    var defaultTag = null;\r\n                    this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);\r\n                }\r\n                else {\r\n                    removed.forEach(function (queryToRemove) {\r\n                        var tagToRemove = _this.queryToTagMap_[SyncTree.makeQueryKey_(queryToRemove)];\r\n                        _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);\r\n                    });\r\n                }\r\n            }\r\n            // Now, clear all of the tags we're tracking for the removed listens\r\n            this.removeTags_(removed);\r\n        }\r\n        else {\r\n            // No-op, this listener must've been already removed\r\n        }\r\n        return cancelEvents;\r\n    };\r\n    /**\r\n     * Returns a complete cache, if we have one, of the data at a particular path. The location must have a listener above\r\n     * it, but as this is only used by transaction code, that should always be the case anyways.\r\n     *\r\n     * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n     * @param {!Path} path The path to the data we want\r\n     * @param {Array.<number>=} writeIdsToExclude A specific set to be excluded\r\n     * @return {?Node}\r\n     */\r\n    SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {\r\n        var includeHiddenSets = true;\r\n        var writeTree = this.pendingWriteTree_;\r\n        var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {\r\n            var relativePath = Path.relativePath(pathSoFar, path);\r\n            var serverCache = syncPoint.getCompleteServerCache(relativePath);\r\n            if (serverCache) {\r\n                return serverCache;\r\n            }\r\n        });\r\n        return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n    };\r\n    /**\r\n     * This collapses multiple unfiltered views into a single view, since we only need a single\r\n     * listener for them.\r\n     *\r\n     * @param {!ImmutableTree.<!SyncPoint>} subtree\r\n     * @return {!Array.<!View>}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {\r\n        return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\r\n            if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\r\n                var completeView = maybeChildSyncPoint.getCompleteView();\r\n                return [completeView];\r\n            }\r\n            else {\r\n                // No complete view here, flatten any deeper listens into an array\r\n                var views_1 = [];\r\n                if (maybeChildSyncPoint) {\r\n                    views_1 = maybeChildSyncPoint.getQueryViews();\r\n                }\r\n                util.forEach(childMap, function (key, childViews) {\r\n                    views_1 = views_1.concat(childViews);\r\n                });\r\n                return views_1;\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Array.<!Query>} queries\r\n     * @private\r\n     */\r\n    SyncTree.prototype.removeTags_ = function (queries) {\r\n        for (var j = 0; j < queries.length; ++j) {\r\n            var removedQuery = queries[j];\r\n            if (!removedQuery.getQueryParams().loadsAllData()) {\r\n                // We should have a tag for this\r\n                var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\r\n                var removedQueryTag = this.queryToTagMap_[removedQueryKey];\r\n                delete this.queryToTagMap_[removedQueryKey];\r\n                delete this.tagToQueryMap_['_' + removedQueryTag];\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Normalizes a query to a query we send the server for listening\r\n     * @param {!Query} query\r\n     * @return {!Query} The normalized query\r\n     * @private\r\n     */\r\n    SyncTree.queryForListening_ = function (query) {\r\n        if (query.getQueryParams().loadsAllData() &&\r\n            !query.getQueryParams().isDefault()) {\r\n            // We treat queries that load all data as default queries\r\n            // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n            // from Query\r\n            return /** @type {!Query} */ query.getRef();\r\n        }\r\n        else {\r\n            return query;\r\n        }\r\n    };\r\n    /**\r\n     * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!View} view\r\n     * @return {!Array.<!Event>} This method can return events to support synchronous data sources\r\n     * @private\r\n     */\r\n    SyncTree.prototype.setupListener_ = function (query, view) {\r\n        var path = query.path;\r\n        var tag = this.tagForQuery_(query);\r\n        var listener = this.createListenerForView_(view);\r\n        var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n        var subtree = this.syncPointTree_.subtree(path);\r\n        // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n        // may need to shadow other listens as well.\r\n        if (tag) {\r\n            util.assert(!subtree.value.hasCompleteView(), \"If we're adding a query, it shouldn't be shadowed\");\r\n        }\r\n        else {\r\n            // Shadow everything at or below this location, this is a default listener.\r\n            var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\r\n                if (!relativePath.isEmpty() &&\r\n                    maybeChildSyncPoint &&\r\n                    maybeChildSyncPoint.hasCompleteView()) {\r\n                    return [maybeChildSyncPoint.getCompleteView().getQuery()];\r\n                }\r\n                else {\r\n                    // No default listener here, flatten any deeper queries into an array\r\n                    var queries_1 = [];\r\n                    if (maybeChildSyncPoint) {\r\n                        queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) { return view.getQuery(); }));\r\n                    }\r\n                    util.forEach(childMap, function (key, childQueries) {\r\n                        queries_1 = queries_1.concat(childQueries);\r\n                    });\r\n                    return queries_1;\r\n                }\r\n            });\r\n            for (var i = 0; i < queriesToStop.length; ++i) {\r\n                var queryToStop = queriesToStop[i];\r\n                this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));\r\n            }\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     *\r\n     * @param {!View} view\r\n     * @return {{hashFn: function(), onComplete: function(!string, *)}}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.createListenerForView_ = function (view) {\r\n        var _this = this;\r\n        var query = view.getQuery();\r\n        var tag = this.tagForQuery_(query);\r\n        return {\r\n            hashFn: function () {\r\n                var cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;\r\n                return cache.hash();\r\n            },\r\n            onComplete: function (status) {\r\n                if (status === 'ok') {\r\n                    if (tag) {\r\n                        return _this.applyTaggedListenComplete(query.path, tag);\r\n                    }\r\n                    else {\r\n                        return _this.applyListenComplete(query.path);\r\n                    }\r\n                }\r\n                else {\r\n                    // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                    // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                    var error$$1 = errorForServerCode(status, query);\r\n                    return _this.removeEventRegistration(query, \r\n                    /*eventRegistration*/ null, error$$1);\r\n                }\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n     * @private\r\n     * @param {!Query} query\r\n     * @return {string}\r\n     */\r\n    SyncTree.makeQueryKey_ = function (query) {\r\n        return query.path.toString() + '$' + query.queryIdentifier();\r\n    };\r\n    /**\r\n     * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n     * @private\r\n     * @param {!string} queryKey\r\n     * @return {{queryId: !string, path: !Path}}\r\n     */\r\n    SyncTree.parseQueryKey_ = function (queryKey) {\r\n        var splitIndex = queryKey.indexOf('$');\r\n        util.assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n        return {\r\n            queryId: queryKey.substr(splitIndex + 1),\r\n            path: new Path(queryKey.substr(0, splitIndex))\r\n        };\r\n    };\r\n    /**\r\n     * Return the query associated with the given tag, if we have one\r\n     * @param {!number} tag\r\n     * @return {?string}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.queryKeyForTag_ = function (tag) {\r\n        return this.tagToQueryMap_['_' + tag];\r\n    };\r\n    /**\r\n     * Return the tag associated with the given query.\r\n     * @param {!Query} query\r\n     * @return {?number}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.tagForQuery_ = function (query) {\r\n        var queryKey = SyncTree.makeQueryKey_(query);\r\n        return util.safeGet(this.queryToTagMap_, queryKey);\r\n    };\r\n    /**\r\n     * Static accessor for query tags.\r\n     * @return {number}\r\n     * @private\r\n     */\r\n    SyncTree.getNextQueryTag_ = function () {\r\n        return SyncTree.nextQueryTag_++;\r\n    };\r\n    /**\r\n     * A helper method to apply tagged operations\r\n     *\r\n     * @param {!Path} queryPath\r\n     * @param {!Operation} operation\r\n     * @return {!Array.<!Event>}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {\r\n        var syncPoint = this.syncPointTree_.get(queryPath);\r\n        util.assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n        var writesCache = this.pendingWriteTree_.childWrites(queryPath);\r\n        return syncPoint.applyOperation(operation, writesCache, \r\n        /*serverCache=*/ null);\r\n    };\r\n    /**\r\n     * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n     *\r\n     * NOTES:\r\n     * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n  \n     * - We call applyOperation() on each SyncPoint passing three things:\r\n     *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n     *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n     *   3. A snapshot Node with cached server data, if we have it.\r\n  \n     * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n     *\r\n     * @param {!Operation} operation\r\n     * @return {!Array.<!Event>}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {\r\n        return this.applyOperationHelper_(operation, this.syncPointTree_, \r\n        /*serverCache=*/ null, this.pendingWriteTree_.childWrites(Path.Empty));\r\n    };\r\n    /**\r\n     * Recursive helper for applyOperationToSyncPoints_\r\n     *\r\n     * @private\r\n     * @param {!Operation} operation\r\n     * @param {ImmutableTree.<!SyncPoint>} syncPointTree\r\n     * @param {?Node} serverCache\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\r\n        if (operation.path.isEmpty()) {\r\n            return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n        }\r\n        else {\r\n            var syncPoint = syncPointTree.get(Path.Empty);\r\n            // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n            if (serverCache == null && syncPoint != null) {\r\n                serverCache = syncPoint.getCompleteServerCache(Path.Empty);\r\n            }\r\n            var events = [];\r\n            var childName = operation.path.getFront();\r\n            var childOperation = operation.operationForChild(childName);\r\n            var childTree = syncPointTree.children.get(childName);\r\n            if (childTree && childOperation) {\r\n                var childServerCache = serverCache\r\n                    ? serverCache.getImmediateChild(childName)\r\n                    : null;\r\n                var childWritesCache = writesCache.child(childName);\r\n                events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n            }\r\n            if (syncPoint) {\r\n                events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\r\n            }\r\n            return events;\r\n        }\r\n    };\r\n    /**\r\n     * Recursive helper for applyOperationToSyncPoints_\r\n     *\r\n     * @private\r\n     * @param {!Operation} operation\r\n     * @param {ImmutableTree.<!SyncPoint>} syncPointTree\r\n     * @param {?Node} serverCache\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\r\n        var _this = this;\r\n        var syncPoint = syncPointTree.get(Path.Empty);\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPoint.getCompleteServerCache(Path.Empty);\r\n        }\r\n        var events = [];\r\n        syncPointTree.children.inorderTraversal(function (childName, childTree) {\r\n            var childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            var childWritesCache = writesCache.child(childName);\r\n            var childOperation = operation.operationForChild(childName);\r\n            if (childOperation) {\r\n                events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n            }\r\n        });\r\n        if (syncPoint) {\r\n            events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     * Static tracker for next query tag.\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    SyncTree.nextQueryTag_ = 1;\r\n    return SyncTree;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n *\r\n * @constructor\r\n */\r\nvar SnapshotHolder = /** @class */ (function () {\r\n    function SnapshotHolder() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    SnapshotHolder.prototype.getNode = function (path) {\r\n        return this.rootNode_.getChild(path);\r\n    };\r\n    SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    };\r\n    return SnapshotHolder;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nvar AuthTokenProvider = /** @class */ (function () {\r\n    /**\r\n     * @param {!FirebaseApp} app_\r\n     */\r\n    function AuthTokenProvider(app_) {\r\n        this.app_ = app_;\r\n    }\r\n    /**\r\n     * @param {boolean} forceRefresh\r\n     * @return {!Promise<FirebaseAuthTokenData>}\r\n     */\r\n    AuthTokenProvider.prototype.getToken = function (forceRefresh) {\r\n        return this.app_['INTERNAL']['getToken'](forceRefresh).then(null, \r\n        // .catch\r\n        function (error$$1) {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error$$1 && error$$1.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error$$1);\r\n            }\r\n        });\r\n    };\r\n    AuthTokenProvider.prototype.addTokenChangeListener = function (listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        this.app_['INTERNAL']['addAuthTokenListener'](listener);\r\n    };\r\n    AuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {\r\n        this.app_['INTERNAL']['removeAuthTokenListener'](listener);\r\n    };\r\n    AuthTokenProvider.prototype.notifyForInvalidToken = function () {\r\n        var errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.app_.name +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.app_.options) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.app_.options) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    };\r\n    return AuthTokenProvider;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n *\r\n * @constructor\r\n */\r\nvar StatsCollection = /** @class */ (function () {\r\n    function StatsCollection() {\r\n        this.counters_ = {};\r\n    }\r\n    StatsCollection.prototype.incrementCounter = function (name, amount) {\r\n        if (amount === void 0) { amount = 1; }\r\n        if (!util.contains(this.counters_, name))\r\n            this.counters_[name] = 0;\r\n        this.counters_[name] += amount;\r\n    };\r\n    StatsCollection.prototype.get = function () {\r\n        return util.deepCopy(this.counters_);\r\n    };\r\n    return StatsCollection;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar StatsManager = /** @class */ (function () {\r\n    function StatsManager() {\r\n    }\r\n    StatsManager.getCollection = function (repoInfo) {\r\n        var hashString = repoInfo.toString();\r\n        if (!this.collections_[hashString]) {\r\n            this.collections_[hashString] = new StatsCollection();\r\n        }\r\n        return this.collections_[hashString];\r\n    };\r\n    StatsManager.getOrCreateReporter = function (repoInfo, creatorFunction) {\r\n        var hashString = repoInfo.toString();\r\n        if (!this.reporters_[hashString]) {\r\n            this.reporters_[hashString] = creatorFunction();\r\n        }\r\n        return this.reporters_[hashString];\r\n    };\r\n    StatsManager.collections_ = {};\r\n    StatsManager.reporters_ = {};\r\n    return StatsManager;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ The collection to \"listen\" to.\r\n * @constructor\r\n */\r\nvar StatsListener = /** @class */ (function () {\r\n    function StatsListener(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    StatsListener.prototype.get = function () {\r\n        var newStats = this.collection_.get();\r\n        var delta = util.clone(newStats);\r\n        if (this.last_) {\r\n            util.forEach(this.last_, function (stat, value) {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    };\r\n    return StatsListener;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nvar FIRST_STATS_MIN_TIME = 10 * 1000;\r\nvar FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nvar REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\n/**\r\n * @constructor\r\n */\r\nvar StatsReporter = /** @class */ (function () {\r\n    /**\r\n     * @param collection\r\n     * @param server_\r\n     */\r\n    function StatsReporter(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        var timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    StatsReporter.prototype.includeStat = function (stat) {\r\n        this.statsToReport_[stat] = true;\r\n    };\r\n    StatsReporter.prototype.reportStats_ = function () {\r\n        var _this = this;\r\n        var stats = this.statsListener_.get();\r\n        var reportedStats = {};\r\n        var haveStatsToReport = false;\r\n        util.forEach(stats, function (stat, value) {\r\n            if (value > 0 && util.contains(_this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    };\r\n    return StatsReporter;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n * @constructor\r\n */\r\nvar EventQueue = /** @class */ (function () {\r\n    function EventQueue() {\r\n        /**\r\n         * @private\r\n         * @type {!Array.<EventList>}\r\n         */\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         * @private\r\n         * @type {!number}\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n    /**\r\n     * @param {!Array.<Event>} eventDataList The new events to queue.\r\n     */\r\n    EventQueue.prototype.queueEvents = function (eventDataList) {\r\n        // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n        var currList = null;\r\n        for (var i = 0; i < eventDataList.length; i++) {\r\n            var eventData = eventDataList[i];\r\n            var eventPath = eventData.getPath();\r\n            if (currList !== null && !eventPath.equals(currList.getPath())) {\r\n                this.eventLists_.push(currList);\r\n                currList = null;\r\n            }\r\n            if (currList === null) {\r\n                currList = new EventList(eventPath);\r\n            }\r\n            currList.add(eventData);\r\n        }\r\n        if (currList) {\r\n            this.eventLists_.push(currList);\r\n        }\r\n    };\r\n    /**\r\n     * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n     * for the specified path.\r\n     *\r\n     * It is assumed that the new events are all for the specified path.\r\n     *\r\n     * @param {!Path} path The path to raise events for.\r\n     * @param {!Array.<Event>} eventDataList The new events to raise.\r\n     */\r\n    EventQueue.prototype.raiseEventsAtPath = function (path, eventDataList) {\r\n        this.queueEvents(eventDataList);\r\n        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\r\n            return eventPath.equals(path);\r\n        });\r\n    };\r\n    /**\r\n     * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n     * locations related to the specified change path (i.e. all ancestors and descendants).\r\n     *\r\n     * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n     *\r\n     * @param {!Path} changedPath The path to raise events for.\r\n     * @param {!Array.<!Event>} eventDataList The events to raise\r\n     */\r\n    EventQueue.prototype.raiseEventsForChangedPath = function (changedPath, eventDataList) {\r\n        this.queueEvents(eventDataList);\r\n        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\r\n            return eventPath.contains(changedPath) || changedPath.contains(eventPath);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!function(!Path):boolean} predicate\r\n     * @private\r\n     */\r\n    EventQueue.prototype.raiseQueuedEventsMatchingPredicate_ = function (predicate) {\r\n        this.recursionDepth_++;\r\n        var sentAll = true;\r\n        for (var i = 0; i < this.eventLists_.length; i++) {\r\n            var eventList = this.eventLists_[i];\r\n            if (eventList) {\r\n                var eventPath = eventList.getPath();\r\n                if (predicate(eventPath)) {\r\n                    this.eventLists_[i].raise();\r\n                    this.eventLists_[i] = null;\r\n                }\r\n                else {\r\n                    sentAll = false;\r\n                }\r\n            }\r\n        }\r\n        if (sentAll) {\r\n            this.eventLists_ = [];\r\n        }\r\n        this.recursionDepth_--;\r\n    };\r\n    return EventQueue;\r\n}());\r\n/**\r\n * @param {!Path} path\r\n * @constructor\r\n */\r\nvar EventList = /** @class */ (function () {\r\n    function EventList(path_) {\r\n        this.path_ = path_;\r\n        /**\r\n         * @type {!Array.<Event>}\r\n         * @private\r\n         */\r\n        this.events_ = [];\r\n    }\r\n    /**\r\n     * @param {!Event} eventData\r\n     */\r\n    EventList.prototype.add = function (eventData) {\r\n        this.events_.push(eventData);\r\n    };\r\n    /**\r\n     * Iterates through the list and raises each event\r\n     */\r\n    EventList.prototype.raise = function () {\r\n        for (var i = 0; i < this.events_.length; i++) {\r\n            var eventData = this.events_[i];\r\n            if (eventData !== null) {\r\n                this.events_[i] = null;\r\n                var eventFn = eventData.getEventRunner();\r\n                if (logger$1) {\r\n                    log('event: ' + eventData.toString());\r\n                }\r\n                exceptionGuard(eventFn);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @return {!Path}\r\n     */\r\n    EventList.prototype.getPath = function () {\r\n        return this.path_;\r\n    };\r\n    return EventList;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nvar EventEmitter = /** @class */ (function () {\r\n    /**\r\n     * @param {!Array.<string>} allowedEvents_\r\n     */\r\n    function EventEmitter(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        util.assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     * @param {!string} eventType\r\n     * @param {...*} var_args\r\n     */\r\n    EventEmitter.prototype.trigger = function (eventType) {\r\n        var var_args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            var_args[_i - 1] = arguments[_i];\r\n        }\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            var listeners = this.listeners_[eventType].slice();\r\n            for (var i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, var_args);\r\n            }\r\n        }\r\n    };\r\n    EventEmitter.prototype.on = function (eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback: callback, context: context });\r\n        var eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    };\r\n    EventEmitter.prototype.off = function (eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        var listeners = this.listeners_[eventType] || [];\r\n        for (var i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    };\r\n    EventEmitter.prototype.validateEventType_ = function (eventType) {\r\n        util.assert(this.allowedEvents_.find(function (et) {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    };\r\n    return EventEmitter;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @extends {EventEmitter}\r\n */\r\nvar VisibilityMonitor = /** @class */ (function (_super) {\r\n    tslib_1.__extends(VisibilityMonitor, _super);\r\n    function VisibilityMonitor() {\r\n        var _this = _super.call(this, ['visible']) || this;\r\n        var hidden;\r\n        var visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        _this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, function () {\r\n                var visible = !document[hidden];\r\n                if (visible !== _this.visible_) {\r\n                    _this.visible_ = visible;\r\n                    _this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n        return _this;\r\n    }\r\n    VisibilityMonitor.getInstance = function () {\r\n        return new VisibilityMonitor();\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @return {Array.<boolean>}\r\n     */\r\n    VisibilityMonitor.prototype.getInitialEvent = function (eventType) {\r\n        util.assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    };\r\n    return VisibilityMonitor;\r\n}(EventEmitter));\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n *\r\n * @extends {EventEmitter}\r\n */\r\nvar OnlineMonitor = /** @class */ (function (_super) {\r\n    tslib_1.__extends(OnlineMonitor, _super);\r\n    function OnlineMonitor() {\r\n        var _this = _super.call(this, ['online']) || this;\r\n        _this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !util.isMobileCordova()) {\r\n            window.addEventListener('online', function () {\r\n                if (!_this.online_) {\r\n                    _this.online_ = true;\r\n                    _this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', function () {\r\n                if (_this.online_) {\r\n                    _this.online_ = false;\r\n                    _this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n        return _this;\r\n    }\r\n    OnlineMonitor.getInstance = function () {\r\n        return new OnlineMonitor();\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @return {Array.<boolean>}\r\n     */\r\n    OnlineMonitor.prototype.getInitialEvent = function (eventType) {\r\n        util.assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    OnlineMonitor.prototype.currentlyOnline = function () {\r\n        return this.online_;\r\n    };\r\n    return OnlineMonitor;\r\n}(EventEmitter));\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n * @constructor\r\n */\r\nvar PacketReceiver = /** @class */ (function () {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    function PacketReceiver(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    PacketReceiver.prototype.closeAfter = function (responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    };\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     * @param {number} requestNum\r\n     * @param {Array} data\r\n     */\r\n    PacketReceiver.prototype.handleResponse = function (requestNum, data) {\r\n        var _this = this;\r\n        this.pendingResponses[requestNum] = data;\r\n        var _loop_1 = function () {\r\n            var toProcess = this_1.pendingResponses[this_1.currentResponseNum];\r\n            delete this_1.pendingResponses[this_1.currentResponseNum];\r\n            var _loop_2 = function (i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(function () {\r\n                        _this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            };\r\n            for (var i = 0; i < toProcess.length; ++i) {\r\n                _loop_2(i);\r\n            }\r\n            if (this_1.currentResponseNum === this_1.closeAfterResponse) {\r\n                if (this_1.onClose) {\r\n                    this_1.onClose();\r\n                    this_1.onClose = null;\r\n                }\r\n                return \"break\";\r\n            }\r\n            this_1.currentResponseNum++;\r\n        };\r\n        var this_1 = this;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            var state_1 = _loop_1();\r\n            if (state_1 === \"break\")\r\n                break;\r\n        }\r\n    };\r\n    return PacketReceiver;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nvar FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nvar FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nvar FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nvar FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nvar FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nvar FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nvar FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nvar FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nvar FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nvar FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nvar FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\r\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nvar MAX_URL_DATA_SIZE = 1870;\r\nvar SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nvar MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n * @const\r\n * @type {number}\r\n */\r\nvar KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n * @const\r\n * @type {number}\r\n */\r\nvar LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n *\r\n * @constructor\r\n * @implements {Transport}\r\n */\r\nvar BrowserPollConnection = /** @class */ (function () {\r\n    /**\r\n     * @param {string} connId An identifier for this connection, used for logging\r\n     * @param {RepoInfo} repoInfo The info for the endpoint to send data to.\r\n     * @param {string=} transportSessionId Optional transportSessionid if we are reconnecting for an existing\r\n     *                                         transport session\r\n     * @param {string=}  lastSessionId Optional lastSessionId if the PersistentConnection has already created a\r\n     *                                     connection previously\r\n     */\r\n    function BrowserPollConnection(connId, repoInfo, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = StatsManager.getCollection(repoInfo);\r\n        this.urlFn = function (params) {\r\n            return repoInfo.connectionURL(LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     *\r\n     * @param {function(Object)} onMessage Callback when messages arrive\r\n     * @param {function()} onDisconnect Callback with connection lost.\r\n     */\r\n    BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {\r\n        var _this = this;\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(function () {\r\n            _this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            _this.onClosed_();\r\n            _this.connectTimeoutTimer_ = null;\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(function () {\r\n            if (_this.isClosed_)\r\n                return;\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                var command = args[0], arg1 = args[1], arg2 = args[2];\r\n                _this.incrementIncomingBytes_(args);\r\n                if (!_this.scriptTagHolder)\r\n                    return; // we closed the connection.\r\n                if (_this.connectTimeoutTimer_) {\r\n                    clearTimeout(_this.connectTimeoutTimer_);\r\n                    _this.connectTimeoutTimer_ = null;\r\n                }\r\n                _this.everConnected_ = true;\r\n                if (command == FIREBASE_LONGPOLL_START_PARAM) {\r\n                    _this.id = arg1;\r\n                    _this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        _this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        _this.myPacketOrderer.closeAfter(arg1, function () {\r\n                            _this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        _this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                var pN = args[0], data = args[1];\r\n                _this.incrementIncomingBytes_(args);\r\n                _this.myPacketOrderer.handleResponse(pN, data);\r\n            }, function () {\r\n                _this.onClosed_();\r\n            }, _this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            var urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (_this.scriptTagHolder.uniqueCallbackIdentifier)\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (_this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = _this.transportSessionId;\r\n            }\r\n            if (_this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = _this.lastSessionId;\r\n            }\r\n            if (!util.isNodeSdk() &&\r\n                typeof location !== 'undefined' &&\r\n                location.href &&\r\n                location.href.indexOf(FORGE_DOMAIN) !== -1) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            var connectURL = _this.urlFn(urlParams);\r\n            _this.log_('Connecting via long-poll to ' + connectURL);\r\n            _this.scriptTagHolder.addTag(connectURL, function () {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    BrowserPollConnection.prototype.start = function () {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    };\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    BrowserPollConnection.forceAllow = function () {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    };\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    BrowserPollConnection.forceDisallow = function () {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    };\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    BrowserPollConnection.isAvailable = function () {\r\n        // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n        // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n        return (BrowserPollConnection.forceAllow_ ||\r\n            (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp() &&\r\n                !util.isNodeSdk()));\r\n    };\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    BrowserPollConnection.prototype.markConnectionHealthy = function () { };\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.shutdown_ = function () {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    };\r\n    /**\r\n     * Triggered when this transport is closed\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.onClosed_ = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    BrowserPollConnection.prototype.close = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    };\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param {!Object} data The JSON data to transmit.\r\n     */\r\n    BrowserPollConnection.prototype.send = function (data) {\r\n        var dataStr = util.stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        var base64data = util.base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (var i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    };\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     * @param {!string} id\r\n     * @param {!string} pw\r\n     */\r\n    BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {\r\n        if (util.isNodeSdk())\r\n            return;\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        var urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    };\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     * @param {*} args\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        var bytesReceived = util.stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    };\r\n    return BrowserPollConnection;\r\n}());\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n * @constructor\r\n *********************************************************************************************/\r\nvar FirebaseIFrameScriptHolder = /** @class */ (function () {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        /**\r\n         * @type {CountedSet.<number, number>}\r\n         */\r\n        this.outstandingRequests = new CountedSet();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!util.isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            var script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                var currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            var iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     * @private\r\n     * @return {Element}\r\n     */\r\n    FirebaseIFrameScriptHolder.createIFrame_ = function () {\r\n        var iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                var a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                var domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n        }\r\n        else if (iframe.document) {\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    };\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.close = function () {\r\n        var _this = this;\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\r\n            this.myIFrame.doc.body.innerHTML = '';\r\n            setTimeout(function () {\r\n                if (_this.myIFrame !== null) {\r\n                    document.body.removeChild(_this.myIFrame);\r\n                    _this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        if (util.isNodeSdk() && this.myID) {\r\n            var urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            var theURL = this.urlFn(urlParams);\r\n            FirebaseIFrameScriptHolder.nodeRestRequest(theURL);\r\n        }\r\n        // Protect from being called recursively.\r\n        var onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    };\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param {!string} id - The ID of this connection\r\n     * @param {!string} pw - The password for this connection\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    };\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.count() < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            var urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            var theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            var curDataString = '';\r\n            var i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                var nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    var theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    };\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param {!string} url - The URL of the script tag.\r\n     * @param {!number} serial - The serial number of the request.\r\n     * @private\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {\r\n        var _this = this;\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial, 1);\r\n        var doNewRequest = function () {\r\n            _this.outstandingRequests.remove(serial);\r\n            _this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        var readyStateCB = function () {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    };\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param {!string} url - The URL for the script tag source.\r\n     * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {\r\n        var _this = this;\r\n        if (util.isNodeSdk()) {\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(function () {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!_this.sendNewPolls)\r\n                        return;\r\n                    var newScript_1 = _this.myIFrame.doc.createElement('script');\r\n                    newScript_1.type = 'text/javascript';\r\n                    newScript_1.async = true;\r\n                    newScript_1.src = url;\r\n                    newScript_1.onload = newScript_1.onreadystatechange = function () {\r\n                        var rstate = newScript_1.readyState;\r\n                        if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                            newScript_1.onload = newScript_1.onreadystatechange = null;\r\n                            if (newScript_1.parentNode) {\r\n                                newScript_1.parentNode.removeChild(newScript_1);\r\n                            }\r\n                            loadCB();\r\n                        }\r\n                    };\r\n                    newScript_1.onerror = function () {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        _this.sendNewPolls = false;\r\n                        _this.close();\r\n                    };\r\n                    _this.myIFrame.doc.body.appendChild(newScript_1);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    };\r\n    return FirebaseIFrameScriptHolder;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nvar WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nvar WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n * @constructor\r\n * @implements {Transport}\r\n */\r\nvar WebSocketConnection = /** @class */ (function () {\r\n    /**\r\n     * @param {string} connId identifier for this transport\r\n     * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n     */\r\n    function WebSocketConnection(connId, repoInfo, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = StatsManager.getCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId);\r\n    }\r\n    /**\r\n     * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n     * @return {string} connection url\r\n     * @private\r\n     */\r\n    WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId) {\r\n        var urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!util.isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.href &&\r\n            location.href.indexOf(FORGE_DOMAIN) !== -1) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        return repoInfo.connectionURL(WEBSOCKET, urlParams);\r\n    };\r\n    /**\r\n     *\r\n     * @param onMessage Callback when messages arrive\r\n     * @param onDisconnect Callback with connection lost.\r\n     */\r\n    WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {\r\n        var _this = this;\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            if (util.isNodeSdk()) {\r\n                var device = util.CONSTANTS.NODE_ADMIN ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                var options = {\r\n                    headers: {\r\n                        'User-Agent': \"Firebase/\" + PROTOCOL_VERSION + \"/\" + firebase.SDK_VERSION + \"/\" + process.platform + \"/\" + device\r\n                    }\r\n                };\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                var env = process['env'];\r\n                var proxy = this.connURL.indexOf('wss://') == 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n            }\r\n            else {\r\n                this.mySock = new WebSocketImpl(this.connURL);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            var error$$1 = e.message || e.data;\r\n            if (error$$1) {\r\n                this.log_(error$$1);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = function () {\r\n            _this.log_('Websocket connected.');\r\n            _this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = function () {\r\n            _this.log_('Websocket connection was disconnected.');\r\n            _this.mySock = null;\r\n            _this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = function (m) {\r\n            _this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = function (e) {\r\n            _this.log_('WebSocket error.  Closing connection.');\r\n            var error$$1 = e.message || e.data;\r\n            if (error$$1) {\r\n                _this.log_(error$$1);\r\n            }\r\n            _this.onClosed_();\r\n        };\r\n    };\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    WebSocketConnection.prototype.start = function () { };\r\n    WebSocketConnection.forceDisallow = function () {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    };\r\n    WebSocketConnection.isAvailable = function () {\r\n        var isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            var oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    };\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     * @return {boolean}\r\n     */\r\n    WebSocketConnection.previouslyFailed = function () {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    };\r\n    WebSocketConnection.prototype.markConnectionHealthy = function () {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    };\r\n    WebSocketConnection.prototype.appendFrame_ = function (data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length == this.totalFrames) {\r\n            var fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            var jsonMess = util.jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    };\r\n    /**\r\n     * @param {number} frameCount The number of frames we are expecting from the server\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    };\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @param {!String} data\r\n     * @return {?String} Any remaining data to be process, or null if there is none\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.extractFrameCount_ = function (data) {\r\n        util.assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            var frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    };\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess The frame data\r\n     */\r\n    WebSocketConnection.prototype.handleIncomingFrame = function (mess) {\r\n        if (this.mySock === null)\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        var data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            var remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Send a message to the server\r\n     * @param {Object} data The JSON object to transmit\r\n     */\r\n    WebSocketConnection.prototype.send = function (data) {\r\n        this.resetKeepAlive();\r\n        var dataStr = util.stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (var i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    };\r\n    WebSocketConnection.prototype.shutdown_ = function () {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    };\r\n    WebSocketConnection.prototype.onClosed_ = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    WebSocketConnection.prototype.close = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    };\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    WebSocketConnection.prototype.resetKeepAlive = function () {\r\n        var _this = this;\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(function () {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (_this.mySock) {\r\n                _this.sendString_('0');\r\n            }\r\n            _this.resetKeepAlive();\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    };\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param {string} str String to send.\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.sendString_ = function (str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    };\r\n    /**\r\n     * Number of response before we consider the connection \"healthy.\"\r\n     * @type {number}\r\n     */\r\n    WebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n    /**\r\n     * Time to wait for the connection te become healthy before giving up.\r\n     * @type {number}\r\n     */\r\n    WebSocketConnection.healthyTimeout = 30000;\r\n    return WebSocketConnection;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n * @constructor\r\n */\r\nvar TransportManager = /** @class */ (function () {\r\n    /**\r\n     * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\r\n     */\r\n    function TransportManager(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    Object.defineProperty(TransportManager, \"ALL_TRANSPORTS\", {\r\n        /**\r\n         * @const\r\n         * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\r\n         */\r\n        get: function () {\r\n            return [BrowserPollConnection, WebSocketConnection];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @param {!RepoInfo} repoInfo\r\n     * @private\r\n     */\r\n    TransportManager.prototype.initTransports_ = function (repoInfo) {\r\n        var isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable)\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            var transports_1 = (this.transports_ = []);\r\n            each(TransportManager.ALL_TRANSPORTS, function (i, transport) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports_1.push(transport);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\r\n     * initial transport to use\r\n     */\r\n    TransportManager.prototype.initialTransport = function () {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    };\r\n    /**\r\n     * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\r\n     * transport, or null\r\n     */\r\n    TransportManager.prototype.upgradeTransport = function () {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    return TransportManager;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nvar UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nvar DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nvar BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nvar BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nvar MESSAGE_TYPE = 't';\r\nvar MESSAGE_DATA = 'd';\r\nvar CONTROL_SHUTDOWN = 's';\r\nvar CONTROL_RESET = 'r';\r\nvar CONTROL_ERROR = 'e';\r\nvar CONTROL_PONG = 'o';\r\nvar SWITCH_ACK = 'a';\r\nvar END_TRANSMISSION = 'n';\r\nvar PING = 'p';\r\nvar SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n *\r\n * @constructor\r\n */\r\nvar Connection = /** @class */ (function () {\r\n    /**\r\n     * @param {!string} id - an id for this connection\r\n     * @param {!RepoInfo} repoInfo_ - the info for the endpoint to connect to\r\n     * @param {function(Object)} onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param {function(number, string)} onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param {function()} onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param {function(string)} onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param {string=} lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    function Connection(id, repoInfo_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     * @private\r\n     */\r\n    Connection.prototype.start_ = function () {\r\n        var _this = this;\r\n        var conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, undefined, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        var onMessageReceived = this.connReceiver_(this.conn_);\r\n        var onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(function () {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        var healthyTimeout_ms = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeout_ms > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(function () {\r\n                _this.healthyTimeout_ = null;\r\n                if (!_this.isHealthy_) {\r\n                    if (_this.conn_ &&\r\n                        _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        _this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            _this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        _this.isHealthy_ = true;\r\n                        _this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (_this.conn_ &&\r\n                        _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        _this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            _this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        _this.log_('Closing unhealthy connection after timeout.');\r\n                        _this.close();\r\n                    }\r\n                }\r\n            }, Math.floor(healthyTimeout_ms));\r\n        }\r\n    };\r\n    /**\r\n     * @return {!string}\r\n     * @private\r\n     */\r\n    Connection.prototype.nextTransportId_ = function () {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    };\r\n    Connection.prototype.disconnReceiver_ = function (conn) {\r\n        var _this = this;\r\n        return function (everConnected) {\r\n            if (conn === _this.conn_) {\r\n                _this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === _this.secondaryConn_) {\r\n                _this.log_('Secondary connection lost.');\r\n                _this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                _this.log_('closing an old connection');\r\n            }\r\n        };\r\n    };\r\n    Connection.prototype.connReceiver_ = function (conn) {\r\n        var _this = this;\r\n        return function (message) {\r\n            if (_this.state_ != 2 /* DISCONNECTED */) {\r\n                if (conn === _this.rx_) {\r\n                    _this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === _this.secondaryConn_) {\r\n                    _this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    _this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     *\r\n     * @param {Object} dataMsg An arbitrary data message to be sent to the server\r\n     */\r\n    Connection.prototype.sendRequest = function (dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        var msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    };\r\n    Connection.prototype.tryCleanupConnection = function () {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryControl_ = function (controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            var cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {\r\n        var layer = requireKey('t', parsedData);\r\n        var data = requireKey('d', parsedData);\r\n        if (layer == 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer == 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    };\r\n    Connection.prototype.upgradeIfSecondaryHealthy_ = function () {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    };\r\n    Connection.prototype.proceedWithUpgrade_ = function () {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    };\r\n    Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        var layer = requireKey('t', parsedData);\r\n        var data = requireKey('d', parsedData);\r\n        if (layer == 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer == 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    };\r\n    Connection.prototype.onDataMessage_ = function (message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    };\r\n    Connection.prototype.onPrimaryResponse_ = function () {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    };\r\n    Connection.prototype.onControl_ = function (controlData) {\r\n        var cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            var payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                this.onHandshake_(payload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (var i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {Object} handshake The handshake data returned from the server\r\n     * @private\r\n     */\r\n    Connection.prototype.onHandshake_ = function (handshake) {\r\n        var timestamp = handshake.ts;\r\n        var version = handshake.v;\r\n        var host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.updateHost(host);\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ == 0 /* CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    };\r\n    Connection.prototype.tryStartUpgrade_ = function () {\r\n        var conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    };\r\n    Connection.prototype.startUpgrade_ = function (conn) {\r\n        var _this = this;\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        var onMessage = this.connReceiver_(this.secondaryConn_);\r\n        var onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(function () {\r\n            if (_this.secondaryConn_) {\r\n                _this.log_('Timed out trying to upgrade.');\r\n                _this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    };\r\n    Connection.prototype.onReset_ = function (host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.updateHost(host);\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    };\r\n    Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {\r\n        var _this = this;\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(function () {\r\n                _this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    };\r\n    Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryConnectionLost_ = function () {\r\n        var conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     * @private\r\n     */\r\n    Connection.prototype.onConnectionLost_ = function (everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    };\r\n    /**\r\n     *\r\n     * @param {string} reason\r\n     * @private\r\n     */\r\n    Connection.prototype.onConnectionShutdown_ = function (reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    };\r\n    Connection.prototype.sendData_ = function (data) {\r\n        if (this.state_ !== 1 /* CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    };\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    Connection.prototype.close = function () {\r\n        if (this.state_ !== 2 /* DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @private\r\n     */\r\n    Connection.prototype.closeConnections_ = function () {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    };\r\n    return Connection;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nvar ServerActions = /** @class */ (function () {\r\n    function ServerActions() {\r\n    }\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     * @param {string=} hash\r\n     */\r\n    ServerActions.prototype.put = function (pathString, data, onComplete, hash) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, ?string)} onComplete\r\n     * @param {string=} hash\r\n     */\r\n    ServerActions.prototype.merge = function (pathString, data, onComplete, hash) { };\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param {string} token The authentication token\r\n     */\r\n    ServerActions.prototype.refreshAuthToken = function (token) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) { };\r\n    /**\r\n     * @param {Object.<string, *>} stats\r\n     */\r\n    ServerActions.prototype.reportStats = function (stats) { };\r\n    return ServerActions;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar RECONNECT_MIN_DELAY = 1000;\r\nvar RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nvar RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nvar RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nvar RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nvar SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nvar INVALID_AUTH_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nvar PersistentConnection = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PersistentConnection, _super);\r\n    /**\r\n     * @implements {ServerActions}\r\n     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\r\n     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\r\n     * @param onConnectStatus_\r\n     * @param onServerInfoUpdate_\r\n     * @param authTokenProvider_\r\n     * @param authOverride_\r\n     */\r\n    function PersistentConnection(repoInfo_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, authOverride_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.repoInfo_ = repoInfo_;\r\n        _this.onDataUpdate_ = onDataUpdate_;\r\n        _this.onConnectStatus_ = onConnectStatus_;\r\n        _this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        _this.authTokenProvider_ = authTokenProvider_;\r\n        _this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        _this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        _this.log_ = logWrapper('p:' + _this.id + ':');\r\n        /** @private {Object} */\r\n        _this.interruptReasons_ = {};\r\n        _this.listens_ = {};\r\n        _this.outstandingPuts_ = [];\r\n        _this.outstandingPutCount_ = 0;\r\n        _this.onDisconnectRequestQueue_ = [];\r\n        _this.connected_ = false;\r\n        _this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        _this.securityDebugCallback_ = null;\r\n        _this.lastSessionId = null;\r\n        /** @private {number|null} */\r\n        _this.establishConnectionTimer_ = null;\r\n        /** @private {boolean} */\r\n        _this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        _this.requestCBHash_ = {};\r\n        _this.requestNumber_ = 0;\r\n        /** @private {?{\r\n         *   sendRequest(Object),\r\n         *   close()\r\n         * }} */\r\n        _this.realtime_ = null;\r\n        /** @private {string|null} */\r\n        _this.authToken_ = null;\r\n        _this.forceTokenRefresh_ = false;\r\n        _this.invalidAuthTokenCount_ = 0;\r\n        _this.firstConnection_ = true;\r\n        _this.lastConnectionAttemptTime_ = null;\r\n        _this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !util.isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        _this.scheduleConnect_(0);\r\n        VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {!string} action\r\n     * @param {*} body\r\n     * @param {function(*)=} onResponse\r\n     * @protected\r\n     */\r\n    PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {\r\n        var curReqNum = ++this.requestNumber_;\r\n        var msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(util.stringify(msg));\r\n        util.assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {\r\n        var queryId = query.queryIdentifier();\r\n        var pathString = query.path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        this.listens_[pathString] = this.listens_[pathString] || {};\r\n        util.assert(query.getQueryParams().isDefault() ||\r\n            !query.getQueryParams().loadsAllData(), 'listen() called for non-default but complete query');\r\n        util.assert(!this.listens_[pathString][queryId], 'listen() called twice for same path/queryId.');\r\n        var listenSpec = {\r\n            onComplete: onComplete,\r\n            hashFn: currentHashFn,\r\n            query: query,\r\n            tag: tag\r\n        };\r\n        this.listens_[pathString][queryId] = listenSpec;\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!{onComplete(),\r\n     *           hashFn():!string,\r\n     *           query: !Query,\r\n     *           tag: ?number}} listenSpec\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.sendListen_ = function (listenSpec) {\r\n        var _this = this;\r\n        var query = listenSpec.query;\r\n        var pathString = query.path.toString();\r\n        var queryId = query.queryIdentifier();\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        var req = { /*path*/ p: pathString };\r\n        var action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query.queryObject();\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, function (message) {\r\n            var payload = message[ /*data*/'d'];\r\n            var status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            var currentListenSpec = _this.listens_[pathString] && _this.listens_[pathString][queryId];\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                _this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    _this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @param {*} payload\r\n     * @param {!Query} query\r\n     * @private\r\n     */\r\n    PersistentConnection.warnOnListenWarnings_ = function (payload, query) {\r\n        if (payload && typeof payload === 'object' && util.contains(payload, 'w')) {\r\n            var warnings = util.safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                var indexSpec = '\".indexOn\": \"' +\r\n                    query\r\n                        .getQueryParams()\r\n                        .getIndex()\r\n                        .toString() +\r\n                    '\"';\r\n                var indexPath = query.path.toString();\r\n                warn(\"Using an unspecified index. Your data will be downloaded and \" +\r\n                    (\"filtered on the client. Consider adding \" + indexSpec + \" at \") +\r\n                    (indexPath + \" to your security rules for better performance.\"));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.refreshAuthToken = function (token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, function () { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    };\r\n    /**\r\n     * @param {!string} credential\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        var isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || util.isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    };\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    PersistentConnection.prototype.tryAuth = function () {\r\n        var _this = this;\r\n        if (this.connected_ && this.authToken_) {\r\n            var token_1 = this.authToken_;\r\n            var authMethod = util.isValidFormat(token_1) ? 'auth' : 'gauth';\r\n            var requestData = { cred: token_1 };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, function (res) {\r\n                var status = res[ /*status*/'s'];\r\n                var data = res[ /*data*/'d'] || 'error';\r\n                if (_this.authToken_ === token_1) {\r\n                    if (status === 'ok') {\r\n                        _this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        _this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.unlisten = function (query, tag) {\r\n        var pathString = query.path.toString();\r\n        var queryId = query.queryIdentifier();\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        util.assert(query.getQueryParams().isDefault() ||\r\n            !query.getQueryParams().loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        var listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        var req = { /*path*/ p: pathString };\r\n        var action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'o',\r\n                data: data,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'om',\r\n                data: data,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {\r\n        var request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, function (response) {\r\n            if (onComplete) {\r\n                setTimeout(function () {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    };\r\n    PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {\r\n        var request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined)\r\n            request[ /*hash*/'h'] = hash;\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action: action,\r\n            request: request,\r\n            onComplete: onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        var index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendPut_ = function (index) {\r\n        var _this = this;\r\n        var action = this.outstandingPuts_[index].action;\r\n        var request = this.outstandingPuts_[index].request;\r\n        var onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, function (message) {\r\n            _this.log_(action + ' response', message);\r\n            delete _this.outstandingPuts_[index];\r\n            _this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (_this.outstandingPutCount_ === 0) {\r\n                _this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete)\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n        });\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.reportStats = function (stats) {\r\n        var _this = this;\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            var request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, function (result) {\r\n                var status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    var errorReason = result[ /* data */'d'];\r\n                    _this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @param {*} message\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.onDataMessage_ = function (message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + util.stringify(message));\r\n            var reqNum = message['r'];\r\n            var onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onDataPush_ = function (action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd')\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        else if (action === 'm')\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        else if (action === 'c')\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        else if (action === 'ac')\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        else if (action === 'sd')\r\n            this.onSecurityDebugPacket_(body);\r\n        else\r\n            error('Unrecognized action received from server: ' +\r\n                util.stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n    };\r\n    PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    };\r\n    PersistentConnection.prototype.scheduleConnect_ = function (timeout) {\r\n        var _this = this;\r\n        util.assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(function () {\r\n            _this.establishConnectionTimer_ = null;\r\n            _this.establishConnection_();\r\n        }, Math.floor(timeout));\r\n    };\r\n    /**\r\n     * @param {boolean} visible\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.onVisible_ = function (visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    };\r\n    PersistentConnection.prototype.onOnline_ = function (online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onRealtimeDisconnect_ = function () {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT)\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    };\r\n    PersistentConnection.prototype.establishConnection_ = function () {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            var onDataMessage_1 = this.onDataMessage_.bind(this);\r\n            var onReady_1 = this.onReady_.bind(this);\r\n            var onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);\r\n            var connId_1 = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            var self_1 = this;\r\n            var lastSessionId_1 = this.lastSessionId;\r\n            var canceled_1 = false;\r\n            var connection_1 = null;\r\n            var closeFn_1 = function () {\r\n                if (connection_1) {\r\n                    connection_1.close();\r\n                }\r\n                else {\r\n                    canceled_1 = true;\r\n                    onDisconnect_1();\r\n                }\r\n            };\r\n            var sendRequestFn = function (msg) {\r\n                util.assert(connection_1, \"sendRequest call when we're not connected not allowed.\");\r\n                connection_1.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn_1,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            var forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            // First fetch auth token, and establish connection after fetching the token was successful\r\n            this.authTokenProvider_\r\n                .getToken(forceRefresh)\r\n                .then(function (result) {\r\n                if (!canceled_1) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    self_1.authToken_ = result && result.accessToken;\r\n                    connection_1 = new Connection(connId_1, self_1.repoInfo_, onDataMessage_1, onReady_1, onDisconnect_1, \r\n                    /* onKill= */ function (reason) {\r\n                        warn(reason + ' (' + self_1.repoInfo_.toString() + ')');\r\n                        self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId_1);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            })\r\n                .then(null, function (error$$1) {\r\n                self_1.log_('Failed to get token: ' + error$$1);\r\n                if (!canceled_1) {\r\n                    if (util.CONSTANTS.NODE_ADMIN) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error$$1);\r\n                    }\r\n                    closeFn_1();\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} reason\r\n     */\r\n    PersistentConnection.prototype.interrupt = function (reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} reason\r\n     */\r\n    PersistentConnection.prototype.resume = function (reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (util.isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {\r\n        var delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    };\r\n    PersistentConnection.prototype.cancelSentTransactions_ = function () {\r\n        for (var i = 0; i < this.outstandingPuts_.length; i++) {\r\n            var put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete)\r\n                    put.onComplete('disconnect');\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0)\r\n            this.outstandingPuts_ = [];\r\n    };\r\n    /**\r\n     * @param {!string} pathString\r\n     * @param {Array.<*>=} query\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        var queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(function (q) { return ObjectToUniqueKey(q); }).join('$');\r\n        }\r\n        var listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete)\r\n            listen.onComplete('permission_denied');\r\n    };\r\n    /**\r\n     * @param {!string} pathString\r\n     * @param {!string} queryId\r\n     * @return {{queries:Array.<Query>, onComplete:function(string)}}\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {\r\n        var normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        var listen;\r\n        if (this.listens_[normalizedPathString] !== undefined) {\r\n            listen = this.listens_[normalizedPathString][queryId];\r\n            delete this.listens_[normalizedPathString][queryId];\r\n            if (util.getCount(this.listens_[normalizedPathString]) === 0) {\r\n                delete this.listens_[normalizedPathString];\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    };\r\n    PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.restoreState_ = function () {\r\n        var _this = this;\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        util.forEach(this.listens_, function (pathString, queries) {\r\n            util.forEach(queries, function (key, listenSpec) {\r\n                _this.sendListen_(listenSpec);\r\n            });\r\n        });\r\n        for (var i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i])\r\n                this.sendPut_(i);\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            var request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n    };\r\n    /**\r\n     * Sends client stats for first connection\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.sendConnectStats_ = function () {\r\n        var stats = {};\r\n        var clientName = 'js';\r\n        if (util.CONSTANTS.NODE_ADMIN) {\r\n            clientName = 'admin_node';\r\n        }\r\n        else if (util.CONSTANTS.NODE_CLIENT) {\r\n            clientName = 'node';\r\n        }\r\n        stats['sdk.' + clientName + '.' + firebase.SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (util.isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (util.isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.shouldReconnect_ = function () {\r\n        var online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return util.isEmpty(this.interruptReasons_) && online;\r\n    };\r\n    /**\r\n     * @private\r\n     */\r\n    PersistentConnection.nextPersistentConnectionId_ = 0;\r\n    /**\r\n     * Counter for number of connections created. Mainly used for tagging in the logs\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    PersistentConnection.nextConnectionId_ = 0;\r\n    return PersistentConnection;\r\n}(ServerActions));\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nvar ReadonlyRestClient = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ReadonlyRestClient, _super);\r\n    /**\r\n     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\r\n     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\r\n     * @param {AuthTokenProvider} authTokenProvider_\r\n     * @implements {ServerActions}\r\n     */\r\n    function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.repoInfo_ = repoInfo_;\r\n        _this.onDataUpdate_ = onDataUpdate_;\r\n        _this.authTokenProvider_ = authTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        _this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         *\r\n         * @private {!Object.<string, !Object>}\r\n         */\r\n        _this.listens_ = {};\r\n        return _this;\r\n    }\r\n    ReadonlyRestClient.prototype.reportStats = function (stats) {\r\n        throw new Error('Method not implemented.');\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @param {?number=} tag\r\n     * @return {string}\r\n     * @private\r\n     */\r\n    ReadonlyRestClient.getListenId_ = function (query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            util.assert(query.getQueryParams().isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query.path.toString();\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {\r\n        var _this = this;\r\n        var pathString = query.path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query.queryIdentifier());\r\n        // Mark this listener so we can tell if it's removed.\r\n        var listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        var thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        var queryStringParameters = query\r\n            .getQueryParams()\r\n            .toRestQueryStringParameters();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, function (error$$1, result) {\r\n            var data = result;\r\n            if (error$$1 === 404) {\r\n                data = null;\r\n                error$$1 = null;\r\n            }\r\n            if (error$$1 === null) {\r\n                _this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (util.safeGet(_this.listens_, listenId) === thisListen) {\r\n                var status_1;\r\n                if (!error$$1) {\r\n                    status_1 = 'ok';\r\n                }\r\n                else if (error$$1 == 401) {\r\n                    status_1 = 'permission_denied';\r\n                }\r\n                else {\r\n                    status_1 = 'rest_error:' + error$$1;\r\n                }\r\n                onComplete(status_1, null);\r\n            }\r\n        });\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.unlisten = function (query, tag) {\r\n        var listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.refreshAuthToken = function (token) {\r\n        // no-op since we just always call getToken.\r\n    };\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     *\r\n     * @param {!string} pathString\r\n     * @param {!Object.<string, *>} queryStringParameters\r\n     * @param {?function(?number, *=)} callback\r\n     * @private\r\n     */\r\n    ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {\r\n        var _this = this;\r\n        if (queryStringParameters === void 0) { queryStringParameters = {}; }\r\n        queryStringParameters['format'] = 'export';\r\n        this.authTokenProvider_\r\n            .getToken(/*forceRefresh=*/ false)\r\n            .then(function (authTokenData) {\r\n            var authToken = authTokenData && authTokenData.accessToken;\r\n            if (authToken) {\r\n                queryStringParameters['auth'] = authToken;\r\n            }\r\n            var url = (_this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                _this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                _this.repoInfo_.namespace +\r\n                util.querystring(queryStringParameters);\r\n            _this.log_('Sending REST request for ' + url);\r\n            var xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = function () {\r\n                if (callback && xhr.readyState === 4) {\r\n                    _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    var res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = util.jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    };\r\n    return ReadonlyRestClient;\r\n}(ServerActions));\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nvar Repo = /** @class */ (function () {\r\n    /**\r\n     * @param {!RepoInfo} repoInfo_\r\n     * @param {boolean} forceRestClient\r\n     * @param {!FirebaseApp} app\r\n     */\r\n    function Repo(repoInfo_, forceRestClient, app) {\r\n        var _this = this;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.app = app;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        // A list of data pieces and paths to be set when this client disconnects.\r\n        this.onDisconnect_ = new SparseSnapshotTree();\r\n        /**\r\n         * TODO: This should be @private but it's used by test_access.js and internal.js\r\n         * @type {?PersistentConnection}\r\n         */\r\n        this.persistentConnection_ = null;\r\n        /** @type {!AuthTokenProvider} */\r\n        var authTokenProvider = new AuthTokenProvider(app);\r\n        this.stats_ = StatsManager.getCollection(repoInfo_);\r\n        if (forceRestClient || beingCrawled()) {\r\n            this.server_ = new ReadonlyRestClient(this.repoInfo_, this.onDataUpdate_.bind(this), authTokenProvider);\r\n            // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n            setTimeout(this.onConnectStatus_.bind(this, true), 0);\r\n        }\r\n        else {\r\n            var authOverride = app.options['databaseAuthVariableOverride'];\r\n            // Validate authOverride\r\n            if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n                if (typeof authOverride !== 'object') {\r\n                    throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n                }\r\n                try {\r\n                    util.stringify(authOverride);\r\n                }\r\n                catch (e) {\r\n                    throw new Error('Invalid authOverride provided: ' + e);\r\n                }\r\n            }\r\n            this.persistentConnection_ = new PersistentConnection(this.repoInfo_, this.onDataUpdate_.bind(this), this.onConnectStatus_.bind(this), this.onServerInfoUpdate_.bind(this), authTokenProvider, authOverride);\r\n            this.server_ = this.persistentConnection_;\r\n        }\r\n        authTokenProvider.addTokenChangeListener(function (token) {\r\n            _this.server_.refreshAuthToken(token);\r\n        });\r\n        // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n        // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n        this.statsReporter_ = StatsManager.getOrCreateReporter(repoInfo_, function () { return new StatsReporter(_this.stats_, _this.server_); });\r\n        this.transactions_init_();\r\n        // Used for .info.\r\n        this.infoData_ = new SnapshotHolder();\r\n        this.infoSyncTree_ = new SyncTree({\r\n            startListening: function (query, tag, currentHashFn, onComplete) {\r\n                var infoEvents = [];\r\n                var node = _this.infoData_.getNode(query.path);\r\n                // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n                // on initial data...\r\n                if (!node.isEmpty()) {\r\n                    infoEvents = _this.infoSyncTree_.applyServerOverwrite(query.path, node);\r\n                    setTimeout(function () {\r\n                        onComplete('ok');\r\n                    }, 0);\r\n                }\r\n                return infoEvents;\r\n            },\r\n            stopListening: function () { }\r\n        });\r\n        this.updateInfo_('connected', false);\r\n        this.serverSyncTree_ = new SyncTree({\r\n            startListening: function (query, tag, currentHashFn, onComplete) {\r\n                _this.server_.listen(query, currentHashFn, tag, function (status, data) {\r\n                    var events = onComplete(status, data);\r\n                    _this.eventQueue_.raiseEventsForChangedPath(query.path, events);\r\n                });\r\n                // No synchronous events for network-backed sync trees\r\n                return [];\r\n            },\r\n            stopListening: function (query, tag) {\r\n                _this.server_.unlisten(query, tag);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @return {string}  The URL corresponding to the root of this Firebase.\r\n     */\r\n    Repo.prototype.toString = function () {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    };\r\n    /**\r\n     * @return {!string} The namespace represented by the repo.\r\n     */\r\n    Repo.prototype.name = function () {\r\n        return this.repoInfo_.namespace;\r\n    };\r\n    /**\r\n     * @return {!number} The time in milliseconds, taking the server offset into account if we have one.\r\n     */\r\n    Repo.prototype.serverTime = function () {\r\n        var offsetNode = this.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n        var offset = offsetNode.val() || 0;\r\n        return new Date().getTime() + offset;\r\n    };\r\n    /**\r\n     * Generate ServerValues using some variables from the repo object.\r\n     * @return {!Object}\r\n     */\r\n    Repo.prototype.generateServerValues = function () {\r\n        return generateWithValues({\r\n            timestamp: this.serverTime()\r\n        });\r\n    };\r\n    /**\r\n     * Called by realtime when we get new messages from the server.\r\n     *\r\n     * @private\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {boolean} isMerge\r\n     * @param {?number} tag\r\n     */\r\n    Repo.prototype.onDataUpdate_ = function (pathString, data, isMerge, tag) {\r\n        // For testing.\r\n        this.dataUpdateCount++;\r\n        var path = new Path(pathString);\r\n        data = this.interceptServerDataCallback_\r\n            ? this.interceptServerDataCallback_(pathString, data)\r\n            : data;\r\n        var events = [];\r\n        if (tag) {\r\n            if (isMerge) {\r\n                var taggedChildren = util.map(data, function (raw) {\r\n                    return nodeFromJSON$1(raw);\r\n                });\r\n                events = this.serverSyncTree_.applyTaggedQueryMerge(path, taggedChildren, tag);\r\n            }\r\n            else {\r\n                var taggedSnap = nodeFromJSON$1(data);\r\n                events = this.serverSyncTree_.applyTaggedQueryOverwrite(path, taggedSnap, tag);\r\n            }\r\n        }\r\n        else if (isMerge) {\r\n            var changedChildren = util.map(data, function (raw) {\r\n                return nodeFromJSON$1(raw);\r\n            });\r\n            events = this.serverSyncTree_.applyServerMerge(path, changedChildren);\r\n        }\r\n        else {\r\n            var snap = nodeFromJSON$1(data);\r\n            events = this.serverSyncTree_.applyServerOverwrite(path, snap);\r\n        }\r\n        var affectedPath = path;\r\n        if (events.length > 0) {\r\n            // Since we have a listener outstanding for each transaction, receiving any events\r\n            // is a proxy for some change having occurred.\r\n            affectedPath = this.rerunTransactions_(path);\r\n        }\r\n        this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);\r\n    };\r\n    /**\r\n     * TODO: This should be @private but it's used by test_access.js and internal.js\r\n     * @param {?function(!string, *):*} callback\r\n     * @private\r\n     */\r\n    Repo.prototype.interceptServerData_ = function (callback) {\r\n        this.interceptServerDataCallback_ = callback;\r\n    };\r\n    /**\r\n     * @param {!boolean} connectStatus\r\n     * @private\r\n     */\r\n    Repo.prototype.onConnectStatus_ = function (connectStatus) {\r\n        this.updateInfo_('connected', connectStatus);\r\n        if (connectStatus === false) {\r\n            this.runOnDisconnectEvents_();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Object} updates\r\n     * @private\r\n     */\r\n    Repo.prototype.onServerInfoUpdate_ = function (updates) {\r\n        var _this = this;\r\n        each(updates, function (value, key) {\r\n            _this.updateInfo_(key, value);\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     * @param {!string} pathString\r\n     * @param {*} value\r\n     * @private\r\n     */\r\n    Repo.prototype.updateInfo_ = function (pathString, value) {\r\n        var path = new Path('/.info/' + pathString);\r\n        var newNode = nodeFromJSON$1(value);\r\n        this.infoData_.updateSnapshot(path, newNode);\r\n        var events = this.infoSyncTree_.applyServerOverwrite(path, newNode);\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n    };\r\n    /**\r\n     * @return {!number}\r\n     * @private\r\n     */\r\n    Repo.prototype.getNextWriteId_ = function () {\r\n        return this.nextWriteId_++;\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} newVal\r\n     * @param {number|string|null} newPriority\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.setWithPriority = function (path, newVal, newPriority, onComplete) {\r\n        var _this = this;\r\n        this.log_('set', {\r\n            path: path.toString(),\r\n            value: newVal,\r\n            priority: newPriority\r\n        });\r\n        // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n        // (b) store unresolved paths on JSON parse\r\n        var serverValues = this.generateServerValues();\r\n        var newNodeUnresolved = nodeFromJSON$1(newVal, newPriority);\r\n        var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\r\n        var writeId = this.getNextWriteId_();\r\n        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, writeId, true);\r\n        this.eventQueue_.queueEvents(events);\r\n        this.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), function (status, errorReason) {\r\n            var success = status === 'ok';\r\n            if (!success) {\r\n                warn('set at ' + path + ' failed: ' + status);\r\n            }\r\n            var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId, !success);\r\n            _this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n        var affectedPath = this.abortTransactions_(path);\r\n        this.rerunTransactions_(affectedPath);\r\n        // We queued the events above, so just flush the queue here\r\n        this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!Object} childrenToMerge\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.update = function (path, childrenToMerge, onComplete) {\r\n        var _this = this;\r\n        this.log_('update', { path: path.toString(), value: childrenToMerge });\r\n        // Start with our existing data and merge each child into it.\r\n        var empty = true;\r\n        var serverValues = this.generateServerValues();\r\n        var changedChildren = {};\r\n        util.forEach(childrenToMerge, function (changedKey, changedValue) {\r\n            empty = false;\r\n            var newNodeUnresolved = nodeFromJSON$1(changedValue);\r\n            changedChildren[changedKey] = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\r\n        });\r\n        if (!empty) {\r\n            var writeId_1 = this.getNextWriteId_();\r\n            var events = this.serverSyncTree_.applyUserMerge(path, changedChildren, writeId_1);\r\n            this.eventQueue_.queueEvents(events);\r\n            this.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {\r\n                var success = status === 'ok';\r\n                if (!success) {\r\n                    warn('update at ' + path + ' failed: ' + status);\r\n                }\r\n                var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId_1, !success);\r\n                var affectedPath = clearEvents.length > 0 ? _this.rerunTransactions_(path) : path;\r\n                _this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);\r\n                _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n            });\r\n            util.forEach(childrenToMerge, function (changedPath) {\r\n                var affectedPath = _this.abortTransactions_(path.child(changedPath));\r\n                _this.rerunTransactions_(affectedPath);\r\n            });\r\n            // We queued the events above, so just flush the queue here\r\n            this.eventQueue_.raiseEventsForChangedPath(path, []);\r\n        }\r\n        else {\r\n            log(\"update() called with empty data.  Don't do anything.\");\r\n            this.callOnCompleteCallback(onComplete, 'ok');\r\n        }\r\n    };\r\n    /**\r\n     * Applies all of the changes stored up in the onDisconnect_ tree.\r\n     * @private\r\n     */\r\n    Repo.prototype.runOnDisconnectEvents_ = function () {\r\n        var _this = this;\r\n        this.log_('onDisconnectEvents');\r\n        var serverValues = this.generateServerValues();\r\n        var resolvedOnDisconnectTree = resolveDeferredValueTree(this.onDisconnect_, serverValues);\r\n        var events = [];\r\n        resolvedOnDisconnectTree.forEachTree(Path.Empty, function (path, snap) {\r\n            events = events.concat(_this.serverSyncTree_.applyServerOverwrite(path, snap));\r\n            var affectedPath = _this.abortTransactions_(path);\r\n            _this.rerunTransactions_(affectedPath);\r\n        });\r\n        this.onDisconnect_ = new SparseSnapshotTree();\r\n        this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectCancel = function (path, onComplete) {\r\n        var _this = this;\r\n        this.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.forget(path);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} value\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectSet = function (path, value, onComplete) {\r\n        var _this = this;\r\n        var newNode = nodeFromJSON$1(value);\r\n        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.remember(path, newNode);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} value\r\n     * @param {*} priority\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectSetWithPriority = function (path, value, priority, onComplete) {\r\n        var _this = this;\r\n        var newNode = nodeFromJSON$1(value, priority);\r\n        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.remember(path, newNode);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} childrenToMerge\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectUpdate = function (path, childrenToMerge, onComplete) {\r\n        var _this = this;\r\n        if (util.isEmpty(childrenToMerge)) {\r\n            log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n            this.callOnCompleteCallback(onComplete, 'ok');\r\n            return;\r\n        }\r\n        this.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                util.forEach(childrenToMerge, function (childName, childNode) {\r\n                    var newChildNode = nodeFromJSON$1(childNode);\r\n                    _this.onDisconnect_.remember(path.child(childName), newChildNode);\r\n                });\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     */\r\n    Repo.prototype.addEventCallbackForQuery = function (query, eventRegistration) {\r\n        var events;\r\n        if (query.path.getFront() === '.info') {\r\n            events = this.infoSyncTree_.addEventRegistration(query, eventRegistration);\r\n        }\r\n        else {\r\n            events = this.serverSyncTree_.addEventRegistration(query, eventRegistration);\r\n        }\r\n        this.eventQueue_.raiseEventsAtPath(query.path, events);\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration\r\n     */\r\n    Repo.prototype.removeEventCallbackForQuery = function (query, eventRegistration) {\r\n        // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n        // a little bit by handling the return values anyways.\r\n        var events;\r\n        if (query.path.getFront() === '.info') {\r\n            events = this.infoSyncTree_.removeEventRegistration(query, eventRegistration);\r\n        }\r\n        else {\r\n            events = this.serverSyncTree_.removeEventRegistration(query, eventRegistration);\r\n        }\r\n        this.eventQueue_.raiseEventsAtPath(query.path, events);\r\n    };\r\n    Repo.prototype.interrupt = function () {\r\n        if (this.persistentConnection_) {\r\n            this.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n        }\r\n    };\r\n    Repo.prototype.resume = function () {\r\n        if (this.persistentConnection_) {\r\n            this.persistentConnection_.resume(INTERRUPT_REASON);\r\n        }\r\n    };\r\n    Repo.prototype.stats = function (showDelta) {\r\n        if (showDelta === void 0) { showDelta = false; }\r\n        if (typeof console === 'undefined')\r\n            return;\r\n        var stats;\r\n        if (showDelta) {\r\n            if (!this.statsListener_)\r\n                this.statsListener_ = new StatsListener(this.stats_);\r\n            stats = this.statsListener_.get();\r\n        }\r\n        else {\r\n            stats = this.stats_.get();\r\n        }\r\n        var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {\r\n            return Math.max(currentValue.length, previousValue);\r\n        }, 0);\r\n        util.forEach(stats, function (stat, value) {\r\n            // pad stat names to be the same length (plus 2 extra spaces).\r\n            for (var i = stat.length; i < longestName + 2; i++)\r\n                stat += ' ';\r\n            console.log(stat + value);\r\n        });\r\n    };\r\n    Repo.prototype.statsIncrementCounter = function (metric) {\r\n        this.stats_.incrementCounter(metric);\r\n        this.statsReporter_.includeStat(metric);\r\n    };\r\n    /**\r\n     * @param {...*} var_args\r\n     * @private\r\n     */\r\n    Repo.prototype.log_ = function () {\r\n        var var_args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            var_args[_i] = arguments[_i];\r\n        }\r\n        var prefix = '';\r\n        if (this.persistentConnection_) {\r\n            prefix = this.persistentConnection_.id + ':';\r\n        }\r\n        log.apply(void 0, [prefix].concat(var_args));\r\n    };\r\n    /**\r\n     * @param {?function(?Error, *=)} callback\r\n     * @param {!string} status\r\n     * @param {?string=} errorReason\r\n     */\r\n    Repo.prototype.callOnCompleteCallback = function (callback, status, errorReason) {\r\n        if (callback) {\r\n            exceptionGuard(function () {\r\n                if (status == 'ok') {\r\n                    callback(null);\r\n                }\r\n                else {\r\n                    var code = (status || 'error').toUpperCase();\r\n                    var message = code;\r\n                    if (errorReason)\r\n                        message += ': ' + errorReason;\r\n                    var error$$1 = new Error(message);\r\n                    error$$1.code = code;\r\n                    callback(error$$1);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    Object.defineProperty(Repo.prototype, \"database\", {\r\n        get: function () {\r\n            return this.__database || (this.__database = new Database(this));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Repo;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\r\nvar RangedFilter = /** @class */ (function () {\r\n    /**\r\n     * @param {!QueryParams} params\r\n     */\r\n    function RangedFilter(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n    }\r\n    /**\r\n     * @return {!NamedNode}\r\n     */\r\n    RangedFilter.prototype.getStartPost = function () {\r\n        return this.startPost_;\r\n    };\r\n    /**\r\n     * @return {!NamedNode}\r\n     */\r\n    RangedFilter.prototype.getEndPost = function () {\r\n        return this.endPost_;\r\n    };\r\n    /**\r\n     * @param {!NamedNode} node\r\n     * @return {boolean}\r\n     */\r\n    RangedFilter.prototype.matches = function (node) {\r\n        return (this.index_.compare(this.getStartPost(), node) <= 0 &&\r\n            this.index_.compare(node, this.getEndPost()) <= 0);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        var filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        var self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.filtersNodes = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.getIndexedFilter = function () {\r\n        return this.indexedFilter_;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @param {!QueryParams} params\r\n     * @return {!NamedNode}\r\n     * @private\r\n     */\r\n    RangedFilter.getStartPost_ = function (params) {\r\n        if (params.hasStart()) {\r\n            var startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!QueryParams} params\r\n     * @return {!NamedNode}\r\n     * @private\r\n     */\r\n    RangedFilter.getEndPost_ = function (params) {\r\n        if (params.hasEnd()) {\r\n            var endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    };\r\n    return RangedFilter;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\r\nvar LimitedFilter = /** @class */ (function () {\r\n    /**\r\n     * @param {!QueryParams} params\r\n     */\r\n    function LimitedFilter(params) {\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        var filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                var iterator = void 0;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                var count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    var next = iterator.getNext();\r\n                    var inRange = void 0;\r\n                    if (this.reverse_) {\r\n                        inRange =\r\n                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\r\n                    }\r\n                    else {\r\n                        inRange =\r\n                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\r\n                    }\r\n                    if (inRange) {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        // if we have reached the end post, we cannot keep adding elemments\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                var startPost = void 0;\r\n                var endPost = void 0;\r\n                var cmp = void 0;\r\n                var iterator = void 0;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getEndPost();\r\n                    endPost = this.rangedFilter_.getStartPost();\r\n                    var indexCompare_1 = this.index_.getCompare();\r\n                    cmp = function (a, b) { return indexCompare_1(b, a); };\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getStartPost();\r\n                    endPost = this.rangedFilter_.getEndPost();\r\n                    cmp = this.index_.getCompare();\r\n                }\r\n                var count = 0;\r\n                var foundStartPost = false;\r\n                while (iterator.hasNext()) {\r\n                    var next = iterator.getNext();\r\n                    if (!foundStartPost && cmp(startPost, next) <= 0) {\r\n                        // start adding\r\n                        foundStartPost = true;\r\n                    }\r\n                    var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.filtersNodes = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.getIndexedFilter = function () {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @param {!Node} snap\r\n     * @param {string} childKey\r\n     * @param {!Node} childSnap\r\n     * @param {!CompleteChildSource} source\r\n     * @param {?ChildChangeAccumulator} changeAccumulator\r\n     * @return {!Node}\r\n     * @private\r\n     */\r\n    LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        var cmp;\r\n        if (this.reverse_) {\r\n            var indexCmp_1 = this.index_.getCompare();\r\n            cmp = function (a, b) { return indexCmp_1(b, a); };\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        var oldEventCache = snap;\r\n        util.assert(oldEventCache.numChildren() == this.limit_, '');\r\n        var newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        var windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        var inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            var oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name == childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childChangedChange(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childRemovedChange(childKey, oldChildSnap));\r\n                }\r\n                var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(Change.childAddedChange(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childRemovedChange(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(Change.childAddedChange(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    };\r\n    return LimitedFilter;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n * @constructor\r\n */\r\nvar QueryParams = /** @class */ (function () {\r\n    function QueryParams() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasStart = function () {\r\n        return this.startSet_;\r\n    };\r\n    /**\r\n     * @return {boolean} True if it would return from left.\r\n     */\r\n    QueryParams.prototype.isViewFromLeft = function () {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return (this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT);\r\n        }\r\n    };\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     * @return {*}\r\n     */\r\n    QueryParams.prototype.getIndexStartValue = function () {\r\n        util.assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     * @return {!string}\r\n     */\r\n    QueryParams.prototype.getIndexStartName = function () {\r\n        util.assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasEnd = function () {\r\n        return this.endSet_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * @return {*}\r\n     */\r\n    QueryParams.prototype.getIndexEndValue = function () {\r\n        util.assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     * @return {!string}\r\n     */\r\n    QueryParams.prototype.getIndexEndName = function () {\r\n        util.assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasLimit = function () {\r\n        return this.limitSet_;\r\n    };\r\n    /**\r\n     * @return {boolean} True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    QueryParams.prototype.hasAnchoredLimit = function () {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    };\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     * @return {!number}\r\n     */\r\n    QueryParams.prototype.getLimit = function () {\r\n        util.assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    };\r\n    /**\r\n     * @return {!Index}\r\n     */\r\n    QueryParams.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @return {!QueryParams}\r\n     * @private\r\n     */\r\n    QueryParams.prototype.copy_ = function () {\r\n        var copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limit = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = '';\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limitToFirst = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limitToLast = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {?string=} key\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.startAt = function (indexValue, key) {\r\n        var newParams = this.copy_();\r\n        newParams.startSet_ = true;\r\n        if (!(indexValue !== undefined)) {\r\n            indexValue = null;\r\n        }\r\n        newParams.indexStartValue_ = indexValue;\r\n        if (key != null) {\r\n            newParams.startNameSet_ = true;\r\n            newParams.indexStartName_ = key;\r\n        }\r\n        else {\r\n            newParams.startNameSet_ = false;\r\n            newParams.indexStartName_ = '';\r\n        }\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {?string=} key\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.endAt = function (indexValue, key) {\r\n        var newParams = this.copy_();\r\n        newParams.endSet_ = true;\r\n        if (!(indexValue !== undefined)) {\r\n            indexValue = null;\r\n        }\r\n        newParams.indexEndValue_ = indexValue;\r\n        if (key !== undefined) {\r\n            newParams.endNameSet_ = true;\r\n            newParams.indexEndName_ = key;\r\n        }\r\n        else {\r\n            newParams.endNameSet_ = false;\r\n            newParams.indexEndName_ = '';\r\n        }\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!Index} index\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.orderBy = function (index) {\r\n        var newParams = this.copy_();\r\n        newParams.index_ = index;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @return {!Object}\r\n     */\r\n    QueryParams.prototype.getQueryObject = function () {\r\n        var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\r\n        var obj = {};\r\n        if (this.startSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\r\n            if (this.startNameSet_) {\r\n                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\r\n            }\r\n        }\r\n        if (this.endSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\r\n            if (this.endNameSet_) {\r\n                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\r\n            }\r\n        }\r\n        if (this.limitSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\r\n            var viewFrom = this.viewFrom_;\r\n            if (viewFrom === '') {\r\n                if (this.isViewFromLeft()) {\r\n                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\r\n                }\r\n                else {\r\n                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\r\n                }\r\n            }\r\n            obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\r\n        }\r\n        // For now, priority index is the default, so we only specify if it's some other index\r\n        if (this.index_ !== PRIORITY_INDEX) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\r\n        }\r\n        return obj;\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.loadsAllData = function () {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.isDefault = function () {\r\n        return this.loadsAllData() && this.index_ == PRIORITY_INDEX;\r\n    };\r\n    /**\r\n     * @return {!NodeFilter}\r\n     */\r\n    QueryParams.prototype.getNodeFilter = function () {\r\n        if (this.loadsAllData()) {\r\n            return new IndexedFilter(this.getIndex());\r\n        }\r\n        else if (this.hasLimit()) {\r\n            return new LimitedFilter(this);\r\n        }\r\n        else {\r\n            return new RangedFilter(this);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a set of REST query string parameters representing this query.\r\n     *\r\n     * @return {!Object.<string,*>} query string parameters\r\n     */\r\n    QueryParams.prototype.toRestQueryStringParameters = function () {\r\n        var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\r\n        var qs = {};\r\n        if (this.isDefault()) {\r\n            return qs;\r\n        }\r\n        var orderBy;\r\n        if (this.index_ === PRIORITY_INDEX) {\r\n            orderBy = REST_CONSTANTS.PRIORITY_INDEX;\r\n        }\r\n        else if (this.index_ === VALUE_INDEX) {\r\n            orderBy = REST_CONSTANTS.VALUE_INDEX;\r\n        }\r\n        else if (this.index_ === KEY_INDEX) {\r\n            orderBy = REST_CONSTANTS.KEY_INDEX;\r\n        }\r\n        else {\r\n            util.assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n            orderBy = this.index_.toString();\r\n        }\r\n        qs[REST_CONSTANTS.ORDER_BY] = util.stringify(orderBy);\r\n        if (this.startSet_) {\r\n            qs[REST_CONSTANTS.START_AT] = util.stringify(this.indexStartValue_);\r\n            if (this.startNameSet_) {\r\n                qs[REST_CONSTANTS.START_AT] += ',' + util.stringify(this.indexStartName_);\r\n            }\r\n        }\r\n        if (this.endSet_) {\r\n            qs[REST_CONSTANTS.END_AT] = util.stringify(this.indexEndValue_);\r\n            if (this.endNameSet_) {\r\n                qs[REST_CONSTANTS.END_AT] += ',' + util.stringify(this.indexEndName_);\r\n            }\r\n        }\r\n        if (this.limitSet_) {\r\n            if (this.isViewFromLeft()) {\r\n                qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\r\n            }\r\n            else {\r\n                qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\r\n            }\r\n        }\r\n        return qs;\r\n    };\r\n    /**\r\n     * Wire Protocol Constants\r\n     * @const\r\n     * @enum {string}\r\n     * @private\r\n     */\r\n    QueryParams.WIRE_PROTOCOL_CONSTANTS_ = {\r\n        INDEX_START_VALUE: 'sp',\r\n        INDEX_START_NAME: 'sn',\r\n        INDEX_END_VALUE: 'ep',\r\n        INDEX_END_NAME: 'en',\r\n        LIMIT: 'l',\r\n        VIEW_FROM: 'vf',\r\n        VIEW_FROM_LEFT: 'l',\r\n        VIEW_FROM_RIGHT: 'r',\r\n        INDEX: 'i'\r\n    };\r\n    /**\r\n     * REST Query Constants\r\n     * @const\r\n     * @enum {string}\r\n     * @private\r\n     */\r\n    QueryParams.REST_QUERY_CONSTANTS_ = {\r\n        ORDER_BY: 'orderBy',\r\n        PRIORITY_INDEX: '$priority',\r\n        VALUE_INDEX: '$value',\r\n        KEY_INDEX: '$key',\r\n        START_AT: 'startAt',\r\n        END_AT: 'endAt',\r\n        LIMIT_TO_FIRST: 'limitToFirst',\r\n        LIMIT_TO_LAST: 'limitToLast'\r\n    };\r\n    /**\r\n     * Default, empty query parameters\r\n     * @type {!QueryParams}\r\n     * @const\r\n     */\r\n    QueryParams.DEFAULT = new QueryParams();\r\n    return QueryParams;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Reference = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Reference, _super);\r\n    /**\r\n     * Call options:\r\n     *   new Reference(Repo, Path) or\r\n     *   new Reference(url: string, string|RepoManager)\r\n     *\r\n     * Externally - this is the firebase.database.Reference type.\r\n     *\r\n     * @param {!Repo} repo\r\n     * @param {(!Path)} path\r\n     * @extends {Query}\r\n     */\r\n    function Reference(repo, path) {\r\n        var _this = this;\r\n        if (!(repo instanceof Repo)) {\r\n            throw new Error('new Reference() no longer supported - use app.database().');\r\n        }\r\n        // call Query's constructor, passing in the repo and path.\r\n        _this = _super.call(this, repo, path, QueryParams.DEFAULT, false) || this;\r\n        return _this;\r\n    }\r\n    /** @return {?string} */\r\n    Reference.prototype.getKey = function () {\r\n        util.validateArgCount('Reference.key', 0, 0, arguments.length);\r\n        if (this.path.isEmpty())\r\n            return null;\r\n        else\r\n            return this.path.getBack();\r\n    };\r\n    /**\r\n     * @param {!(string|Path)} pathString\r\n     * @return {!Reference}\r\n     */\r\n    Reference.prototype.child = function (pathString) {\r\n        util.validateArgCount('Reference.child', 1, 1, arguments.length);\r\n        if (typeof pathString === 'number') {\r\n            pathString = String(pathString);\r\n        }\r\n        else if (!(pathString instanceof Path)) {\r\n            if (this.path.getFront() === null)\r\n                validateRootPathString('Reference.child', 1, pathString, false);\r\n            else\r\n                validatePathString('Reference.child', 1, pathString, false);\r\n        }\r\n        return new Reference(this.repo, this.path.child(pathString));\r\n    };\r\n    /** @return {?Reference} */\r\n    Reference.prototype.getParent = function () {\r\n        util.validateArgCount('Reference.parent', 0, 0, arguments.length);\r\n        var parentPath = this.path.parent();\r\n        return parentPath === null ? null : new Reference(this.repo, parentPath);\r\n    };\r\n    /** @return {!Reference} */\r\n    Reference.prototype.getRoot = function () {\r\n        util.validateArgCount('Reference.root', 0, 0, arguments.length);\r\n        var ref = this;\r\n        while (ref.getParent() !== null) {\r\n            ref = ref.getParent();\r\n        }\r\n        return ref;\r\n    };\r\n    /** @return {!Database} */\r\n    Reference.prototype.databaseProp = function () {\r\n        return this.repo.database;\r\n    };\r\n    /**\r\n     * @param {*} newVal\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.set = function (newVal, onComplete) {\r\n        util.validateArgCount('Reference.set', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.set', this.path);\r\n        validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\r\n        util.validateCallback('Reference.set', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path, newVal, \r\n        /*priority=*/ null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {!Object} objectToMerge\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.update = function (objectToMerge, onComplete) {\r\n        util.validateArgCount('Reference.update', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.update', this.path);\r\n        if (Array.isArray(objectToMerge)) {\r\n            var newObjectToMerge = {};\r\n            for (var i = 0; i < objectToMerge.length; ++i) {\r\n                newObjectToMerge['' + i] = objectToMerge[i];\r\n            }\r\n            objectToMerge = newObjectToMerge;\r\n            warn('Passing an Array to Firebase.update() is deprecated. ' +\r\n                'Use set() if you want to overwrite the existing data, or ' +\r\n                'an Object with integer keys if you really do want to ' +\r\n                'only update some of the children.');\r\n        }\r\n        validateFirebaseMergeDataArg('Reference.update', 1, objectToMerge, this.path, false);\r\n        util.validateCallback('Reference.update', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.update(this.path, objectToMerge, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} newVal\r\n     * @param {string|number|null} newPriority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {\r\n        util.validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\r\n        validateWritablePath('Reference.setWithPriority', this.path);\r\n        validateFirebaseDataArg('Reference.setWithPriority', 1, newVal, this.path, false);\r\n        validatePriority('Reference.setWithPriority', 2, newPriority, false);\r\n        util.validateCallback('Reference.setWithPriority', 3, onComplete, true);\r\n        if (this.getKey() === '.length' || this.getKey() === '.keys')\r\n            throw 'Reference.setWithPriority failed: ' +\r\n                this.getKey() +\r\n                ' is a read-only object.';\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path, newVal, newPriority, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.remove = function (onComplete) {\r\n        util.validateArgCount('Reference.remove', 0, 1, arguments.length);\r\n        validateWritablePath('Reference.remove', this.path);\r\n        util.validateCallback('Reference.remove', 1, onComplete, true);\r\n        return this.set(null, onComplete);\r\n    };\r\n    /**\r\n     * @param {function(*):*} transactionUpdate\r\n     * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete\r\n     * @param {boolean=} applyLocally\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {\r\n        util.validateArgCount('Reference.transaction', 1, 3, arguments.length);\r\n        validateWritablePath('Reference.transaction', this.path);\r\n        util.validateCallback('Reference.transaction', 1, transactionUpdate, false);\r\n        util.validateCallback('Reference.transaction', 2, onComplete, true);\r\n        // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\r\n        // to expose it.\r\n        validateBoolean('Reference.transaction', 3, applyLocally, true);\r\n        if (this.getKey() === '.length' || this.getKey() === '.keys')\r\n            throw 'Reference.transaction failed: ' +\r\n                this.getKey() +\r\n                ' is a read-only object.';\r\n        if (applyLocally === undefined)\r\n            applyLocally = true;\r\n        var deferred = new util.Deferred();\r\n        if (typeof onComplete === 'function') {\r\n            deferred.promise.catch(function () { });\r\n        }\r\n        var promiseComplete = function (error$$1, committed, snapshot) {\r\n            if (error$$1) {\r\n                deferred.reject(error$$1);\r\n            }\r\n            else {\r\n                deferred.resolve(new TransactionResult(committed, snapshot));\r\n            }\r\n            if (typeof onComplete === 'function') {\r\n                onComplete(error$$1, committed, snapshot);\r\n            }\r\n        };\r\n        this.repo.startTransaction(this.path, transactionUpdate, promiseComplete, applyLocally);\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {string|number|null} priority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.setPriority = function (priority, onComplete) {\r\n        util.validateArgCount('Reference.setPriority', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.setPriority', this.path);\r\n        validatePriority('Reference.setPriority', 1, priority, false);\r\n        util.validateCallback('Reference.setPriority', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path.child('.priority'), priority, null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*=} value\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Reference}\r\n     */\r\n    Reference.prototype.push = function (value, onComplete) {\r\n        util.validateArgCount('Reference.push', 0, 2, arguments.length);\r\n        validateWritablePath('Reference.push', this.path);\r\n        validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\r\n        util.validateCallback('Reference.push', 2, onComplete, true);\r\n        var now = this.repo.serverTime();\r\n        var name = nextPushId(now);\r\n        // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\r\n        // We use child() to create handles to two different references. The first is turned into a\r\n        // ThennableReference below by adding then() and catch() methods and is used as the\r\n        // return value of push(). The second remains a regular Reference and is used as the fulfilled\r\n        // value of the first ThennableReference.\r\n        var thennablePushRef = this.child(name);\r\n        var pushRef = this.child(name);\r\n        var promise;\r\n        if (value != null) {\r\n            promise = thennablePushRef.set(value, onComplete).then(function () { return pushRef; });\r\n        }\r\n        else {\r\n            promise = Promise.resolve(pushRef);\r\n        }\r\n        thennablePushRef.then = promise.then.bind(promise);\r\n        thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n        if (typeof onComplete === 'function') {\r\n            promise.catch(function () { });\r\n        }\r\n        return thennablePushRef;\r\n    };\r\n    /**\r\n     * @return {!OnDisconnect}\r\n     */\r\n    Reference.prototype.onDisconnect = function () {\r\n        validateWritablePath('Reference.onDisconnect', this.path);\r\n        return new OnDisconnect(this.repo, this.path);\r\n    };\r\n    Object.defineProperty(Reference.prototype, \"database\", {\r\n        get: function () {\r\n            return this.databaseProp();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"key\", {\r\n        get: function () {\r\n            return this.getKey();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"parent\", {\r\n        get: function () {\r\n            return this.getParent();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"root\", {\r\n        get: function () {\r\n            return this.getRoot();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Reference;\r\n}(Query));\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nQuery.__referenceConstructor = Reference;\r\nSyncPoint.__referenceConstructor = Reference;\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Node in a Tree.\r\n */\r\nvar TreeNode = /** @class */ (function () {\r\n    function TreeNode() {\r\n        // TODO: Consider making accessors that create children and value lazily or\r\n        // separate Internal / Leaf 'types'.\r\n        this.children = {};\r\n        this.childCount = 0;\r\n        this.value = null;\r\n    }\r\n    return TreeNode;\r\n}());\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nvar Tree = /** @class */ (function () {\r\n    /**\r\n     * @template T\r\n     * @param {string=} name_ Optional name of the node.\r\n     * @param {Tree=} parent_ Optional parent node.\r\n     * @param {TreeNode=} node_ Optional node to wrap.\r\n     */\r\n    function Tree(name_, parent_, node_) {\r\n        if (name_ === void 0) { name_ = ''; }\r\n        if (parent_ === void 0) { parent_ = null; }\r\n        if (node_ === void 0) { node_ = new TreeNode(); }\r\n        this.name_ = name_;\r\n        this.parent_ = parent_;\r\n        this.node_ = node_;\r\n    }\r\n    /**\r\n     * Returns a sub-Tree for the given path.\r\n     *\r\n     * @param {!(string|Path)} pathObj Path to look up.\r\n     * @return {!Tree.<T>} Tree for path.\r\n     */\r\n    Tree.prototype.subTree = function (pathObj) {\r\n        // TODO: Require pathObj to be Path?\r\n        var path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n        var child = this, next;\r\n        while ((next = path.getFront()) !== null) {\r\n            var childNode = util.safeGet(child.node_.children, next) || new TreeNode();\r\n            child = new Tree(next, child, childNode);\r\n            path = path.popFront();\r\n        }\r\n        return child;\r\n    };\r\n    /**\r\n     * Returns the data associated with this tree node.\r\n     *\r\n     * @return {?T} The data or null if no data exists.\r\n     */\r\n    Tree.prototype.getValue = function () {\r\n        return this.node_.value;\r\n    };\r\n    /**\r\n     * Sets data to this tree node.\r\n     *\r\n     * @param {!T} value Value to set.\r\n     */\r\n    Tree.prototype.setValue = function (value) {\r\n        util.assert(typeof value !== 'undefined', 'Cannot set value to undefined');\r\n        this.node_.value = value;\r\n        this.updateParents_();\r\n    };\r\n    /**\r\n     * Clears the contents of the tree node (its value and all children).\r\n     */\r\n    Tree.prototype.clear = function () {\r\n        this.node_.value = null;\r\n        this.node_.children = {};\r\n        this.node_.childCount = 0;\r\n        this.updateParents_();\r\n    };\r\n    /**\r\n     * @return {boolean} Whether the tree has any children.\r\n     */\r\n    Tree.prototype.hasChildren = function () {\r\n        return this.node_.childCount > 0;\r\n    };\r\n    /**\r\n     * @return {boolean} Whether the tree is empty (no value or children).\r\n     */\r\n    Tree.prototype.isEmpty = function () {\r\n        return this.getValue() === null && !this.hasChildren();\r\n    };\r\n    /**\r\n     * Calls action for each child of this tree node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     */\r\n    Tree.prototype.forEachChild = function (action) {\r\n        var _this = this;\r\n        util.forEach(this.node_.children, function (child, childTree) {\r\n            action(new Tree(child, _this, childTree));\r\n        });\r\n    };\r\n    /**\r\n     * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\r\n     *   false.\r\n     * @param {boolean=} childrenFirst Whether to call action on children before calling it on\r\n     *   parent.\r\n     */\r\n    Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {\r\n        if (includeSelf && !childrenFirst)\r\n            action(this);\r\n        this.forEachChild(function (child) {\r\n            child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);\r\n        });\r\n        if (includeSelf && childrenFirst)\r\n            action(this);\r\n    };\r\n    /**\r\n     * Calls action on each ancestor node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called on each parent; return\r\n     *   true to abort.\r\n     * @param {boolean=} includeSelf Whether to call action on this node as well.\r\n     * @return {boolean} true if the action callback returned true.\r\n     */\r\n    Tree.prototype.forEachAncestor = function (action, includeSelf) {\r\n        var node = includeSelf ? this : this.parent();\r\n        while (node !== null) {\r\n            if (action(node)) {\r\n                return true;\r\n            }\r\n            node = node.parent();\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Does a depth-first traversal of this node's descendants.  When a descendant with a value\r\n     * is found, action is called on it and traversal does not continue inside the node.\r\n     * Action is *not* called on this node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     */\r\n    Tree.prototype.forEachImmediateDescendantWithValue = function (action) {\r\n        this.forEachChild(function (child) {\r\n            if (child.getValue() !== null)\r\n                action(child);\r\n            else\r\n                child.forEachImmediateDescendantWithValue(action);\r\n        });\r\n    };\r\n    /**\r\n     * @return {!Path} The path of this tree node, as a Path.\r\n     */\r\n    Tree.prototype.path = function () {\r\n        return new Path(this.parent_ === null\r\n            ? this.name_\r\n            : this.parent_.path() + '/' + this.name_);\r\n    };\r\n    /**\r\n     * @return {string} The name of the tree node.\r\n     */\r\n    Tree.prototype.name = function () {\r\n        return this.name_;\r\n    };\r\n    /**\r\n     * @return {?Tree} The parent tree node, or null if this is the root of the tree.\r\n     */\r\n    Tree.prototype.parent = function () {\r\n        return this.parent_;\r\n    };\r\n    /**\r\n     * Adds or removes this child from its parent based on whether it's empty or not.\r\n     *\r\n     * @private\r\n     */\r\n    Tree.prototype.updateParents_ = function () {\r\n        if (this.parent_ !== null)\r\n            this.parent_.updateChild_(this.name_, this);\r\n    };\r\n    /**\r\n     * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n     *\r\n     * @param {string} childName The name of the child to update.\r\n     * @param {!Tree.<T>} child The child to update.\r\n     * @private\r\n     */\r\n    Tree.prototype.updateChild_ = function (childName, child) {\r\n        var childEmpty = child.isEmpty();\r\n        var childExists = util.contains(this.node_.children, childName);\r\n        if (childEmpty && childExists) {\r\n            delete this.node_.children[childName];\r\n            this.node_.childCount--;\r\n            this.updateParents_();\r\n        }\r\n        else if (!childEmpty && !childExists) {\r\n            this.node_.children[childName] = child.node_;\r\n            this.node_.childCount++;\r\n            this.updateParents_();\r\n        }\r\n    };\r\n    return Tree;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\r\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\r\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\r\n// For now it's part of Repo, but in its own file.\r\n/**\r\n * @enum {number}\r\n */\r\nvar TransactionStatus;\r\n(function (TransactionStatus) {\r\n    // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\r\n    // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\r\n    // mismatched hash.\r\n    TransactionStatus[TransactionStatus[\"RUN\"] = 0] = \"RUN\";\r\n    // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\r\n    // or rejected yet).\r\n    TransactionStatus[TransactionStatus[\"SENT\"] = 1] = \"SENT\";\r\n    // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\r\n    // removed when we get a chance to prune completed ones.\r\n    TransactionStatus[TransactionStatus[\"COMPLETED\"] = 2] = \"COMPLETED\";\r\n    // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\r\n    // If it comes back as unsuccessful, we'll abort it.\r\n    TransactionStatus[TransactionStatus[\"SENT_NEEDS_ABORT\"] = 3] = \"SENT_NEEDS_ABORT\";\r\n    // Temporary state used to mark transactions that need to be aborted.\r\n    TransactionStatus[TransactionStatus[\"NEEDS_ABORT\"] = 4] = \"NEEDS_ABORT\";\r\n})(TransactionStatus || (TransactionStatus = {}));\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\r\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\r\n * @type {number}\r\n * @const\r\n * @private\r\n */\r\nRepo.MAX_TRANSACTION_RETRIES_ = 25;\r\n/**\r\n * Setup the transaction data structures\r\n * @private\r\n */\r\nRepo.prototype.transactions_init_ = function () {\r\n    /**\r\n     * Stores queues of outstanding transactions for Firebase locations.\r\n     *\r\n     * @type {!Tree.<Array.<!Transaction>>}\r\n     * @private\r\n     */\r\n    this.transactionQueueTree_ = new Tree();\r\n};\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\r\n *\r\n * @param {!Path} path Path at which to do transaction.\r\n * @param {function(*):*} transactionUpdate Update callback.\r\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\r\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\r\n */\r\nRepo.prototype.startTransaction = function (path, transactionUpdate, onComplete, applyLocally) {\r\n    this.log_('transaction on ' + path);\r\n    // Add a watch to make sure we get server updates.\r\n    var valueCallback = function () { };\r\n    var watchRef = new Reference(this, path);\r\n    watchRef.on('value', valueCallback);\r\n    var unwatcher = function () {\r\n        watchRef.off('value', valueCallback);\r\n    };\r\n    // Initialize transaction.\r\n    var transaction = {\r\n        path: path,\r\n        update: transactionUpdate,\r\n        onComplete: onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally: applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher: unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    var currentState = this.getLatestState_(path);\r\n    transaction.currentInputSnapshot = currentState;\r\n    var newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            // We just set the input snapshot, so this cast should be safe\r\n            var snapshot = new DataSnapshot(transaction.currentInputSnapshot, new Reference(this, transaction.path), PRIORITY_INDEX);\r\n            transaction.onComplete(null, false, snapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = TransactionStatus.RUN;\r\n        var queueNode = this.transactionQueueTree_.subTree(path);\r\n        var nodeQueue = queueNode.getValue() || [];\r\n        nodeQueue.push(transaction);\r\n        queueNode.setValue(nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our transaction state, since the user could\r\n        // start new transactions from the event callbacks.\r\n        var priorityForNode = void 0;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            util.contains(newVal, '.priority')) {\r\n            priorityForNode = util.safeGet(newVal, '.priority');\r\n            util.assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            var currentNode = this.serverSyncTree_.calcCompleteEventCache(path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        priorityForNode /** @type {null|number|string} */ = priorityForNode;\r\n        var serverValues = this.generateServerValues();\r\n        var newNodeUnresolved = nodeFromJSON$1(newVal, priorityForNode);\r\n        var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = this.getNextWriteId_();\r\n        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n        this.sendReadyTransactions_();\r\n    }\r\n};\r\n/**\r\n * @param {!Path} path\r\n * @param {Array.<number>=} excludeSets A specific set to exclude\r\n * @return {Node}\r\n * @private\r\n */\r\nRepo.prototype.getLatestState_ = function (path, excludeSets) {\r\n    return (this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n};\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\r\n * complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively with a particular\r\n * transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\r\n * @private\r\n */\r\nRepo.prototype.sendReadyTransactions_ = function (node) {\r\n    var _this = this;\r\n    if (node === void 0) { node = this.transactionQueueTree_; }\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        this.pruneCompletedTransactionsBelowNode_(node);\r\n    }\r\n    if (node.getValue() !== null) {\r\n        var queue = this.buildTransactionQueue_(node);\r\n        util.assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        var allRun = queue.every(function (transaction) { return transaction.status === TransactionStatus.RUN; });\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            this.sendTransactionQueue_(node.path(), queue);\r\n        }\r\n    }\r\n    else if (node.hasChildren()) {\r\n        node.forEachChild(function (childNode) {\r\n            _this.sendReadyTransactions_(childNode);\r\n        });\r\n    }\r\n};\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\r\n *\r\n * @param {!Path} path The location of the queue.\r\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\r\n * @private\r\n */\r\nRepo.prototype.sendTransactionQueue_ = function (path, queue) {\r\n    var _this = this;\r\n    // Mark transactions as sent and increment retry count!\r\n    var setsToIgnore = queue.map(function (txn) {\r\n        return txn.currentWriteId;\r\n    });\r\n    var latestState = this.getLatestState_(path, setsToIgnore);\r\n    var snapToSend = latestState;\r\n    var latestHash = latestState.hash();\r\n    for (var i = 0; i < queue.length; i++) {\r\n        var txn = queue[i];\r\n        util.assert(txn.status === TransactionStatus.RUN, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = TransactionStatus.SENT;\r\n        txn.retryCount++;\r\n        var relativePath = Path.relativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /**@type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    var dataToSend = snapToSend.val(true);\r\n    var pathToSend = path;\r\n    // Send the put.\r\n    this.server_.put(pathToSend.toString(), dataToSend, function (status) {\r\n        _this.log_('transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status: status\r\n        });\r\n        var events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n            // the callback could trigger more transactions or sets.\r\n            var callbacks = [];\r\n            for (var i = 0; i < queue.length; i++) {\r\n                queue[i].status = TransactionStatus.COMPLETED;\r\n                events = events.concat(_this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this transaction is complete, it should be set\r\n                    var node = queue[i].currentOutputSnapshotResolved;\r\n                    var ref = new Reference(_this, queue[i].path);\r\n                    var snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);\r\n                    callbacks.push(queue[i].onComplete.bind(null, null, true, snapshot));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            _this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path));\r\n            // There may be pending transactions that we can now send.\r\n            _this.sendReadyTransactions_();\r\n            _this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (var i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (var i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT)\r\n                        queue[i].status = TransactionStatus.NEEDS_ABORT;\r\n                    else\r\n                        queue[i].status = TransactionStatus.RUN;\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (var i = 0; i < queue.length; i++) {\r\n                    queue[i].status = TransactionStatus.NEEDS_ABORT;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            _this.rerunTransactions_(path);\r\n        }\r\n    }, latestHash);\r\n};\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\r\n * be raised for.\r\n *\r\n * @param {!Path} changedPath The path in mergedData that changed.\r\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\r\n * @private\r\n */\r\nRepo.prototype.rerunTransactions_ = function (changedPath) {\r\n    var rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\r\n    var path = rootMostTransactionNode.path();\r\n    var queue = this.buildTransactionQueue_(rootMostTransactionNode);\r\n    this.rerunTransactionQueue_(queue, path);\r\n    return path;\r\n};\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\r\n *\r\n * @param {Array.<Transaction>} queue The queue of transactions to run.\r\n * @param {!Path} path The path the queue is for.\r\n * @private\r\n */\r\nRepo.prototype.rerunTransactionQueue_ = function (queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n    // the callback could trigger more transactions or sets.\r\n    var callbacks = [];\r\n    var events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    var txnsToRerun = queue.filter(function (q) {\r\n        return q.status === TransactionStatus.RUN;\r\n    });\r\n    var setsToIgnore = txnsToRerun.map(function (q) {\r\n        return q.currentWriteId;\r\n    });\r\n    for (var i = 0; i < queue.length; i++) {\r\n        var transaction = queue[i];\r\n        var relativePath = Path.relativePath(path, transaction.path);\r\n        var abortTransaction = false, abortReason = void 0;\r\n        util.assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === TransactionStatus.NEEDS_ABORT) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === TransactionStatus.RUN) {\r\n            if (transaction.retryCount >= Repo.MAX_TRANSACTION_RETRIES_) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                var currentNode = this.getLatestState_(transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                var newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    var newDataNode = nodeFromJSON$1(newData);\r\n                    var hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        util.contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    var oldWriteId = transaction.currentWriteId;\r\n                    var serverValues = this.generateServerValues();\r\n                    var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = this.getNextWriteId_();\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = TransactionStatus.COMPLETED;\r\n            // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\r\n            // So defer the unwatcher until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    var ref = new Reference(this, queue[i].path);\r\n                    // We set this field immediately, so it's safe to cast to an actual snapshot\r\n                    var lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;\r\n                    var snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);\r\n                    callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (var i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    this.sendReadyTransactions_();\r\n};\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\r\n * the node for the given path if there are no pending transactions on any ancestor.\r\n *\r\n * @param {!Path} path The location to start at.\r\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\r\n * @private\r\n */\r\nRepo.prototype.getAncestorTransactionNode_ = function (path) {\r\n    var front;\r\n    // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\r\n    var transactionNode = this.transactionQueueTree_;\r\n    while ((front = path.getFront()) !== null &&\r\n        transactionNode.getValue() === null) {\r\n        transactionNode = transactionNode.subTree(front);\r\n        path = path.popFront();\r\n    }\r\n    return transactionNode;\r\n};\r\n/**\r\n * Builds the queue of all transactions at or below the specified transactionNode.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} transactionNode\r\n * @return {Array.<Transaction>} The generated queue.\r\n * @private\r\n */\r\nRepo.prototype.buildTransactionQueue_ = function (transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    var transactionQueue = [];\r\n    this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort(function (a, b) {\r\n        return a.order - b.order;\r\n    });\r\n    return transactionQueue;\r\n};\r\n/**\r\n * @param {!Tree.<Array.<Transaction>>} node\r\n * @param {Array.<Transaction>} queue\r\n * @private\r\n */\r\nRepo.prototype.aggregateTransactionQueuesForNode_ = function (node, queue) {\r\n    var _this = this;\r\n    var nodeQueue = node.getValue();\r\n    if (nodeQueue !== null) {\r\n        for (var i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    node.forEachChild(function (child) {\r\n        _this.aggregateTransactionQueuesForNode_(child, queue);\r\n    });\r\n};\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n *\r\n * @param {!Tree.<Array.<!Transaction>>} node\r\n * @private\r\n */\r\nRepo.prototype.pruneCompletedTransactionsBelowNode_ = function (node) {\r\n    var _this = this;\r\n    var queue = node.getValue();\r\n    if (queue) {\r\n        var to = 0;\r\n        for (var from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== TransactionStatus.COMPLETED) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        node.setValue(queue.length > 0 ? queue : null);\r\n    }\r\n    node.forEachChild(function (childNode) {\r\n        _this.pruneCompletedTransactionsBelowNode_(childNode);\r\n    });\r\n};\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\r\n * since we consider them incompatible with transactions.\r\n *\r\n * @param {!Path} path Path for which we want to abort related transactions.\r\n * @return {!Path}\r\n * @private\r\n */\r\nRepo.prototype.abortTransactions_ = function (path) {\r\n    var _this = this;\r\n    var affectedPath = this.getAncestorTransactionNode_(path).path();\r\n    var transactionNode = this.transactionQueueTree_.subTree(path);\r\n    transactionNode.forEachAncestor(function (node) {\r\n        _this.abortTransactionsOnNode_(node);\r\n    });\r\n    this.abortTransactionsOnNode_(transactionNode);\r\n    transactionNode.forEachDescendant(function (node) {\r\n        _this.abortTransactionsOnNode_(node);\r\n    });\r\n    return affectedPath;\r\n};\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\r\n * @private\r\n */\r\nRepo.prototype.abortTransactionsOnNode_ = function (node) {\r\n    var queue = node.getValue();\r\n    if (queue !== null) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n        // the callback could trigger more transactions or sets.\r\n        var callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\r\n        // can be immediately aborted and removed.\r\n        var events = [];\r\n        var lastSent = -1;\r\n        for (var i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\r\n                // Already marked.  No action needed.\r\n            }\r\n            else if (queue[i].status === TransactionStatus.SENT) {\r\n                util.assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                util.assert(queue[i].status === TransactionStatus.RUN, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    var snapshot = null;\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, snapshot));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            node.setValue(null);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\r\n        for (var i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** @const {string} */\r\nvar DATABASE_URL_OPTION = 'databaseURL';\r\nvar _staticInstance;\r\n/**\r\n * Creates and caches Repo instances.\r\n */\r\nvar RepoManager = /** @class */ (function () {\r\n    function RepoManager() {\r\n        /**\r\n         * @private {!Object.<string, Object<string, !fb.core.Repo>>}\r\n         */\r\n        this.repos_ = {};\r\n        /**\r\n         * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\r\n         * @private {boolean}\r\n         */\r\n        this.useRestClient_ = false;\r\n    }\r\n    RepoManager.getInstance = function () {\r\n        if (!_staticInstance) {\r\n            _staticInstance = new RepoManager();\r\n        }\r\n        return _staticInstance;\r\n    };\r\n    // TODO(koss): Remove these functions unless used in tests?\r\n    RepoManager.prototype.interrupt = function () {\r\n        for (var appName in this.repos_) {\r\n            for (var dbUrl in this.repos_[appName]) {\r\n                this.repos_[appName][dbUrl].interrupt();\r\n            }\r\n        }\r\n    };\r\n    RepoManager.prototype.resume = function () {\r\n        for (var appName in this.repos_) {\r\n            for (var dbUrl in this.repos_[appName]) {\r\n                this.repos_[appName][dbUrl].resume();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * This function should only ever be called to CREATE a new database instance.\r\n     *\r\n     * @param {!FirebaseApp} app\r\n     * @return {!Database}\r\n     */\r\n    RepoManager.prototype.databaseFromApp = function (app, url) {\r\n        var dbUrl = url || app.options[DATABASE_URL_OPTION];\r\n        if (dbUrl === undefined) {\r\n            fatal(\"Can't determine Firebase Database URL.  Be sure to include \" +\r\n                DATABASE_URL_OPTION +\r\n                ' option when calling firebase.initializeApp().');\r\n        }\r\n        var parsedUrl = parseRepoInfo(dbUrl);\r\n        var repoInfo = parsedUrl.repoInfo;\r\n        validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\r\n        if (!parsedUrl.path.isEmpty()) {\r\n            fatal('Database URL must point to the root of a Firebase Database ' +\r\n                '(not including a child path).');\r\n        }\r\n        var repo = this.createRepo(repoInfo, app);\r\n        return repo.database;\r\n    };\r\n    /**\r\n     * Remove the repo and make sure it is disconnected.\r\n     *\r\n     * @param {!Repo} repo\r\n     */\r\n    RepoManager.prototype.deleteRepo = function (repo) {\r\n        var appRepos = util.safeGet(this.repos_, repo.app.name);\r\n        // This should never happen...\r\n        if (!appRepos || util.safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\r\n            fatal(\"Database \" + repo.app.name + \"(\" + repo.repoInfo_ + \") has already been deleted.\");\r\n        }\r\n        repo.interrupt();\r\n        delete appRepos[repo.repoInfo_.toURLString()];\r\n    };\r\n    /**\r\n     * Ensures a repo doesn't already exist and then creates one using the\r\n     * provided app.\r\n     *\r\n     * @param {!RepoInfo} repoInfo The metadata about the Repo\r\n     * @param {!FirebaseApp} app\r\n     * @return {!Repo} The Repo object for the specified server / repoName.\r\n     */\r\n    RepoManager.prototype.createRepo = function (repoInfo, app) {\r\n        var appRepos = util.safeGet(this.repos_, app.name);\r\n        if (!appRepos) {\r\n            appRepos = {};\r\n            this.repos_[app.name] = appRepos;\r\n        }\r\n        var repo = util.safeGet(appRepos, repoInfo.toURLString());\r\n        if (repo) {\r\n            fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n        }\r\n        repo = new Repo(repoInfo, this.useRestClient_, app);\r\n        appRepos[repoInfo.toURLString()] = repo;\r\n        return repo;\r\n    };\r\n    /**\r\n     * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n     * @param {boolean} forceRestClient\r\n     */\r\n    RepoManager.prototype.forceRestClient = function (forceRestClient) {\r\n        this.useRestClient_ = forceRestClient;\r\n    };\r\n    return RepoManager;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase database.\r\n * @implements {FirebaseService}\r\n */\r\nvar Database = /** @class */ (function () {\r\n    /**\r\n     * The constructor should not be called by users of our public API.\r\n     * @param {!Repo} repo_\r\n     */\r\n    function Database(repo_) {\r\n        this.repo_ = repo_;\r\n        if (!(repo_ instanceof Repo)) {\r\n            fatal(\"Don't call new Database() directly - please use firebase.database().\");\r\n        }\r\n        /** @type {Reference} */\r\n        this.root_ = new Reference(repo_, Path.Empty);\r\n        this.INTERNAL = new DatabaseInternals(this);\r\n    }\r\n    Object.defineProperty(Database.prototype, \"app\", {\r\n        get: function () {\r\n            return this.repo_.app;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Database.prototype.ref = function (path) {\r\n        this.checkDeleted_('ref');\r\n        util.validateArgCount('database.ref', 0, 1, arguments.length);\r\n        if (path instanceof Reference) {\r\n            return this.refFromURL(path.toString());\r\n        }\r\n        return path !== undefined ? this.root_.child(path) : this.root_;\r\n    };\r\n    /**\r\n     * Returns a reference to the root or the path specified in url.\r\n     * We throw a exception if the url is not in the same domain as the\r\n     * current repo.\r\n     * @param {string} url\r\n     * @return {!Reference} Firebase reference.\r\n     */\r\n    Database.prototype.refFromURL = function (url) {\r\n        /** @const {string} */\r\n        var apiName = 'database.refFromURL';\r\n        this.checkDeleted_(apiName);\r\n        util.validateArgCount(apiName, 1, 1, arguments.length);\r\n        var parsedURL = parseRepoInfo(url);\r\n        validateUrl(apiName, 1, parsedURL);\r\n        var repoInfo = parsedURL.repoInfo;\r\n        if (repoInfo.host !== this.repo_.repoInfo_.host) {\r\n            fatal(apiName +\r\n                ': Host name does not match the current database: ' +\r\n                '(found ' +\r\n                repoInfo.host +\r\n                ' but expected ' +\r\n                this.repo_.repoInfo_.host +\r\n                ')');\r\n        }\r\n        return this.ref(parsedURL.path.toString());\r\n    };\r\n    /**\r\n     * @param {string} apiName\r\n     */\r\n    Database.prototype.checkDeleted_ = function (apiName) {\r\n        if (this.repo_ === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    };\r\n    // Make individual repo go offline.\r\n    Database.prototype.goOffline = function () {\r\n        util.validateArgCount('database.goOffline', 0, 0, arguments.length);\r\n        this.checkDeleted_('goOffline');\r\n        this.repo_.interrupt();\r\n    };\r\n    Database.prototype.goOnline = function () {\r\n        util.validateArgCount('database.goOnline', 0, 0, arguments.length);\r\n        this.checkDeleted_('goOnline');\r\n        this.repo_.resume();\r\n    };\r\n    Database.ServerValue = {\r\n        TIMESTAMP: {\r\n            '.sv': 'timestamp'\r\n        }\r\n    };\r\n    return Database;\r\n}());\r\nvar DatabaseInternals = /** @class */ (function () {\r\n    /** @param {!Database} database */\r\n    function DatabaseInternals(database) {\r\n        this.database = database;\r\n    }\r\n    /** @return {Promise<void>} */\r\n    DatabaseInternals.prototype.delete = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            return tslib_1.__generator(this, function (_a) {\r\n                this.database.checkDeleted_('delete');\r\n                RepoManager.getInstance().deleteRepo(this.database.repo_);\r\n                this.database.repo_ = null;\r\n                this.database.root_ = null;\r\n                this.database.INTERNAL = null;\r\n                this.database = null;\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    return DatabaseInternals;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * INTERNAL methods for internal-use only (tests, etc.).\r\n *\r\n * Customers shouldn't use these or else should be aware that they could break at any time.\r\n *\r\n * @const\r\n */\r\nvar forceLongPolling = function () {\r\n    WebSocketConnection.forceDisallow();\r\n    BrowserPollConnection.forceAllow();\r\n};\r\nvar forceWebSockets = function () {\r\n    BrowserPollConnection.forceDisallow();\r\n};\r\n/* Used by App Manager */\r\nvar isWebSocketsAvailable = function () {\r\n    return WebSocketConnection['isAvailable']();\r\n};\r\nvar setSecurityDebugCallback = function (ref, callback) {\r\n    ref.repo.persistentConnection_.securityDebugCallback_ = callback;\r\n};\r\nvar stats = function (ref, showDelta) {\r\n    ref.repo.stats(showDelta);\r\n};\r\nvar statsIncrementCounter = function (ref, metric) {\r\n    ref.repo.statsIncrementCounter(metric);\r\n};\r\nvar dataUpdateCount = function (ref) {\r\n    return ref.repo.dataUpdateCount;\r\n};\r\nvar interceptServerData = function (ref, callback) {\r\n    return ref.repo.interceptServerData_(callback);\r\n};\n\nvar INTERNAL = /*#__PURE__*/Object.freeze({\n  forceLongPolling: forceLongPolling,\n  forceWebSockets: forceWebSockets,\n  isWebSocketsAvailable: isWebSocketsAvailable,\n  setSecurityDebugCallback: setSecurityDebugCallback,\n  stats: stats,\n  statsIncrementCounter: statsIncrementCounter,\n  dataUpdateCount: dataUpdateCount,\n  interceptServerData: interceptServerData\n});\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar DataConnection = PersistentConnection;\r\n/**\r\n * @param {!string} pathString\r\n * @param {function(*)} onComplete\r\n */\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n/**\r\n * @param {*} data\r\n * @param {function(*)} onEcho\r\n */\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nvar RealTimeConnection = Connection;\r\n/**\r\n * @param {function(): string} newHash\r\n * @return {function()}\r\n */\r\nvar hijackHash = function (newHash) {\r\n    var oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, opt_onComplete, opt_hash) {\r\n        if (opt_hash !== undefined) {\r\n            opt_hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, opt_onComplete, opt_hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\n/**\r\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\r\n */\r\nvar ConnectionTarget = RepoInfo;\r\n/**\r\n * @param {!Query} query\r\n * @return {!string}\r\n */\r\nvar queryIdentifier = function (query) {\r\n    return query.queryIdentifier();\r\n};\r\n/**\r\n * @param {!Query} firebaseRef\r\n * @return {!Object}\r\n */\r\nvar listens = function (firebaseRef) {\r\n    return firebaseRef.repo.persistentConnection_.listens_;\r\n};\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n *\r\n * @param {boolean} forceRestClient\r\n */\r\nvar forceRestClient = function (forceRestClient) {\r\n    RepoManager.getInstance().forceRestClient(forceRestClient);\r\n};\n\nvar TEST_ACCESS = /*#__PURE__*/Object.freeze({\n  DataConnection: DataConnection,\n  RealTimeConnection: RealTimeConnection,\n  hijackHash: hijackHash,\n  ConnectionTarget: ConnectionTarget,\n  queryIdentifier: queryIdentifier,\n  listens: listens,\n  forceRestClient: forceRestClient\n});\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar ServerValue = Database.ServerValue;\r\nfunction registerDatabase(instance) {\r\n    // Register the Database Service with the 'firebase' namespace.\r\n    var namespace = instance.INTERNAL.registerService('database', function (app, unused, url) { return RepoManager.getInstance().databaseFromApp(app, url); }, \r\n    // firebase.database namespace properties\r\n    {\r\n        Reference: Reference,\r\n        Query: Query,\r\n        Database: Database,\r\n        enableLogging: enableLogging,\r\n        INTERNAL: INTERNAL,\r\n        ServerValue: ServerValue,\r\n        TEST_ACCESS: TEST_ACCESS\r\n    }, null, true);\r\n    if (util.isNodeSdk()) {\r\n        module.exports = namespace;\r\n    }\r\n}\r\nregisterDatabase(firebase);\n\nexports.registerDatabase = registerDatabase;\nexports.Database = Database;\nexports.Query = Query;\nexports.Reference = Reference;\nexports.enableLogging = enableLogging;\nexports.ServerValue = ServerValue;\nexports.DataSnapshot = DataSnapshot;\nexports.OnDisconnect = OnDisconnect;\n","/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nvar instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\n/**\r\n * The default log level\r\n */\r\nvar defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nvar defaultLogHandler = function (instance, logType) {\r\n    var args = [];\r\n    for (var _i = 2; _i < arguments.length; _i++) {\r\n        args[_i - 2] = arguments[_i];\r\n    }\r\n    if (logType < instance.logLevel)\r\n        return;\r\n    var now = new Date().toISOString();\r\n    switch (logType) {\r\n        /**\r\n         * By default, `console.debug` is not displayed in the developer console (in\r\n         * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n         * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n         * logs to the `console.log` function.\r\n         */\r\n        case LogLevel.DEBUG:\r\n            console.log.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.VERBOSE:\r\n            console.log.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.INFO:\r\n            console.info.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.WARN:\r\n            console.warn.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.ERROR:\r\n            console.error.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        default:\r\n            throw new Error(\"Attempted to log a message with an invalid logType (value: \" + logType + \")\");\r\n    }\r\n};\r\nvar Logger = /** @class */ (function () {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    function Logger(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The log handler for the Logger instance.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    Object.defineProperty(Logger.prototype, \"logLevel\", {\r\n        get: function () {\r\n            return this._logLevel;\r\n        },\r\n        set: function (val) {\r\n            if (!(val in LogLevel)) {\r\n                throw new TypeError('Invalid value assigned to `logLevel`');\r\n            }\r\n            this._logLevel = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Logger.prototype, \"logHandler\", {\r\n        get: function () {\r\n            return this._logHandler;\r\n        },\r\n        set: function (val) {\r\n            if (typeof val !== 'function') {\r\n                throw new TypeError('Value assigned to `logHandler` must be a function');\r\n            }\r\n            this._logHandler = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    Logger.prototype.debug = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.DEBUG].concat(args));\r\n    };\r\n    Logger.prototype.log = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.VERBOSE].concat(args));\r\n    };\r\n    Logger.prototype.info = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.INFO].concat(args));\r\n    };\r\n    Logger.prototype.warn = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.WARN].concat(args));\r\n    };\r\n    Logger.prototype.error = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.ERROR].concat(args));\r\n    };\r\n    return Logger;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction setLogLevel(level) {\r\n    instances.forEach(function (inst) {\r\n        inst.logLevel = level;\r\n    });\r\n}\n\nexport { setLogLevel, Logger, LogLevel };\n"],"sourceRoot":""}