{"version":3,"sources":["webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/global.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/define-well-known-symbol.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/well-known-symbol.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/has.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/fails.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/is-object.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/hide.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/export.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/object-define-property.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/descriptors.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/an-object.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/to-indexed-object.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/require-object-coercible.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/shared.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/create-property-descriptor.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/set-to-string-tag.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/classof-raw.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/to-object.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/to-length.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/to-integer.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/to-primitive.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/is-pure.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/object-property-is-enumerable.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/redefine.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/internal-state.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/shared-key.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/hidden-keys.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/object-get-own-property-symbols.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/object-keys.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/entry-unbind.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/indexed-object.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/is-array.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/set-global.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/uid.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/object-get-own-property-descriptor.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/object-get-own-property-names.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/enum-bug-keys.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/add-to-unscopables.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/object-create.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/path.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/wrapped-well-known-symbol.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/iterators.js","webpack:///./node_modules/firebase/app/dist/index.cjs.js","webpack:///./node_modules/process/browser.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/array-methods.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/bind-context.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/array-species-create.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/ie8-dom-define.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/document-create-element.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/native-symbol.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/function-to-string.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/copy-constructor-properties.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/object-keys-internal.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es.symbol.iterator.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/define-iterator.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/iterators-core.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/object-get-prototype-of.js","webpack:///./node_modules/@firebase/app/dist/index.cjs.js","webpack:///./node_modules/@firebase/util/dist/index.cjs.js","webpack:///./node_modules/@firebase/polyfill/dist/index.esm.js","webpack:///./node_modules/@firebase/polyfill/node_modules/whatwg-fetch/fetch.js","webpack:///./node_modules/promise-polyfill/lib/polyfill.js","webpack:///./node_modules/timers-browserify/main.js","webpack:///./node_modules/setimmediate/setImmediate.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/features/array/find.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/es/array/find.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es.array.find.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/a-function.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/native-weak-map.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/own-keys.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/array-includes.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/to-absolute-index.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/is-forced.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/object-define-properties.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/html.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/features/array/find-index.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/es/array/find-index.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es.array.find-index.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/features/object/assign.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/es/object/assign.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es.object.assign.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/object-assign.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/features/string/starts-with.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/es/string/starts-with.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es.string.starts-with.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/validate-string-method-arguments.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/is-regexp.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/correct-is-regexp-logic.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/features/string/repeat.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/es/string/repeat.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es.string.repeat.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/string-repeat.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/features/symbol/index.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/es/symbol/index.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es.array.concat.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/create-property.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/array-method-has-species-support.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es.object.to-string.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/object-to-string.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/classof.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es.symbol.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/enum-keys.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/object-get-own-property-names-external.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es.symbol.async-iterator.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es.symbol.description.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es.symbol.has-instance.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es.symbol.is-concat-spreadable.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es.symbol.match.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es.symbol.replace.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es.symbol.search.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es.symbol.species.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es.symbol.split.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es.symbol.to-primitive.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es.symbol.to-string-tag.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es.symbol.unscopables.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es.math.to-string-tag.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es.json.to-string-tag.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/esnext.symbol.dispose.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/esnext.symbol.observable.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/esnext.symbol.pattern-match.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/features/symbol/iterator.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/es/symbol/iterator.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es.string.iterator.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/string-at.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/create-iterator-constructor.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/correct-prototype-getter.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/object-set-prototype-of.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/validate-set-prototype-of-arguments.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/web.dom-collections.iterator.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/internals/dom-iterables.js","webpack:///./node_modules/@firebase/polyfill/node_modules/core-js/modules/es.array.iterator.js","webpack:///./node_modules/firebase/database/dist/index.esm.js","webpack:///./node_modules/@firebase/database/dist/index.cjs.js","webpack:///./node_modules/tslib/tslib.es6.js","webpack:///./node_modules/@firebase/logger/dist/index.esm.js"],"names":["module","exports","window","Math","self","Function","path","__webpack_require__","has","wrappedWellKnownSymbolModule","defineProperty","f","NAME","Symbol","value","store","uid","NATIVE_SYMBOL","name","hasOwnProperty","it","key","call","exec","e","definePropertyModule","createPropertyDescriptor","object","global","getOwnPropertyDescriptor","hide","redefine","setGlobal","copyConstructorProperties","isForced","options","source","target","targetProperty","sourceProperty","descriptor","TARGET","GLOBAL","STATIC","stat","prototype","noTargetGet","forced","undefined","sham","DESCRIPTORS","IE8_DOM_DEFINE","anObject","toPrimitive","nativeDefineProperty","Object","O","P","Attributes","TypeError","get","a","isObject","String","IndexedObject","requireObjectCoercible","push","version","mode","copyright","bitmap","enumerable","configurable","writable","TO_STRING_TAG","TAG","g","this","toString","slice","argument","toInteger","min","ceil","floor","isNaN","S","fn","val","valueOf","nativePropertyIsEnumerable","propertyIsEnumerable","nativeGetOwnPropertyDescriptor","NASHORN_BUG","1","V","nativeFunctionToString","InternalStateModule","getInternalState","enforceInternalState","enforce","TEMPLATE","split","unsafe","simple","join","set","NATIVE_WEAK_MAP","objectHas","sharedKey","hiddenKeys","WeakMap","wmget","wmhas","wmset","metadata","STATE","getterFor","TYPE","state","type","shared","getOwnPropertySymbols","internalObjectKeys","enumBugKeys","keys","bind","CONSTRUCTOR","METHOD","length","fails","classof","Array","isArray","arg","id","postfix","random","concat","propertyIsEnumerableModule","toIndexedObject","getOwnPropertyNames","UNSCOPABLES","create","ArrayPrototype","defineProperties","html","documentCreateElement","IE_PROTO","Empty","createDict","iframeDocument","iframe","style","display","appendChild","src","contentWindow","document","open","write","lt","close","F","Properties","result","ex","firebase","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","setTimeout","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","len","run","marker","runClearTimeout","Item","array","noop","nextTick","args","arguments","i","apply","title","browser","env","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","toObject","toLength","arraySpeciesCreate","specificCreate","IS_MAP","IS_FILTER","IS_SOME","IS_EVERY","IS_FIND_INDEX","NO_HOLES","$this","callbackfn","that","boundFunction","index","aFunction","b","c","SPECIES","originalArray","C","constructor","exist","createElement","ownKeys","getOwnPropertyDescriptorModule","arrayIndexOf","names","$export","createIteratorConstructor","getPrototypeOf","setPrototypeOf","setToStringTag","IS_PURE","ITERATOR","Iterators","IteratorsCore","IteratorPrototype","BUGGY_SAFARI_ITERATORS","returnThis","Iterable","IteratorConstructor","next","DEFAULT","IS_SET","FORCED","CurrentIteratorPrototype","methods","KEY","getIterationMethod","KIND","defaultIterator","IterablePrototype","INCORRECT_VALUES_NAME","nativeIterator","anyNativeIterator","entries","values","proto","PrototypeOfArrayIteratorPrototype","arrayIterator","CORRECT_PROTOTYPE_GETTER","ObjectPrototype","util","contains","obj","DEFAULT_ENTRY_NAME","tokenListeners","FirebaseAppImpl","config","firebase_","isDeleted_","services_","name_","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","options_","deepCopy","INTERNAL","getUid","getToken","Promise","resolve","addAuthTokenListener","callback","removeAuthTokenListener","filter","listener","checkDestroyed_","delete","_this","then","removeApp","services","forEach","serviceKey","instanceKey","all","map","service","_getService","instanceIdentifier","instanceSpecifier","factories","extendApp","props","deepExtend","error","code","appErrors","console","log","ErrorFactory","no-app","bad-app-name","duplicate-app","app-deleted","duplicate-service","sa-not-supported","invalid-app-argument","isNode","warn","createFirebaseNamespace","apps_","appHooks","namespace","__esModule","initializeApp","rawConfig","name_1","app","callAppHooks","apps","SDK_VERSION","registerService","createService","serviceProperties","appHook","allowMultipleInstances","getApps","serviceNamespace","appArg","_i","extendNamespace","createSubscribe","useAsService","eventName","serviceName","factoryName","useService","patchProperty","default","CONSTANTS","NODE_CLIENT","NODE_ADMIN","assert","assertion","message","assertionError","stringToByteArray","str","out","p","charCodeAt","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","opt_webSafe","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","encodeString","btoa","decodeString","bytes","pos","c1","fromCharCode","c2","u","c3","byteArrayToString","decodeStringToByteArray","charToByteMap","charAt","byte4","base64Decode","Date","getTime","prop","Deferred","promise","reject","wrapCallback","catch","getUA","navigator","ERROR_NAME","captureStackTrace","FirebaseError","err","stack","errors","pattern","data","template","fullCode","replace","match","jsonEval","JSON","parse","decode","token","header","claims","signature","parts","extend","objTo","objFrom","findKey","opt_this","Sha1","chain_","buf_","W_","pad_","inbuf_","total_","blockSize","reset","compress_","buf","opt_offset","W","t","k","d","update","opt_length","lengthMinusBlock","n","inbuf","digest","totalBits","j","ObserverProxy","executor","onNoObservers","observers","unsubscribes","observerCount","task","finalized","forEachObserver","observer","complete","subscribe","nextOrObserver","methods_1","method","implementsAnyMethods","unsub","unsubscribeOne","finalError","sendOne","errorPrefix","fnName","argumentNumber","optional","argName","async","onError","base64Encode","utf8Bytes","clone","proxy","every","findValue","getAnyKey","getCount","rv","getValues","res","isAdmin","isEmpty","isMobileCordova","test","isNodeSdk","isNonNullObject","isReactNative","isValidFormat","isValidTimestamp","validSince","validUntil","now","issuedAtTime","opt_obj","patchCapture","captureFake","querystring","querystringParams","params","arrayVal","encodeURIComponent","querystringDecode","safeGet","stringLength","high","stringify","validateArgCount","minCount","maxCount","argCount","argError","validateCallback","validateContextObject","context","validateNamespace","r","__webpack_exports__","fetch","support","searchParams","iterable","blob","Blob","formData","arrayBuffer","viewClasses","isDataView","DataView","isPrototypeOf","isArrayBufferView","ArrayBuffer","isView","indexOf","Headers","append","normalizeName","normalizeValue","oldValue","thisArg","items","iteratorFor","iterator","Request","body","_bodyInit","Body","Response","status","statusText","headers","url","response","redirectStatuses","redirect","RangeError","location","init","request","xhr","XMLHttpRequest","onload","rawHeaders","getAllResponseHeaders","line","shift","trim","responseURL","responseText","onerror","ontimeout","credentials","withCredentials","responseType","setRequestHeader","send","polyfill","toLowerCase","done","consumed","bodyUsed","fileReaderReady","reader","readBlobAsArrayBuffer","FileReader","readAsArrayBuffer","bufferClone","view","Uint8Array","byteLength","buffer","_initBody","_bodyText","_bodyBlob","FormData","_bodyFormData","URLSearchParams","_bodyArrayBuffer","rejected","text","readAsText","chars","readArrayBufferAsText","json","upcased","toUpperCase","referrer","form","decodeURIComponent","bodyInit","ok","setImmediate","finallyConstructor","reason","setTimeoutFunc","_state","_handled","_value","_deferreds","doResolve","handle","deferred","_immediateFn","cb","onFulfilled","onRejected","ret","newValue","finale","_unhandledRejectionFn","Handler","prom","arr","remaining","race","globalNS","scope","Timeout","clearFn","_id","_clearFn","setInterval","clearInterval","unref","ref","enroll","item","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","clearImmediate","registerImmediate","channel","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","doc","attachTo","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","canUsePostMessage","MessageChannel","port1","event","port2","documentElement","script","onreadystatechange","removeChild","addEventListener","attachEvent","internalFind","SKIPS_HOLES","find","getOwnPropertyNamesModule","getOwnPropertySymbolsModule","Reflect","toAbsoluteIndex","IS_INCLUDES","el","fromIndex","max","integer","replacement","feature","detection","normalize","POLYFILL","NATIVE","string","objectKeys","internalFindIndex","findIndex","assign","nativeAssign","A","B","symbol","chr","T","argumentsLength","validateArguments","CORRECT_IS_REGEXP_LOGIC","nativeStartsWith","startsWith","searchString","search","isRegExp","MATCH","METHOD_NAME","regexp","repeat","count","Infinity","createProperty","IS_CONCAT_SPREADABLE","IS_CONCAT_SPREADABLE_SUPPORT","SPECIES_SUPPORT","isConcatSpreadable","spreadable","E","propertyKey","foo","Boolean","classofRaw","CORRECT_ARGUMENTS","tag","tryGet","callee","wellKnownSymbol","defineWellKnownSymbol","enumKeys","nativeObjectCreate","getOwnPropertyNamesExternal","HIDDEN","setInternalState","nativeGetOwnPropertyNames","$Symbol","nativeJSONStringify","TO_PRIMITIVE","SymbolRegistry","AllSymbols","ObjectPrototypeSymbols","WellKnownSymbolsStore","QObject","USE_SETTER","findChild","setSymbolDescriptor","D","ObjectPrototypeDescriptor","wrap","description","isSymbol","$defineProperty","$defineProperties","l","$propertyIsEnumerable","$getOwnPropertyDescriptor","$getOwnPropertyNames","$getOwnPropertySymbols","IS_OP","setter","wellKnownSymbols","for","keyFor","sym","useSetter","useSimple","replacer","$replacer","symbols","windowNames","getWindowNames","NativeSymbol","EmptyStringDescriptionStore","SymbolWrapper","symbolPrototype","symbolToString","native","desc","codePointAt","defineIterator","iterated","point","CONVERT_TO_STRING","first","second","position","size","validateSetPrototypeOfArguments","correctSetter","__proto__","DOMIterables","ArrayIteratorMethods","ArrayValues","COLLECTION_NAME","Collection","CollectionPrototype","CSSRuleList","CSSStyleDeclaration","CSSValueList","ClientRectList","DOMRectList","DOMStringList","DOMTokenList","DataTransferItemList","FileList","HTMLAllCollection","HTMLCollection","HTMLFormElement","HTMLSelectElement","MediaList","MimeTypeArray","NamedNodeMap","NodeList","PaintRequestList","Plugin","PluginArray","SVGLengthList","SVGNumberList","SVGPathSegList","SVGPointList","SVGStringList","SVGTransformList","SourceBufferList","StyleSheetList","TextTrackCueList","TextTrackList","TouchList","addToUnscopables","kind","Arguments","tslib_1","logger$1","DOMStorageWrapper","domStorage_","prefix_","removeItem","prefixedName_","setItem","storedVal","getItem","remove","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","domStorage","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","sha1","sha1Bytes","buildLogMessage_","var_args","logger","firstLog_","enableLogging","logger_","persistent","logLevel","LogLevel","VERBOSE","logWrapper","prefix","fatal","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","ObjectToUniqueKey","sort","splitStringBySize","segsize","dataSegs","substring","each","doubleToIEEE754String","v","s","ln","bits","abs","pow","LN2","round","reverse","hexByteString","hexByte","parseInt","substr","INTEGER_REGEXP_","RegExp","intVal","exceptionGuard","beingCrawled","setTimeoutNonBlocking","time","Path","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","getFront","getLength","popFront","getBack","pathString","toUrlEncodedString","begin","parent","pieces","child","childPathObj","childPieces","relativePath","outerPath","innerPath","outer","inner","comparePaths","left","right","leftKeys","rightKeys","cmp","equals","other","ValidationPath","errorPrefix_","parts_","byteLength_","checkValid_","pop","last","MAX_PATH_LENGTH_BYTES","MAX_PATH_DEPTH","toErrorString","LONG_POLLING","RepoInfo","host","secure","webSocketOnly","persistenceKey","domain","internalHost","needsQueryParam","isCustomHost","isCacheableHost","isDemoHost","updateHost","newHost","connectionURL","connURL","pairs","toURLString","PUSH_CHARS","lastPushTime","lastRandChars","__EMPTY_NODE","MAX_NODE","parseRepoInfo","dataURL","parsedUrl","parseURL","subdomain","protocol","scheme","repoInfo","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodePath","queryParams","queryString","results","_a","segment","kv","decodeQuery","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","isValidKey","isValidPathString","isValidPriority","priority","validateFirebaseDataArg","validateFirebaseData","path_","hasDotValue_1","hasActualChild_1","validateFirebaseMergeDataArg","mergePaths","curPath","prevPath","validateFirebaseMergePaths","validatePriority","validateEventType","eventType","validateKey","validatePathString","validateWritablePath","validateUrl","isValidRootPathString","OnDisconnect","repo_","cancel","onComplete","onDisconnectCancel","onDisconnectSet","setWithPriority","onDisconnectSetWithPriority","objectToMerge","newObjectToMerge","onDisconnectUpdate","TransactionResult","committed","snapshot","toJSON","nextPushId","duplicateTime","timeStampChars","NamedNode","node","Wrap","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","KeyIndex","_super","__extends","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","__childrenNodeConstructor","nodeFromJSON","MAX_NODE$1","priorityHashText","validatePriorityNode","priorityNode","isLeafNode","getPriority","LeafNode","value_","priorityNode_","EMPTY_NODE","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","action","exportFormat",".value","getValue",".priority","hash","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","_defaultIndexMap","PRIORITY_INDEX","PriorityIndex","aPriority","bPriority","indexCmp","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","hasNext","peek","LLRBNode","color","RED","SortedMap","copy","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","LLRBEmptyNode","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","LOG_2","Base12Num","num","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","buildFrom12Array","fallbackObject","IndexMap","indexes_","indexSet_","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","newIndex","sawIndexedValue","iter","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","ChildrenNode","children_","indexMap_","Default","newPriority","newIndexMap","newImmediateChild","numKeys","allIntegerKeys","toHash_1","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","endPost","MAX_NODE$2","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","MAX","setMaxNode$1","USE_HINZE","nodeFromJSON$1","node_1","jsonObj_1","childData","children_1","childrenHavePriority_1","hinzeJsonObj_1","childSet","sortedChildSet","setNodeFromJSON","__referenceConstructor","OperationType","VALUE_INDEX","ValueIndex","valueNode","PathIndex","indexPath_","extractChild","snap","aChild","bChild","DataSnapshot","node_","ref_","index_","exportVal","exists","childPathString","childPath","childRef","hasChildren","getKey","getRef","DataEvent","eventRegistration","prevName","getPath","getParent","getEventType","getEventRunner","CancelEvent","ValueEventRegistration","callback_","cancelCallback_","context_","respondsTo","createEvent","change","query","getQueryParams","getIndex","snapshotNode","eventData","ctx","cancelCB_1","cb_1","createCancelEvent","matches","hasAnyCallback","ChildEventRegistration","callbacks_","eventToCheck","cancelCB_2","cb_2","otherCount","otherKey","thisKey","Query","repo","queryParams_","orderByCalled_","validateQueryEndpoints_","startNode","endNode","hasStart","getIndexStartValue","hasEnd","getIndexEndValue","tooManyArgsError","wrongArgTypeError","getIndexStartName","getIndexEndName","validateLimit_","hasLimit","hasAnchoredLimit","validateNoPreviousOrderByCall_","cancelCallbackOrContext","getCancelAndContextArgs_","onValueEvent","callbacks","onChildEvent","cancelCallback","container","addEventCallbackForQuery","removeEventCallbackForQuery","userCallback","cancelOrContext","firstCall","onceCallback","limitToFirst","limit","limitToLast","orderByChild","parsedPath","newParams","orderBy","orderByKey","orderByPriority","orderByValue","startAt","endAt","equalTo","queryObject","getQueryObject","queryIdentifier","isEqual","sameRepo","samePath","sameQueryIdentifier","CountedSet","add","clear","SparseSnapshotTree","childKey","remember","forget","self_1","tree","forEachTree","prefixPath","func","resolveDeferredValue","serverValues","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","emptyChildrenSingleton","__referenceConstructor$1","OperationSource","fromUser","fromServer","queryId","tagged","User","Server","forServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","children","subtree","EmptyChildren","ImmutableTree","fromObject","childSnap","findRootMostMatchingPathAndValue","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","newChild","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","nextChild","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","getNode","ViewCache","eventCache_","serverCache_","updateEventSnap","eventSnap","filtered","updateServerSnap","serverSnap","getEventCache","getCompleteEventSnap","getServerCache","getCompleteServerSnap","Change","oldSnap","valueChange","VALUE","childAddedChange","CHILD_ADDED","childRemovedChange","CHILD_REMOVED","childChangedChange","newSnapshot","oldSnapshot","CHILD_CHANGED","childMovedChange","CHILD_MOVED","IndexedFilter","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","ChildChangeAccumulator","changeMap_","oldChange","oldType","getChanges","NO_COMPLETE_CHILD_SOURCE","NoCompleteChildSource_","getCompleteChild","getChildAfterChild","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","calcCompleteChild","completeServerData","nodes","calcIndexedSlice","ProcessorResult","viewCache","changes","ViewProcessor","filter_","assertIndexed","applyOperation","oldViewCache","operation","writesCache","completeCache","newViewCache","filterServerNode","accumulator","overwrite","applyUserOverwrite_","applyServerOverwrite_","merge","applyUserMerge_","applyServerMerge_","ackUserWrite","revertUserWrite_","ackUserWrite_","listenComplete_","maybeAddValueEvent_","isLeafOrEmpty","oldCompleteSnap","generateEventCacheAfterServerEvent_","changePath","oldEventSnap","shadowingWrite","newEventCache","serverCache","completeChildren","completeEventChildren","calcCompleteEventChildren","completeNode","calcCompleteEventCache","oldEventNode","updatedPriority","calcEventCacheAfterServerOverwrite","childChangePath","newEventChild","eventChildUpdate","changedSnap","newServerCache","oldServerSnap","serverFilter","newServerNode","newEventSnap","cacheHasChild_","changedChildren","curViewCache","writePath","applyMerge_","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","changedChildren_1","changedChildren_2","mergePath","serverCachePath","oldServerNode","completeServerCache","oldEventCache","serverChildren","EventGenerator","query_","generateEventsForChanges","eventCache","eventRegistrations","events","moves","generateEventsForType_","registrations","filteredChanges","compareChanges_","materializedChange","materializeSingleChange_","registration","aWrapped","bWrapped","View","initialViewCache","eventRegistrations_","indexFilter","getNodeFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","getQuery","getCompleteServerCache","cache","loadsAllData","addEventRegistration","removeEventRegistration","cancelError","cancelEvents","path_1","maybeEvent","existing","generateEventsForChanges_","getInitialEvents","initialChanges","SyncPoint","views_","optCompleteServerCache","events_1","serverCacheComplete","eventCacheComplete","removed","hadCompleteView","hasCompleteView","viewQueryId","getQueryViews","viewForQuery","getCompleteView","viewExistsForQuery","CompoundWrite","writeTree_","addWrite","rootmost","rootMostPath","addWrites","updates","newWrite","removeWrite","hasCompleteWrite","getCompleteNode","getCompleteChildren","childCompoundWrite","shadowingNode","applySubtreeWrite_","writeTree","priorityWrite_1","WriteTree","visibleWrites_","allWrites_","lastWriteId_","childWrites","WriteTreeRef","addOverwrite","writeId","visible","addMerge","getWrite","record","writeToRemove","splice","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","recordContainsPath_","resetTree_","getCompleteWriteData","treePath","writeIdsToExclude","includeHiddenWrites","mergeAtPath","layerTree_","layeredCache","subMerge","completeServerChildren","topLevelSet","merge_1","existingEventSnap","existingServerSnap","childMerge","toIterate","writeRecord","DefaultFilter_","writes","treeRoot","compoundWrite","deepNode","treePath_","existingServerCache","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap_","queryToTagMap_","applyUserOverwrite","newData","applyOperationToSyncPoints_","applyUserMerge","changeTree","affectedTree_1","applyServerOverwrite","applyServerMerge","applyListenComplete","applyTaggedQueryOverwrite","queryKey","queryKeyForTag_","parseQueryKey_","queryPath","op","applyTaggedOperation_","applyTaggedQueryMerge","applyTaggedListenComplete","foundAncestorDefaultView","pathToSyncPoint","sp","syncPoint","childSyncPoint","viewAlreadyExists","makeQueryKey_","getNextQueryTag_","setupListener_","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","collectDistinctViewsForSubTree_","newQuery","createListenerForView_","startListening","queryForListening_","tagForQuery_","hashFn","stopListening","queryToRemove","tagToRemove","removeTags_","maybeChildSyncPoint","childMap","views_1","childViews","queries","removedQuery","removedQueryKey","removedQueryTag","isDefault","queriesToStop","queries_1","childQueries","queryToStop","errorForServerCode","splitIndex","nextQueryTag_","applyOperationHelper_","syncPointTree","applyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","SnapshotHolder","rootNode_","updateSnapshot","newSnapshotNode","AuthTokenProvider","app_","forceRefresh","addTokenChangeListener","removeTokenChangeListener","notifyForInvalidToken","errorMessage","StatsCollection","counters_","incrementCounter","amount","StatsManager","getCollection","hashString","collections_","getOrCreateReporter","creatorFunction","reporters_","StatsListener","collection_","last_","newStats","delta","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","includeStat","stats","reportedStats","haveStatsToReport","reportStats","EventQueue","eventLists_","recursionDepth_","queueEvents","eventDataList","currList","eventPath","EventList","raiseEventsAtPath","raiseQueuedEventsMatchingPredicate_","raiseEventsForChangedPath","changedPath","sentAll","eventList","raise","events_","eventFn","EventEmitter","allowedEvents_","listeners_","trigger","validateEventType_","getInitialEvent","et","VisibilityMonitor","hidden","visibilityChange","visible_","getInstance","OnlineMonitor","online_","currentlyOnline","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","_loop_1","toProcess","this_1","_loop_2","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","BrowserPollConnection","connId","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","readyState","called_1","wrappedFn_1","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","incrementIncomingBytes_","password","sendNewPolls","pN","urlParams","start","uniqueCallbackIdentifier","href","connectURL","addTag","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","forceDisallow","forceDisallow_","isAvailable","Windows","UI","markConnectionHealthy","shutdown_","myDisconnFrame","dataStr","base64data","MAX_URL_DATA_SIZE","enqueueSegment","pw","dframe","commandCB","onMessageCB","outstandingRequests","pendingSegs","currentSerial","myIFrame","createIFrame_","iframeContents","contentDocument","alive","innerHTML","myID","disconn","myPW","theURL","nodeRestRequest","newRequest_","curDataString","theSeg","seg","ts","addLongPollTag_","segnum","totalsegs","serial","doNewRequest","keepaliveTimeout","loadCB","doNodeLongPoll","newScript_1","rstate","parentNode","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","device","User-Agent","platform","NODE_ENV","origin","mySock","onopen","onclose","m","handleIncomingFrame","isOldAndroid","userAgent","oldAndroidMatch","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","mess","resetKeepAlive","remainingData","sendString_","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports_1","ALL_TRANSPORTS","transport","initialTransport","upgradeTransport","Connection","repoInfo_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeout_ms","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","ServerActions","put","refreshAuthToken","onDisconnectPut","onDisconnectMerge","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens_","outstandingPuts_","outstandingPutCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","authToken_","forceTokenRefresh_","invalidAuthTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","scheduleConnect_","onVisible_","onOnline_","onResponse","curReqNum","listen","currentHashFn","listenSpec","sendListen_","req","warnOnListenWarnings_","removeListen_","warnings","indexSpec","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","token_1","authMethod","requestData","cred","onAuthRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage_1","onReady_1","onDisconnect_1","connId_1","nextConnectionId_","lastSessionId_1","canceled_1","connection_1","closeFn_1","accessToken","interrupt","resume","serverTimeOffset","q","normalizedPathString","statusCode","explanation","clientName","ReadonlyRestClient","getListenId_","listenId","thisListen","queryStringParameters","toRestQueryStringParameters","restRequest_","authTokenData","authToken","Repo","forceRestClient","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","persistentConnection_","authTokenProvider","authOverride","statsReporter_","transactions_init_","infoData_","infoSyncTree_","infoEvents","updateInfo_","serverSyncTree_","serverTime","offset","generateServerValues","isMerge","taggedChildren","raw","taggedSnap","rerunTransactions_","interceptServerData_","connectStatus","runOnDisconnectEvents_","getNextWriteId_","newVal","newNodeUnresolved","success","clearEvents","callOnCompleteCallback","abortTransactions_","childrenToMerge","empty","changedKey","changedValue","writeId_1","resolvedOnDisconnectTree","resolvedTree","resolveDeferredValueTree","showDelta","longestName","reduce","previousValue","currentValue","statsIncrementCounter","metric","__database","Database","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","startName","endName","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","indexCompare_1","foundStartPost","changeAccumulator","indexCmp_1","newChildNamedNode","windowBoundary","inRange","oldChildSnap","compareNext","QueryParams","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","WIRE_PROTOCOL_CONSTANTS_","VIEW_FROM_LEFT","copy_","newLimit","VIEW_FROM_RIGHT","WIRE_PROTOCOL_CONSTANTS","INDEX_START_VALUE","INDEX_START_NAME","INDEX_END_VALUE","INDEX_END_NAME","LIMIT","viewFrom","VIEW_FROM","INDEX","REST_CONSTANTS","REST_QUERY_CONSTANTS_","qs","ORDER_BY","START_AT","END_AT","LIMIT_TO_FIRST","LIMIT_TO_LAST","Reference","validateRootPathString","parentPath","getRoot","databaseProp","database","transaction","transactionUpdate","applyLocally","bool","validateBoolean","startTransaction","setPriority","thennablePushRef","pushRef","TransactionStatus","TreeNode","childCount","Tree","parent_","subTree","pathObj","setValue","updateParents_","forEachDescendant","includeSelf","childrenFirst","forEachAncestor","forEachImmediateDescendantWithValue","updateChild_","childEmpty","childExists","MAX_TRANSACTION_RETRIES_","transactionQueueTree_","valueCallback","watchRef","order","retryCount","unwatcher","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","getLatestState_","RUN","queueNode","nodeQueue","priorityForNode","sendReadyTransactions_","excludeSets","pruneCompletedTransactionsBelowNode_","buildTransactionQueue_","sendTransactionQueue_","setsToIgnore","txn","latestState","snapToSend","latestHash","SENT","dataToSend","pathToSend","COMPLETED","SENT_NEEDS_ABORT","NEEDS_ABORT","rootMostTransactionNode","getAncestorTransactionNode_","rerunTransactionQueue_","abortTransaction","currentNode","newDataNode","oldWriteId","newNodeResolved","lastInput","transactionNode","transactionQueue","aggregateTransactionQueuesForNode_","to","from","abortTransactionsOnNode_","lastSent","_staticInstance","RepoManager","repos_","useRestClient_","appName","dbUrl","databaseFromApp","createRepo","deleteRepo","appRepos","DatabaseInternals","checkDeleted_","refFromURL","apiName","parsedURL","goOffline","goOnline","ServerValue","TIMESTAMP",".sv","__awaiter","__generator","freeze","forceLongPolling","forceWebSockets","setSecurityDebugCallback","interceptServerData","DataConnection","simpleListen","echo","onEcho","RealTimeConnection","ConnectionTarget","TEST_ACCESS","hijackHash","newHash","oldPut","opt_onComplete","opt_hash","listens","firebaseRef","registerDatabase","instance","unused","__assign","__rest","__decorate","__param","__metadata","__exportStar","__values","__read","__spread","__await","__asyncGenerator","__asyncDelegator","__asyncValues","__makeTemplateObject","__importStar","__importDefault","extendStatics","__","decorators","decorate","paramIndex","decorator","metadataKey","metadataValue","_arguments","generator","fulfilled","step","y","_","label","sent","trys","ops","verb","throw","return","o","ar","asyncIterator","fulfill","settle","cooked","mod","setLogLevel","instances","defaultLogLevel","INFO","defaultLogHandler","logType","toISOString","DEBUG","info","WARN","ERROR","_logLevel","_logHandler","debug","level","inst"],"mappings":"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","file":"vendors.bundle.js","sourcesContent":["// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nmodule.exports = typeof window == 'object' && window && window.Math == Math ? window\n  : typeof self == 'object' && self && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\n","var path = require('../internals/path');\nvar has = require('../internals/has');\nvar wrappedWellKnownSymbolModule = require('../internals/wrapped-well-known-symbol');\nvar defineProperty = require('../internals/object-define-property').f;\n\nmodule.exports = function (NAME) {\n  var Symbol = path.Symbol || (path.Symbol = {});\n  if (!has(Symbol, NAME)) defineProperty(Symbol, NAME, {\n    value: wrappedWellKnownSymbolModule.f(NAME)\n  });\n};\n","var store = require('../internals/shared')('wks');\nvar uid = require('../internals/uid');\nvar Symbol = require('../internals/global').Symbol;\nvar NATIVE_SYMBOL = require('../internals/native-symbol');\n\nmodule.exports = function (name) {\n  return store[name] || (store[name] = NATIVE_SYMBOL && Symbol[name]\n    || (NATIVE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n","var hasOwnProperty = {}.hasOwnProperty;\n\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","var definePropertyModule = require('../internals/object-define-property');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\n\nmodule.exports = require('../internals/descriptors') ? function (object, key, value) {\n  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","var global = require('../internals/global');\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar hide = require('../internals/hide');\nvar redefine = require('../internals/redefine');\nvar setGlobal = require('../internals/set-global');\nvar copyConstructorProperties = require('../internals/copy-constructor-properties');\nvar isForced = require('../internals/is-forced');\n\n/*\n  options.target      - name of the target object\n  options.global      - target is the global object\n  options.stat        - export as static methods of target\n  options.proto       - export as prototype methods of target\n  options.real        - real prototype method for the `pure` version\n  options.forced      - export even if the native feature is available\n  options.bind        - bind methods to the target, required for the `pure` version\n  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version\n  options.unsafe      - use the simple assignment of property instead of delete + defineProperty\n  options.sham        - add a flag to not completely full polyfills\n  options.enumerable  - export as enumerable property\n  options.noTargetGet - prevent calling a getter on target\n*/\nmodule.exports = function (options, source) {\n  var TARGET = options.target;\n  var GLOBAL = options.global;\n  var STATIC = options.stat;\n  var FORCED, target, key, targetProperty, sourceProperty, descriptor;\n  if (GLOBAL) {\n    target = global;\n  } else if (STATIC) {\n    target = global[TARGET] || setGlobal(TARGET, {});\n  } else {\n    target = (global[TARGET] || {}).prototype;\n  }\n  if (target) for (key in source) {\n    sourceProperty = source[key];\n    if (options.noTargetGet) {\n      descriptor = getOwnPropertyDescriptor(target, key);\n      targetProperty = descriptor && descriptor.value;\n    } else targetProperty = target[key];\n    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);\n    // contained in target\n    if (!FORCED && targetProperty !== undefined) {\n      if (typeof sourceProperty === typeof targetProperty) continue;\n      copyConstructorProperties(sourceProperty, targetProperty);\n    }\n    // add a flag to not completely full polyfills\n    if (options.sham || (targetProperty && targetProperty.sham)) {\n      hide(sourceProperty, 'sham', true);\n    }\n    // extend global\n    redefine(target, key, sourceProperty, options);\n  }\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\nvar anObject = require('../internals/an-object');\nvar toPrimitive = require('../internals/to-primitive');\nvar nativeDefineProperty = Object.defineProperty;\n\nexports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return nativeDefineProperty(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('../internals/fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n","var isObject = require('../internals/is-object');\n\nmodule.exports = function (it) {\n  if (!isObject(it)) {\n    throw TypeError(String(it) + ' is not an object');\n  } return it;\n};\n","// toObject with fallback for non-array-like ES3 strings\nvar IndexedObject = require('../internals/indexed-object');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nmodule.exports = function (it) {\n  return IndexedObject(requireObjectCoercible(it));\n};\n","// `RequireObjectCoercible` abstract operation\n// https://tc39.github.io/ecma262/#sec-requireobjectcoercible\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on \" + it);\n  return it;\n};\n","var global = require('../internals/global');\nvar setGlobal = require('../internals/set-global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || setGlobal(SHARED, {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: '3.0.0',\n  mode: require('../internals/is-pure') ? 'pure' : 'global',\n  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'\n});\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","var defineProperty = require('../internals/object-define-property').f;\nvar has = require('../internals/has');\nvar TO_STRING_TAG = require('../internals/well-known-symbol')('toStringTag');\n\nmodule.exports = function (it, TAG, STATIC) {\n  if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {\n    defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });\n  }\n};\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","var requireObjectCoercible = require('../internals/require-object-coercible');\n\n// `ToObject` abstract operation\n// https://tc39.github.io/ecma262/#sec-toobject\nmodule.exports = function (argument) {\n  return Object(requireObjectCoercible(argument));\n};\n","var toInteger = require('../internals/to-integer');\nvar min = Math.min;\n\n// `ToLength` abstract operation\n// https://tc39.github.io/ecma262/#sec-tolength\nmodule.exports = function (argument) {\n  return argument > 0 ? min(toInteger(argument), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n","var ceil = Math.ceil;\nvar floor = Math.floor;\n\n// `ToInteger` abstract operation\n// https://tc39.github.io/ecma262/#sec-tointeger\nmodule.exports = function (argument) {\n  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);\n};\n","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('../internals/is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","module.exports = false;\n","'use strict';\nvar nativePropertyIsEnumerable = {}.propertyIsEnumerable;\nvar nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\n// Nashorn ~ JDK8 bug\nvar NASHORN_BUG = nativeGetOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);\n\nexports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {\n  var descriptor = nativeGetOwnPropertyDescriptor(this, V);\n  return !!descriptor && descriptor.enumerable;\n} : nativePropertyIsEnumerable;\n","var global = require('../internals/global');\nvar hide = require('../internals/hide');\nvar has = require('../internals/has');\nvar setGlobal = require('../internals/set-global');\nvar nativeFunctionToString = require('../internals/function-to-string');\nvar InternalStateModule = require('../internals/internal-state');\nvar getInternalState = InternalStateModule.get;\nvar enforceInternalState = InternalStateModule.enforce;\nvar TEMPLATE = String(nativeFunctionToString).split('toString');\n\nrequire('../internals/shared')('inspectSource', function (it) {\n  return nativeFunctionToString.call(it);\n});\n\n(module.exports = function (O, key, value, options) {\n  var unsafe = options ? !!options.unsafe : false;\n  var simple = options ? !!options.enumerable : false;\n  var noTargetGet = options ? !!options.noTargetGet : false;\n  if (typeof value == 'function') {\n    if (typeof key == 'string' && !has(value, 'name')) hide(value, 'name', key);\n    enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');\n  }\n  if (O === global) {\n    if (simple) O[key] = value;\n    else setGlobal(key, value);\n    return;\n  } else if (!unsafe) {\n    delete O[key];\n  } else if (!noTargetGet && O[key]) {\n    simple = true;\n  }\n  if (simple) O[key] = value;\n  else hide(O, key, value);\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, 'toString', function toString() {\n  return typeof this == 'function' && getInternalState(this).source || nativeFunctionToString.call(this);\n});\n","var NATIVE_WEAK_MAP = require('../internals/native-weak-map');\nvar isObject = require('../internals/is-object');\nvar hide = require('../internals/hide');\nvar objectHas = require('../internals/has');\nvar sharedKey = require('../internals/shared-key');\nvar hiddenKeys = require('../internals/hidden-keys');\nvar WeakMap = require('../internals/global').WeakMap;\nvar set, get, has;\n\nvar enforce = function (it) {\n  return has(it) ? get(it) : set(it, {});\n};\n\nvar getterFor = function (TYPE) {\n  return function (it) {\n    var state;\n    if (!isObject(it) || (state = get(it)).type !== TYPE) {\n      throw TypeError('Incompatible receiver, ' + TYPE + ' required');\n    } return state;\n  };\n};\n\nif (NATIVE_WEAK_MAP) {\n  var store = new WeakMap();\n  var wmget = store.get;\n  var wmhas = store.has;\n  var wmset = store.set;\n  set = function (it, metadata) {\n    wmset.call(store, it, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return wmget.call(store, it) || {};\n  };\n  has = function (it) {\n    return wmhas.call(store, it);\n  };\n} else {\n  var STATE = sharedKey('state');\n  hiddenKeys[STATE] = true;\n  set = function (it, metadata) {\n    hide(it, STATE, metadata);\n    return metadata;\n  };\n  get = function (it) {\n    return objectHas(it, STATE) ? it[STATE] : {};\n  };\n  has = function (it) {\n    return objectHas(it, STATE);\n  };\n}\n\nmodule.exports = {\n  set: set,\n  get: get,\n  has: has,\n  enforce: enforce,\n  getterFor: getterFor\n};\n","var shared = require('../internals/shared')('keys');\nvar uid = require('../internals/uid');\n\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n","module.exports = {};\n","exports.f = Object.getOwnPropertySymbols;\n","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar internalObjectKeys = require('../internals/object-keys-internal');\nvar enumBugKeys = require('../internals/enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return internalObjectKeys(O, enumBugKeys);\n};\n","var global = require('../internals/global');\nvar bind = require('../internals/bind-context');\nvar call = Function.call;\n\nmodule.exports = function (CONSTRUCTOR, METHOD, length) {\n  return bind(call, global[CONSTRUCTOR].prototype[METHOD], length);\n};\n","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar fails = require('../internals/fails');\nvar classof = require('../internals/classof-raw');\nvar split = ''.split;\n\nmodule.exports = fails(function () {\n  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346\n  // eslint-disable-next-line no-prototype-builtins\n  return !Object('z').propertyIsEnumerable(0);\n}) ? function (it) {\n  return classof(it) == 'String' ? split.call(it, '') : Object(it);\n} : Object;\n","var classof = require('../internals/classof-raw');\n\n// `IsArray` abstract operation\n// https://tc39.github.io/ecma262/#sec-isarray\nmodule.exports = Array.isArray || function isArray(arg) {\n  return classof(arg) == 'Array';\n};\n","var global = require('../internals/global');\nvar hide = require('../internals/hide');\n\nmodule.exports = function (key, value) {\n  try {\n    hide(global, key, value);\n  } catch (e) {\n    global[key] = value;\n  } return value;\n};\n","var id = 0;\nvar postfix = Math.random();\n\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + postfix).toString(36));\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar toPrimitive = require('../internals/to-primitive');\nvar has = require('../internals/has');\nvar IE8_DOM_DEFINE = require('../internals/ie8-dom-define');\nvar nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n\nexports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {\n  O = toIndexedObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return nativeGetOwnPropertyDescriptor(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);\n};\n","// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar internalObjectKeys = require('../internals/object-keys-internal');\nvar hiddenKeys = require('../internals/enum-bug-keys').concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return internalObjectKeys(O, hiddenKeys);\n};\n","// IE8- don't enum bug keys\nmodule.exports = [\n  'constructor',\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toLocaleString',\n  'toString',\n  'valueOf'\n];\n","var UNSCOPABLES = require('../internals/well-known-symbol')('unscopables');\nvar create = require('../internals/object-create');\nvar hide = require('../internals/hide');\nvar ArrayPrototype = Array.prototype;\n\n// Array.prototype[@@unscopables]\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\nif (ArrayPrototype[UNSCOPABLES] == undefined) {\n  hide(ArrayPrototype, UNSCOPABLES, create(null));\n}\n\n// add a key to Array.prototype[@@unscopables]\nmodule.exports = function (key) {\n  ArrayPrototype[UNSCOPABLES][key] = true;\n};\n","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('../internals/an-object');\nvar defineProperties = require('../internals/object-define-properties');\nvar enumBugKeys = require('../internals/enum-bug-keys');\nvar html = require('../internals/html');\nvar documentCreateElement = require('../internals/document-create-element');\nvar IE_PROTO = require('../internals/shared-key')('IE_PROTO');\nvar PROTOTYPE = 'prototype';\nvar Empty = function () { /* empty */ };\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = documentCreateElement('iframe');\n  var length = enumBugKeys.length;\n  var lt = '<';\n  var script = 'script';\n  var gt = '>';\n  var js = 'java' + script + ':';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  html.appendChild(iframe);\n  iframe.src = String(js);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + script + gt + 'document.F=Object' + lt + '/' + script + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (length--) delete createDict[PROTOTYPE][enumBugKeys[length]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : defineProperties(result, Properties);\n};\n\nrequire('../internals/hidden-keys')[IE_PROTO] = true;\n","module.exports = require('../internals/global');\n","exports.f = require('../internals/well-known-symbol');\n","module.exports = {};\n","'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nrequire('@firebase/polyfill');\nvar firebase = _interopDefault(require('@firebase/app'));\n\n/**\r\n * @license\r\n * Copyright 2018 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nmodule.exports = firebase;\n//# sourceMappingURL=index.cjs.js.map\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var bind = require('../internals/bind-context');\nvar IndexedObject = require('../internals/indexed-object');\nvar toObject = require('../internals/to-object');\nvar toLength = require('../internals/to-length');\nvar arraySpeciesCreate = require('../internals/array-species-create');\n\n// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation\n// 0 -> Array#forEach\n// https://tc39.github.io/ecma262/#sec-array.prototype.foreach\n// 1 -> Array#map\n// https://tc39.github.io/ecma262/#sec-array.prototype.map\n// 2 -> Array#filter\n// https://tc39.github.io/ecma262/#sec-array.prototype.filter\n// 3 -> Array#some\n// https://tc39.github.io/ecma262/#sec-array.prototype.some\n// 4 -> Array#every\n// https://tc39.github.io/ecma262/#sec-array.prototype.every\n// 5 -> Array#find\n// https://tc39.github.io/ecma262/#sec-array.prototype.find\n// 6 -> Array#findIndex\n// https://tc39.github.io/ecma262/#sec-array.prototype.findIndex\nmodule.exports = function (TYPE, specificCreate) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  var create = specificCreate || arraySpeciesCreate;\n  return function ($this, callbackfn, that) {\n    var O = toObject($this);\n    var self = IndexedObject(O);\n    var boundFunction = bind(callbackfn, that, 3);\n    var length = toLength(self.length);\n    var index = 0;\n    var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var value, result;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      value = self[index];\n      result = boundFunction(value, index, O);\n      if (TYPE) {\n        if (IS_MAP) target[index] = result; // map\n        else if (result) switch (TYPE) {\n          case 3: return true;              // some\n          case 5: return value;             // find\n          case 6: return index;             // findIndex\n          case 2: target.push(value);       // filter\n        } else if (IS_EVERY) return false;  // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;\n  };\n};\n","var aFunction = require('../internals/a-function');\n\n// optional / simple context binding\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 0: return function () {\n      return fn.call(that);\n    };\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","var isObject = require('../internals/is-object');\nvar isArray = require('../internals/is-array');\nvar SPECIES = require('../internals/well-known-symbol')('species');\n\n// `ArraySpeciesCreate` abstract operation\n// https://tc39.github.io/ecma262/#sec-arrayspeciescreate\nmodule.exports = function (originalArray, length) {\n  var C;\n  if (isArray(originalArray)) {\n    C = originalArray.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    else if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);\n};\n","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('../internals/descriptors') && !require('../internals/fails')(function () {\n  return Object.defineProperty(require('../internals/document-create-element')('div'), 'a', {\n    get: function () { return 7; }\n  }).a != 7;\n});\n","var isObject = require('../internals/is-object');\nvar document = require('../internals/global').document;\n// typeof document.createElement is 'object' in old IE\nvar exist = isObject(document) && isObject(document.createElement);\n\nmodule.exports = function (it) {\n  return exist ? document.createElement(it) : {};\n};\n","// Chrome 38 Symbol has incorrect toString conversion\nmodule.exports = !require('../internals/fails')(function () {\n  // eslint-disable-next-line no-undef\n  String(Symbol());\n});\n","module.exports = require('../internals/shared')('native-function-to-string', Function.toString);\n","var has = require('../internals/has');\nvar ownKeys = require('../internals/own-keys');\nvar getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');\nvar definePropertyModule = require('../internals/object-define-property');\n\nmodule.exports = function (target, source) {\n  var keys = ownKeys(source);\n  var defineProperty = definePropertyModule.f;\n  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));\n  }\n};\n","var has = require('../internals/has');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar arrayIndexOf = require('../internals/array-includes')(false);\nvar hiddenKeys = require('../internals/hidden-keys');\n\nmodule.exports = function (object, names) {\n  var O = toIndexedObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","// `Symbol.iterator` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.iterator\nrequire('../internals/define-well-known-symbol')('iterator');\n","'use strict';\nvar $export = require('../internals/export');\nvar createIteratorConstructor = require('../internals/create-iterator-constructor');\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar hide = require('../internals/hide');\nvar redefine = require('../internals/redefine');\nvar IS_PURE = require('../internals/is-pure');\nvar ITERATOR = require('../internals/well-known-symbol')('iterator');\nvar Iterators = require('../internals/iterators');\nvar IteratorsCore = require('../internals/iterators-core');\nvar IteratorPrototype = IteratorsCore.IteratorPrototype;\nvar BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;\nvar KEYS = 'keys';\nvar VALUES = 'values';\nvar ENTRIES = 'entries';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {\n  createIteratorConstructor(IteratorConstructor, NAME, next);\n\n  var getIterationMethod = function (KIND) {\n    if (KIND === DEFAULT && defaultIterator) return defaultIterator;\n    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];\n    switch (KIND) {\n      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };\n      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };\n      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };\n    } return function () { return new IteratorConstructor(this); };\n  };\n\n  var TO_STRING_TAG = NAME + ' Iterator';\n  var INCORRECT_VALUES_NAME = false;\n  var IterablePrototype = Iterable.prototype;\n  var nativeIterator = IterablePrototype[ITERATOR]\n    || IterablePrototype['@@iterator']\n    || DEFAULT && IterablePrototype[DEFAULT];\n  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);\n  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;\n  var CurrentIteratorPrototype, methods, KEY;\n\n  // fix native\n  if (anyNativeIterator) {\n    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));\n    if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {\n      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {\n        if (setPrototypeOf) {\n          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);\n        } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {\n          hide(CurrentIteratorPrototype, ITERATOR, returnThis);\n        }\n      }\n      // Set @@toStringTag to native iterators\n      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);\n      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;\n    }\n  }\n\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {\n    INCORRECT_VALUES_NAME = true;\n    defaultIterator = function values() { return nativeIterator.call(this); };\n  }\n\n  // define iterator\n  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {\n    hide(IterablePrototype, ITERATOR, defaultIterator);\n  }\n  Iterators[NAME] = defaultIterator;\n\n  // export additional methods\n  if (DEFAULT) {\n    methods = {\n      values: getIterationMethod(VALUES),\n      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),\n      entries: getIterationMethod(ENTRIES)\n    };\n    if (FORCED) for (KEY in methods) {\n      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {\n        redefine(IterablePrototype, KEY, methods[KEY]);\n      }\n    } else $export({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);\n  }\n\n  return methods;\n};\n","'use strict';\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\nvar hide = require('../internals/hide');\nvar has = require('../internals/has');\nvar IS_PURE = require('../internals/is-pure');\nvar ITERATOR = require('../internals/well-known-symbol')('iterator');\nvar BUGGY_SAFARI_ITERATORS = false;\n\nvar returnThis = function () { return this; };\n\n// `%IteratorPrototype%` object\n// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object\nvar IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;\n\nif ([].keys) {\n  arrayIterator = [].keys();\n  // Safari 8 has buggy iterators w/o `next`\n  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;\n  else {\n    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));\n    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;\n  }\n}\n\nif (IteratorPrototype == undefined) IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nif (!IS_PURE && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);\n\nmodule.exports = {\n  IteratorPrototype: IteratorPrototype,\n  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS\n};\n","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = require('../internals/has');\nvar toObject = require('../internals/to-object');\nvar IE_PROTO = require('../internals/shared-key')('IE_PROTO');\nvar CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');\nvar ObjectPrototype = Object.prototype;\n\nmodule.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectPrototype : null;\n};\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar util = require('@firebase/util');\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar contains = function (obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n};\r\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\n// An array to capture listeners before the true auth functions\r\n// exist\r\nvar tokenListeners = [];\r\n/**\r\n * Global context object for a collection of services using\r\n * a shared authentication state.\r\n */\r\nvar FirebaseAppImpl = /** @class */ (function () {\r\n    function FirebaseAppImpl(options, config, firebase_) {\r\n        this.firebase_ = firebase_;\r\n        this.isDeleted_ = false;\r\n        this.services_ = {};\r\n        this.name_ = config.name;\r\n        this._automaticDataCollectionEnabled =\r\n            config.automaticDataCollectionEnabled || false;\r\n        this.options_ = util.deepCopy(options);\r\n        this.INTERNAL = {\r\n            getUid: function () { return null; },\r\n            getToken: function () { return Promise.resolve(null); },\r\n            addAuthTokenListener: function (callback) {\r\n                tokenListeners.push(callback);\r\n                // Make sure callback is called, asynchronously, in the absence of the auth module\r\n                setTimeout(function () { return callback(null); }, 0);\r\n            },\r\n            removeAuthTokenListener: function (callback) {\r\n                tokenListeners = tokenListeners.filter(function (listener) { return listener !== callback; });\r\n            }\r\n        };\r\n    }\r\n    Object.defineProperty(FirebaseAppImpl.prototype, \"automaticDataCollectionEnabled\", {\r\n        get: function () {\r\n            this.checkDestroyed_();\r\n            return this._automaticDataCollectionEnabled;\r\n        },\r\n        set: function (val) {\r\n            this.checkDestroyed_();\r\n            this._automaticDataCollectionEnabled = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FirebaseAppImpl.prototype, \"name\", {\r\n        get: function () {\r\n            this.checkDestroyed_();\r\n            return this.name_;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FirebaseAppImpl.prototype, \"options\", {\r\n        get: function () {\r\n            this.checkDestroyed_();\r\n            return this.options_;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    FirebaseAppImpl.prototype.delete = function () {\r\n        var _this = this;\r\n        return new Promise(function (resolve) {\r\n            _this.checkDestroyed_();\r\n            resolve();\r\n        })\r\n            .then(function () {\r\n            _this.firebase_.INTERNAL.removeApp(_this.name_);\r\n            var services = [];\r\n            Object.keys(_this.services_).forEach(function (serviceKey) {\r\n                Object.keys(_this.services_[serviceKey]).forEach(function (instanceKey) {\r\n                    services.push(_this.services_[serviceKey][instanceKey]);\r\n                });\r\n            });\r\n            return Promise.all(services.map(function (service) {\r\n                return service.INTERNAL.delete();\r\n            }));\r\n        })\r\n            .then(function () {\r\n            _this.isDeleted_ = true;\r\n            _this.services_ = {};\r\n        });\r\n    };\r\n    /**\r\n     * Return a service instance associated with this app (creating it\r\n     * on demand), identified by the passed instanceIdentifier.\r\n     *\r\n     * NOTE: Currently storage is the only one that is leveraging this\r\n     * functionality. They invoke it by calling:\r\n     *\r\n     * ```javascript\r\n     * firebase.app().storage('STORAGE BUCKET ID')\r\n     * ```\r\n     *\r\n     * The service name is passed to this already\r\n     * @internal\r\n     */\r\n    FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {\r\n        if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME; }\r\n        this.checkDestroyed_();\r\n        if (!this.services_[name]) {\r\n            this.services_[name] = {};\r\n        }\r\n        if (!this.services_[name][instanceIdentifier]) {\r\n            /**\r\n             * If a custom instance has been defined (i.e. not '[DEFAULT]')\r\n             * then we will pass that instance on, otherwise we pass `null`\r\n             */\r\n            var instanceSpecifier = instanceIdentifier !== DEFAULT_ENTRY_NAME\r\n                ? instanceIdentifier\r\n                : undefined;\r\n            var service = this.firebase_.INTERNAL.factories[name](this, this.extendApp.bind(this), instanceSpecifier);\r\n            this.services_[name][instanceIdentifier] = service;\r\n        }\r\n        return this.services_[name][instanceIdentifier];\r\n    };\r\n    /**\r\n     * Callback function used to extend an App instance at the time\r\n     * of service instance creation.\r\n     */\r\n    FirebaseAppImpl.prototype.extendApp = function (props) {\r\n        var _this = this;\r\n        // Copy the object onto the FirebaseAppImpl prototype\r\n        util.deepExtend(this, props);\r\n        /**\r\n         * If the app has overwritten the addAuthTokenListener stub, forward\r\n         * the active token listeners on to the true fxn.\r\n         *\r\n         * TODO: This function is required due to our current module\r\n         * structure. Once we are able to rely strictly upon a single module\r\n         * implementation, this code should be refactored and Auth should\r\n         * provide these stubs and the upgrade logic\r\n         */\r\n        if (props.INTERNAL && props.INTERNAL.addAuthTokenListener) {\r\n            tokenListeners.forEach(function (listener) {\r\n                _this.INTERNAL.addAuthTokenListener(listener);\r\n            });\r\n            tokenListeners = [];\r\n        }\r\n    };\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    FirebaseAppImpl.prototype.checkDestroyed_ = function () {\r\n        if (this.isDeleted_) {\r\n            error('app-deleted', { name: this.name_ });\r\n        }\r\n    };\r\n    return FirebaseAppImpl;\r\n}());\r\n// Prevent dead-code elimination of these methods w/o invalid property\r\n// copying.\r\n(FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||\r\n    FirebaseAppImpl.prototype.delete ||\r\n    console.log('dc');\r\n/**\r\n * Return a firebase namespace object.\r\n *\r\n * In production, this will be called exactly once and the result\r\n * assigned to the 'firebase' global.  It may be called multiple times\r\n * in unit tests.\r\n */\r\nfunction createFirebaseNamespace() {\r\n    var apps_ = {};\r\n    var factories = {};\r\n    var appHooks = {};\r\n    // A namespace is a plain JavaScript Object.\r\n    var namespace = {\r\n        // Hack to prevent Babel from modifying the object returned\r\n        // as the firebase namespace.\r\n        __esModule: true,\r\n        initializeApp: initializeApp,\r\n        app: app,\r\n        apps: null,\r\n        Promise: Promise,\r\n        SDK_VERSION: '5.9.4',\r\n        INTERNAL: {\r\n            registerService: registerService,\r\n            createFirebaseNamespace: createFirebaseNamespace,\r\n            extendNamespace: extendNamespace,\r\n            createSubscribe: util.createSubscribe,\r\n            ErrorFactory: util.ErrorFactory,\r\n            removeApp: removeApp,\r\n            factories: factories,\r\n            useAsService: useAsService,\r\n            Promise: Promise,\r\n            deepExtend: util.deepExtend\r\n        }\r\n    };\r\n    // Inject a circular default export to allow Babel users who were previously\r\n    // using:\r\n    //\r\n    //   import firebase from 'firebase';\r\n    //   which becomes: var firebase = require('firebase').default;\r\n    //\r\n    // instead of\r\n    //\r\n    //   import * as firebase from 'firebase';\r\n    //   which becomes: var firebase = require('firebase');\r\n    util.patchProperty(namespace, 'default', namespace);\r\n    // firebase.apps is a read-only getter.\r\n    Object.defineProperty(namespace, 'apps', {\r\n        get: getApps\r\n    });\r\n    /**\r\n     * Called by App.delete() - but before any services associated with the App\r\n     * are deleted.\r\n     */\r\n    function removeApp(name) {\r\n        var app = apps_[name];\r\n        callAppHooks(app, 'delete');\r\n        delete apps_[name];\r\n    }\r\n    /**\r\n     * Get the App object for a given name (or DEFAULT).\r\n     */\r\n    function app(name) {\r\n        name = name || DEFAULT_ENTRY_NAME;\r\n        if (!contains(apps_, name)) {\r\n            error('no-app', { name: name });\r\n        }\r\n        return apps_[name];\r\n    }\r\n    util.patchProperty(app, 'App', FirebaseAppImpl);\r\n    function initializeApp(options, rawConfig) {\r\n        if (rawConfig === void 0) { rawConfig = {}; }\r\n        if (typeof rawConfig !== 'object' || rawConfig === null) {\r\n            var name_1 = rawConfig;\r\n            rawConfig = { name: name_1 };\r\n        }\r\n        var config = rawConfig;\r\n        if (config.name === undefined) {\r\n            config.name = DEFAULT_ENTRY_NAME;\r\n        }\r\n        var name = config.name;\r\n        if (typeof name !== 'string' || !name) {\r\n            error('bad-app-name', { name: name + '' });\r\n        }\r\n        if (contains(apps_, name)) {\r\n            error('duplicate-app', { name: name });\r\n        }\r\n        var app = new FirebaseAppImpl(options, config, namespace);\r\n        apps_[name] = app;\r\n        callAppHooks(app, 'create');\r\n        return app;\r\n    }\r\n    /*\r\n     * Return an array of all the non-deleted FirebaseApps.\r\n     */\r\n    function getApps() {\r\n        // Make a copy so caller cannot mutate the apps list.\r\n        return Object.keys(apps_).map(function (name) { return apps_[name]; });\r\n    }\r\n    /*\r\n     * Register a Firebase Service.\r\n     *\r\n     * firebase.INTERNAL.registerService()\r\n     *\r\n     * TODO: Implement serviceProperties.\r\n     */\r\n    function registerService(name, createService, serviceProperties, appHook, allowMultipleInstances) {\r\n        // Cannot re-register a service that already exists\r\n        if (factories[name]) {\r\n            error('duplicate-service', { name: name });\r\n        }\r\n        // Capture the service factory for later service instantiation\r\n        factories[name] = createService;\r\n        // Capture the appHook, if passed\r\n        if (appHook) {\r\n            appHooks[name] = appHook;\r\n            // Run the **new** app hook on all existing apps\r\n            getApps().forEach(function (app) {\r\n                appHook('create', app);\r\n            });\r\n        }\r\n        // The Service namespace is an accessor function ...\r\n        var serviceNamespace = function (appArg) {\r\n            if (appArg === void 0) { appArg = app(); }\r\n            if (typeof appArg[name] !== 'function') {\r\n                // Invalid argument.\r\n                // This happens in the following case: firebase.storage('gs:/')\r\n                error('invalid-app-argument', { name: name });\r\n            }\r\n            // Forward service instance lookup to the FirebaseApp.\r\n            return appArg[name]();\r\n        };\r\n        // ... and a container for service-level properties.\r\n        if (serviceProperties !== undefined) {\r\n            util.deepExtend(serviceNamespace, serviceProperties);\r\n        }\r\n        // Monkey-patch the serviceNamespace onto the firebase namespace\r\n        namespace[name] = serviceNamespace;\r\n        // Patch the FirebaseAppImpl prototype\r\n        FirebaseAppImpl.prototype[name] = function () {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            var serviceFxn = this._getService.bind(this, name);\r\n            return serviceFxn.apply(this, allowMultipleInstances ? args : []);\r\n        };\r\n        return serviceNamespace;\r\n    }\r\n    /**\r\n     * Patch the top-level firebase namespace with additional properties.\r\n     *\r\n     * firebase.INTERNAL.extendNamespace()\r\n     */\r\n    function extendNamespace(props) {\r\n        util.deepExtend(namespace, props);\r\n    }\r\n    function callAppHooks(app, eventName) {\r\n        Object.keys(factories).forEach(function (serviceName) {\r\n            // Ignore virtual services\r\n            var factoryName = useAsService(app, serviceName);\r\n            if (factoryName === null) {\r\n                return;\r\n            }\r\n            if (appHooks[factoryName]) {\r\n                appHooks[factoryName](eventName, app);\r\n            }\r\n        });\r\n    }\r\n    // Map the requested service to a registered service name\r\n    // (used to map auth to serverAuth service when needed).\r\n    function useAsService(app, name) {\r\n        if (name === 'serverAuth') {\r\n            return null;\r\n        }\r\n        var useService = name;\r\n        var options = app.options;\r\n        return useService;\r\n    }\r\n    return namespace;\r\n}\r\nfunction error(code, args) {\r\n    throw appErrors.create(code, args);\r\n}\r\nvar errors = {\r\n    'no-app': \"No Firebase App '{$name}' has been created - \" +\r\n        'call Firebase App.initializeApp()',\r\n    'bad-app-name': \"Illegal App name: '{$name}\",\r\n    'duplicate-app': \"Firebase App named '{$name}' already exists\",\r\n    'app-deleted': \"Firebase App named '{$name}' already deleted\",\r\n    'duplicate-service': \"Firebase service named '{$name}' already registered\",\r\n    'sa-not-supported': 'Initializing the Firebase SDK with a service ' +\r\n        'account is only allowed in a Node.js environment. On client ' +\r\n        'devices, you should instead initialize the SDK with an api key and ' +\r\n        'auth domain',\r\n    'invalid-app-argument': 'firebase.{$name}() takes either no argument or a ' +\r\n        'Firebase App instance.'\r\n};\r\nvar appErrors = new util.ErrorFactory('app', 'Firebase', errors);\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Node detection logic from: https://github.com/iliakan/detect-node/\r\nvar isNode = false;\r\ntry {\r\n    isNode =\r\n        Object.prototype.toString.call(global.process) === '[object process]';\r\n}\r\ncatch (e) { }\r\nisNode &&\r\n    console.warn(\"\\nWarning: This is a browser-targeted Firebase bundle but it appears it is being\\nrun in a Node environment.  If running in a Node environment, make sure you\\nare using the bundle specified by the \\\"main\\\" field in package.json.\\n\\nIf you are using Webpack, you can specify \\\"main\\\" as the first item in\\n\\\"resolve.mainFields\\\":\\nhttps://webpack.js.org/configuration/resolve/#resolvemainfields\\n\\nIf using Rollup, use the rollup-plugin-node-resolve plugin and set \\\"module\\\"\\nto false and \\\"main\\\" to true:\\nhttps://github.com/rollup/rollup-plugin-node-resolve\\n\");\r\nvar firebase = createFirebaseNamespace();\n\nexports.default = firebase;\nexports.firebase = firebase;\n//# sourceMappingURL=index.cjs.js.map\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */\r\nvar CONSTANTS = {\r\n    /**\r\n     * @define {boolean} Whether this is the client Node.js SDK.\r\n     */\r\n    NODE_CLIENT: false,\r\n    /**\r\n     * @define {boolean} Whether this is the Admin Node.js SDK.\r\n     */\r\n    NODE_ADMIN: false,\r\n    /**\r\n     * Firebase SDK Version\r\n     */\r\n    SDK_VERSION: '${JSCORE_VERSION}'\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws an error if the provided assertion is falsy\r\n * @param {*} assertion The assertion to be tested for falsiness\r\n * @param {!string} message The message to display if the check fails\r\n */\r\nvar assert = function (assertion, message) {\r\n    if (!assertion) {\r\n        throw assertionError(message);\r\n    }\r\n};\r\n/**\r\n * Returns an Error object suitable for throwing.\r\n * @param {string} message\r\n * @return {!Error}\r\n */\r\nvar assertionError = function (message) {\r\n    return new Error('Firebase Database (' +\r\n        CONSTANTS.SDK_VERSION +\r\n        ') INTERNAL ASSERT FAILED: ' +\r\n        message);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar stringToByteArray = function (str) {\r\n    // TODO(user): Use native implementations if/when available\r\n    var out = [], p = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n        var c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if ((c & 0xfc00) == 0xd800 &&\r\n            i + 1 < str.length &&\r\n            (str.charCodeAt(i + 1) & 0xfc00) == 0xdc00) {\r\n            // Surrogate Pair\r\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param {Array<number>} bytes Array of numbers representing characters.\r\n * @return {string} Stringification of the array.\r\n */\r\nvar byteArrayToString = function (bytes) {\r\n    // TODO(user): Use native implementations if/when available\r\n    var out = [], pos = 0, c = 0;\r\n    while (pos < bytes.length) {\r\n        var c1 = bytes[pos++];\r\n        if (c1 < 128) {\r\n            out[c++] = String.fromCharCode(c1);\r\n        }\r\n        else if (c1 > 191 && c1 < 224) {\r\n            var c2 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\r\n        }\r\n        else if (c1 > 239 && c1 < 365) {\r\n            // Surrogate Pair\r\n            var c2 = bytes[pos++];\r\n            var c3 = bytes[pos++];\r\n            var c4 = bytes[pos++];\r\n            var u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\r\n                0x10000;\r\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\r\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\r\n        }\r\n        else {\r\n            var c2 = bytes[pos++];\r\n            var c3 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n        }\r\n    }\r\n    return out.join('');\r\n};\r\n// Static lookup maps, lazily populated by init_()\r\nvar base64 = {\r\n    /**\r\n     * Maps bytes to characters.\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    byteToCharMap_: null,\r\n    /**\r\n     * Maps characters to bytes.\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    charToByteMap_: null,\r\n    /**\r\n     * Maps bytes to websafe characters.\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    byteToCharMapWebSafe_: null,\r\n    /**\r\n     * Maps websafe characters to bytes.\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    charToByteMapWebSafe_: null,\r\n    /**\r\n     * Our default alphabet, shared between\r\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n     * @type {string}\r\n     */\r\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\r\n    /**\r\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n     * @type {string}\r\n     */\r\n    get ENCODED_VALS() {\r\n        return this.ENCODED_VALS_BASE + '+/=';\r\n    },\r\n    /**\r\n     * Our websafe alphabet.\r\n     * @type {string}\r\n     */\r\n    get ENCODED_VALS_WEBSAFE() {\r\n        return this.ENCODED_VALS_BASE + '-_.';\r\n    },\r\n    /**\r\n     * Whether this browser supports the atob and btoa functions. This extension\r\n     * started at Mozilla but is now implemented by many browsers. We use the\r\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n     * but still allowing the standard per-browser compilations.\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    HAS_NATIVE_SUPPORT: typeof atob === 'function',\r\n    /**\r\n     * Base64-encode an array of bytes.\r\n     *\r\n     * @param {Array<number>|Uint8Array} input An array of bytes (numbers with\r\n     *     value in [0, 255]) to encode.\r\n     * @param {boolean=} opt_webSafe Boolean indicating we should use the\r\n     *     alternative alphabet.\r\n     * @return {string} The base64 encoded string.\r\n     */\r\n    encodeByteArray: function (input, opt_webSafe) {\r\n        if (!Array.isArray(input)) {\r\n            throw Error('encodeByteArray takes an array as a parameter');\r\n        }\r\n        this.init_();\r\n        var byteToCharMap = opt_webSafe\r\n            ? this.byteToCharMapWebSafe_\r\n            : this.byteToCharMap_;\r\n        var output = [];\r\n        for (var i = 0; i < input.length; i += 3) {\r\n            var byte1 = input[i];\r\n            var haveByte2 = i + 1 < input.length;\r\n            var byte2 = haveByte2 ? input[i + 1] : 0;\r\n            var haveByte3 = i + 2 < input.length;\r\n            var byte3 = haveByte3 ? input[i + 2] : 0;\r\n            var outByte1 = byte1 >> 2;\r\n            var outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\r\n            var outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\r\n            var outByte4 = byte3 & 0x3f;\r\n            if (!haveByte3) {\r\n                outByte4 = 64;\r\n                if (!haveByte2) {\r\n                    outByte3 = 64;\r\n                }\r\n            }\r\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\r\n        }\r\n        return output.join('');\r\n    },\r\n    /**\r\n     * Base64-encode a string.\r\n     *\r\n     * @param {string} input A string to encode.\r\n     * @param {boolean=} opt_webSafe If true, we should use the\r\n     *     alternative alphabet.\r\n     * @return {string} The base64 encoded string.\r\n     */\r\n    encodeString: function (input, opt_webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {\r\n            return btoa(input);\r\n        }\r\n        return this.encodeByteArray(stringToByteArray(input), opt_webSafe);\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * @param {string} input to decode.\r\n     * @param {boolean=} opt_webSafe True if we should use the\r\n     *     alternative alphabet.\r\n     * @return {string} string representing the decoded value.\r\n     */\r\n    decodeString: function (input, opt_webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {\r\n            return atob(input);\r\n        }\r\n        return byteArrayToString(this.decodeStringToByteArray(input, opt_webSafe));\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * In base-64 decoding, groups of four characters are converted into three\r\n     * bytes.  If the encoder did not apply padding, the input length may not\r\n     * be a multiple of 4.\r\n     *\r\n     * In this case, the last group will have fewer than 4 characters, and\r\n     * padding will be inferred.  If the group has one or two characters, it decodes\r\n     * to one byte.  If the group has three characters, it decodes to two bytes.\r\n     *\r\n     * @param {string} input Input to decode.\r\n     * @param {boolean=} opt_webSafe True if we should use the web-safe alphabet.\r\n     * @return {!Array<number>} bytes representing the decoded value.\r\n     */\r\n    decodeStringToByteArray: function (input, opt_webSafe) {\r\n        this.init_();\r\n        var charToByteMap = opt_webSafe\r\n            ? this.charToByteMapWebSafe_\r\n            : this.charToByteMap_;\r\n        var output = [];\r\n        for (var i = 0; i < input.length;) {\r\n            var byte1 = charToByteMap[input.charAt(i++)];\r\n            var haveByte2 = i < input.length;\r\n            var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\r\n            ++i;\r\n            var haveByte3 = i < input.length;\r\n            var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            var haveByte4 = i < input.length;\r\n            var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\r\n                throw Error();\r\n            }\r\n            var outByte1 = (byte1 << 2) | (byte2 >> 4);\r\n            output.push(outByte1);\r\n            if (byte3 != 64) {\r\n                var outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\r\n                output.push(outByte2);\r\n                if (byte4 != 64) {\r\n                    var outByte3 = ((byte3 << 6) & 0xc0) | byte4;\r\n                    output.push(outByte3);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    },\r\n    /**\r\n     * Lazy static initialization function. Called before\r\n     * accessing any of the static map variables.\r\n     * @private\r\n     */\r\n    init_: function () {\r\n        if (!this.byteToCharMap_) {\r\n            this.byteToCharMap_ = {};\r\n            this.charToByteMap_ = {};\r\n            this.byteToCharMapWebSafe_ = {};\r\n            this.charToByteMapWebSafe_ = {};\r\n            // We want quick mappings back and forth, so we precompute two maps.\r\n            for (var i = 0; i < this.ENCODED_VALS.length; i++) {\r\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\r\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\r\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\r\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\r\n                // Be forgiving when decoding and correctly decode both encodings.\r\n                if (i >= this.ENCODED_VALS_BASE.length) {\r\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\r\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * URL-safe base64 encoding\r\n * @param {!string} str\r\n * @return {!string}\r\n */\r\nvar base64Encode = function (str) {\r\n    var utf8Bytes = stringToByteArray(str);\r\n    return base64.encodeByteArray(utf8Bytes, true);\r\n};\r\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param {string} str To be decoded\r\n * @return {?string} Decoded result, if possible\r\n */\r\nvar base64Decode = function (str) {\r\n    try {\r\n        return base64.decodeString(str, true);\r\n    }\r\n    catch (e) {\r\n        console.error('base64Decode failed: ', e);\r\n    }\r\n    return null;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n */\r\nfunction deepCopy(value) {\r\n    return deepExtend(undefined, value);\r\n}\r\n/**\r\n * Copy properties from source to target (recursively allows extension\r\n * of Objects and Arrays).  Scalar values in the target are over-written.\r\n * If target is undefined, an object of the appropriate type will be created\r\n * (and returned).\r\n *\r\n * We recursively copy all child properties of plain Objects in the source- so\r\n * that namespace- like dictionaries are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in\r\n * the source Object are copied onto it as static properties of the Function.\r\n */\r\nfunction deepExtend(target, source) {\r\n    if (!(source instanceof Object)) {\r\n        return source;\r\n    }\r\n    switch (source.constructor) {\r\n        case Date:\r\n            // Treat Dates like scalars; if the target date object had any child\r\n            // properties - they will be lost!\r\n            var dateValue = source;\r\n            return new Date(dateValue.getTime());\r\n        case Object:\r\n            if (target === undefined) {\r\n                target = {};\r\n            }\r\n            break;\r\n        case Array:\r\n            // Always copy the array source and overwrite the target.\r\n            target = [];\r\n            break;\r\n        default:\r\n            // Not a plain Object - treat it as a scalar.\r\n            return source;\r\n    }\r\n    for (var prop in source) {\r\n        if (!source.hasOwnProperty(prop)) {\r\n            continue;\r\n        }\r\n        target[prop] = deepExtend(target[prop], source[prop]);\r\n    }\r\n    return target;\r\n}\r\n// TODO: Really needed (for JSCompiler type checking)?\r\nfunction patchProperty(obj, prop, value) {\r\n    obj[prop] = value;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Deferred = /** @class */ (function () {\r\n    function Deferred() {\r\n        var _this = this;\r\n        this.promise = new Promise(function (resolve, reject) {\r\n            _this.resolve = resolve;\r\n            _this.reject = reject;\r\n        });\r\n    }\r\n    /**\r\n     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n     * @param {((?function(?(Error)): (?|undefined))| (?function(?(Error),?=): (?|undefined)))=} callback\r\n     * @return {!function(?(Error), ?=)}\r\n     */\r\n    Deferred.prototype.wrapCallback = function (callback) {\r\n        var _this = this;\r\n        return function (error, value) {\r\n            if (error) {\r\n                _this.reject(error);\r\n            }\r\n            else {\r\n                _this.resolve(value);\r\n            }\r\n            if (typeof callback === 'function') {\r\n                // Attaching noop handler just in case developer wasn't expecting\r\n                // promises\r\n                _this.promise.catch(function () { });\r\n                // Some of our callbacks don't expect a value and our own tests\r\n                // assert that the parameter length is 1\r\n                if (callback.length === 1) {\r\n                    callback(error);\r\n                }\r\n                else {\r\n                    callback(error, value);\r\n                }\r\n            }\r\n        };\r\n    };\r\n    return Deferred;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return {string} user agent string\r\n */\r\nvar getUA = function () {\r\n    if (typeof navigator !== 'undefined' &&\r\n        typeof navigator['userAgent'] === 'string') {\r\n        return navigator['userAgent'];\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n};\r\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap in the Ripple emulator) nor\r\n * Cordova `onDeviceReady`, which would normally wait for a callback.\r\n *\r\n * @return {boolean} isMobileCordova\r\n */\r\nvar isMobileCordova = function () {\r\n    return (typeof window !== 'undefined' &&\r\n        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\r\n        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));\r\n};\r\n/**\r\n * Detect React Native.\r\n *\r\n * @return {boolean} True if ReactNative environment is detected.\r\n */\r\nvar isReactNative = function () {\r\n    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');\r\n};\r\n/**\r\n * Detect Node.js.\r\n *\r\n * @return {boolean} True if Node.js environment is detected.\r\n */\r\nvar isNodeSdk = function () {\r\n    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\r\n};\n\nvar ERROR_NAME = 'FirebaseError';\r\nvar captureStackTrace = Error\r\n    .captureStackTrace;\r\n// Export for faking in tests\r\nfunction patchCapture(captureFake) {\r\n    var result = captureStackTrace;\r\n    captureStackTrace = captureFake;\r\n    return result;\r\n}\r\nvar FirebaseError = /** @class */ (function () {\r\n    function FirebaseError(code, message) {\r\n        this.code = code;\r\n        this.message = message;\r\n        // We want the stack value, if implemented by Error\r\n        if (captureStackTrace) {\r\n            // Patches this.stack, omitted calls above ErrorFactory#create\r\n            captureStackTrace(this, ErrorFactory.prototype.create);\r\n        }\r\n        else {\r\n            try {\r\n                // In case of IE11, stack will be set only after error is raised.\r\n                // https://docs.microsoft.com/en-us/scripting/javascript/reference/stack-property-error-javascript\r\n                throw Error.apply(this, arguments);\r\n            }\r\n            catch (err) {\r\n                this.name = ERROR_NAME;\r\n                // Make non-enumerable getter for the property.\r\n                Object.defineProperty(this, 'stack', {\r\n                    get: function () {\r\n                        return err.stack;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    return FirebaseError;\r\n}());\r\n// Back-door inheritance\r\nFirebaseError.prototype = Object.create(Error.prototype);\r\nFirebaseError.prototype.constructor = FirebaseError;\r\nFirebaseError.prototype.name = ERROR_NAME;\r\nvar ErrorFactory = /** @class */ (function () {\r\n    function ErrorFactory(service, serviceName, errors) {\r\n        this.service = service;\r\n        this.serviceName = serviceName;\r\n        this.errors = errors;\r\n        // Matches {$name}, by default.\r\n        this.pattern = /\\{\\$([^}]+)}/g;\r\n        // empty\r\n    }\r\n    ErrorFactory.prototype.create = function (code, data) {\r\n        if (data === undefined) {\r\n            data = {};\r\n        }\r\n        var template = this.errors[code];\r\n        var fullCode = this.service + '/' + code;\r\n        var message;\r\n        if (template === undefined) {\r\n            message = 'Error';\r\n        }\r\n        else {\r\n            message = template.replace(this.pattern, function (match, key) {\r\n                var value = data[key];\r\n                return value !== undefined ? value.toString() : '<' + key + '?>';\r\n            });\r\n        }\r\n        // Service: Error message (service/code).\r\n        message = this.serviceName + ': ' + message + ' (' + fullCode + ').';\r\n        var err = new FirebaseError(fullCode, message);\r\n        // Populate the Error object with message parts for programmatic\r\n        // accesses (e.g., e.file).\r\n        for (var prop in data) {\r\n            if (!data.hasOwnProperty(prop) || prop.slice(-1) === '_') {\r\n                continue;\r\n            }\r\n            err[prop] = data[prop];\r\n        }\r\n        return err;\r\n    };\r\n    return ErrorFactory;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */\r\nfunction jsonEval(str) {\r\n    return JSON.parse(str);\r\n}\r\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data Javascript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */\r\nfunction stringify(data) {\r\n    return JSON.stringify(data);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {{header: *, claims: *, data: *, signature: string}}\r\n */\r\nvar decode = function (token) {\r\n    var header = {}, claims = {}, data = {}, signature = '';\r\n    try {\r\n        var parts = token.split('.');\r\n        header = jsonEval(base64Decode(parts[0]) || '');\r\n        claims = jsonEval(base64Decode(parts[1]) || '');\r\n        signature = parts[2];\r\n        data = claims['d'] || {};\r\n        delete claims['d'];\r\n    }\r\n    catch (e) { }\r\n    return {\r\n        header: header,\r\n        claims: claims,\r\n        data: data,\r\n        signature: signature\r\n    };\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {boolean}\r\n */\r\nvar isValidTimestamp = function (token) {\r\n    var claims = decode(token).claims, now = Math.floor(new Date().getTime() / 1000), validSince, validUntil;\r\n    if (typeof claims === 'object') {\r\n        if (claims.hasOwnProperty('nbf')) {\r\n            validSince = claims['nbf'];\r\n        }\r\n        else if (claims.hasOwnProperty('iat')) {\r\n            validSince = claims['iat'];\r\n        }\r\n        if (claims.hasOwnProperty('exp')) {\r\n            validUntil = claims['exp'];\r\n        }\r\n        else {\r\n            // token will expire after 24h by default\r\n            validUntil = validSince + 86400;\r\n        }\r\n    }\r\n    return (now && validSince && validUntil && now >= validSince && now <= validUntil);\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {?number}\r\n */\r\nvar issuedAtTime = function (token) {\r\n    var claims = decode(token).claims;\r\n    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\r\n        return claims['iat'];\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {boolean}\r\n */\r\nvar isValidFormat = function (token) {\r\n    var decoded = decode(token), claims = decoded.claims;\r\n    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\r\n};\r\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {boolean}\r\n */\r\nvar isAdmin = function (token) {\r\n    var claims = decode(token).claims;\r\n    return typeof claims === 'object' && claims['admin'] === true;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// See http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/\r\nvar contains = function (obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n};\r\nvar safeGet = function (obj, key) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key))\r\n        return obj[key];\r\n    // else return undefined.\r\n};\r\n/**\r\n * Enumerates the keys/values in an object, excluding keys defined on the prototype.\r\n *\r\n * @param {?Object.<K,V>} obj Object to enumerate.\r\n * @param {!function(K, V)} fn Function to call for each key and value.\r\n * @template K,V\r\n */\r\nvar forEach = function (obj, fn) {\r\n    for (var key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n};\r\n/**\r\n * Copies all the (own) properties from one object to another.\r\n * @param {!Object} objTo\r\n * @param {!Object} objFrom\r\n * @return {!Object} objTo\r\n */\r\nvar extend = function (objTo, objFrom) {\r\n    forEach(objFrom, function (key, value) {\r\n        objTo[key] = value;\r\n    });\r\n    return objTo;\r\n};\r\n/**\r\n * Returns a clone of the specified object.\r\n * @param {!Object} obj\r\n * @return {!Object} cloned obj.\r\n */\r\nvar clone = function (obj) {\r\n    return extend({}, obj);\r\n};\r\n/**\r\n * Returns true if obj has typeof \"object\" and is not null.  Unlike goog.isObject(), does not return true\r\n * for functions.\r\n *\r\n * @param obj {*} A potential object.\r\n * @returns {boolean} True if it's an object.\r\n */\r\nvar isNonNullObject = function (obj) {\r\n    return typeof obj === 'object' && obj !== null;\r\n};\r\nvar isEmpty = function (obj) {\r\n    for (var key in obj) {\r\n        return false;\r\n    }\r\n    return true;\r\n};\r\nvar getCount = function (obj) {\r\n    var rv = 0;\r\n    for (var key in obj) {\r\n        rv++;\r\n    }\r\n    return rv;\r\n};\r\nvar map = function (obj, f, opt_obj) {\r\n    var res = {};\r\n    for (var key in obj) {\r\n        res[key] = f.call(opt_obj, obj[key], key, obj);\r\n    }\r\n    return res;\r\n};\r\nvar findKey = function (obj, fn, opt_this) {\r\n    for (var key in obj) {\r\n        if (fn.call(opt_this, obj[key], key, obj)) {\r\n            return key;\r\n        }\r\n    }\r\n    return undefined;\r\n};\r\nvar findValue = function (obj, fn, opt_this) {\r\n    var key = findKey(obj, fn, opt_this);\r\n    return key && obj[key];\r\n};\r\nvar getAnyKey = function (obj) {\r\n    for (var key in obj) {\r\n        return key;\r\n    }\r\n};\r\nvar getValues = function (obj) {\r\n    var res = [];\r\n    var i = 0;\r\n    for (var key in obj) {\r\n        res[i++] = obj[key];\r\n    }\r\n    return res;\r\n};\r\n/**\r\n * Tests whether every key/value pair in an object pass the test implemented\r\n * by the provided function\r\n *\r\n * @param {?Object.<K,V>} obj Object to test.\r\n * @param {!function(K, V)} fn Function to call for each key and value.\r\n * @template K,V\r\n */\r\nvar every = function (obj, fn) {\r\n    for (var key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            if (!fn(key, obj[key])) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a params\r\n * object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n *\r\n * @param {!Object} querystringParams\r\n * @return {string}\r\n */\r\nvar querystring = function (querystringParams) {\r\n    var params = [];\r\n    forEach(querystringParams, function (key, value) {\r\n        if (Array.isArray(value)) {\r\n            value.forEach(function (arrayVal) {\r\n                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\r\n            });\r\n        }\r\n        else {\r\n            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n        }\r\n    });\r\n    return params.length ? '&' + params.join('&') : '';\r\n};\r\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object (e.g. {arg: 'val', arg2: 'val2'})\r\n *\r\n * @param {string} querystring\r\n * @return {!Object}\r\n */\r\nvar querystringDecode = function (querystring) {\r\n    var obj = {};\r\n    var tokens = querystring.replace(/^\\?/, '').split('&');\r\n    tokens.forEach(function (token) {\r\n        if (token) {\r\n            var key = token.split('=');\r\n            obj[key[0]] = key[1];\r\n        }\r\n    });\r\n    return obj;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */\r\n/**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @final\r\n * @struct\r\n */\r\nvar Sha1 = /** @class */ (function () {\r\n    function Sha1() {\r\n        /**\r\n         * Holds the previous values of accumulated variables a-e in the compress_\r\n         * function.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\r\n        this.chain_ = [];\r\n        /**\r\n         * A buffer holding the partially computed hash result.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\r\n        this.buf_ = [];\r\n        /**\r\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n         * as the message schedule in the docs.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\r\n        this.W_ = [];\r\n        /**\r\n         * Contains data needed to pad messages less than 64 bytes.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\r\n        this.pad_ = [];\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.inbuf_ = 0;\r\n        /**\r\n         * @private {number}\r\n         */\r\n        this.total_ = 0;\r\n        this.blockSize = 512 / 8;\r\n        this.pad_[0] = 128;\r\n        for (var i = 1; i < this.blockSize; ++i) {\r\n            this.pad_[i] = 0;\r\n        }\r\n        this.reset();\r\n    }\r\n    Sha1.prototype.reset = function () {\r\n        this.chain_[0] = 0x67452301;\r\n        this.chain_[1] = 0xefcdab89;\r\n        this.chain_[2] = 0x98badcfe;\r\n        this.chain_[3] = 0x10325476;\r\n        this.chain_[4] = 0xc3d2e1f0;\r\n        this.inbuf_ = 0;\r\n        this.total_ = 0;\r\n    };\r\n    /**\r\n     * Internal compress helper function.\r\n     * @param {!Array<number>|!Uint8Array|string} buf Block to compress.\r\n     * @param {number=} opt_offset Offset of the block in the buffer.\r\n     * @private\r\n     */\r\n    Sha1.prototype.compress_ = function (buf, opt_offset) {\r\n        if (!opt_offset) {\r\n            opt_offset = 0;\r\n        }\r\n        var W = this.W_;\r\n        // get 16 big endian words\r\n        if (typeof buf === 'string') {\r\n            for (var i = 0; i < 16; i++) {\r\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\r\n                // have a bug that turns the post-increment ++ operator into pre-increment\r\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\r\n                // correctness and which is affected by this bug, so I've removed all uses\r\n                // of post-increment ++ in which the result value is used.  We can revert\r\n                // this change once the Safari bug\r\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\r\n                // most clients have been updated.\r\n                W[i] =\r\n                    (buf.charCodeAt(opt_offset) << 24) |\r\n                        (buf.charCodeAt(opt_offset + 1) << 16) |\r\n                        (buf.charCodeAt(opt_offset + 2) << 8) |\r\n                        buf.charCodeAt(opt_offset + 3);\r\n                opt_offset += 4;\r\n            }\r\n        }\r\n        else {\r\n            for (var i = 0; i < 16; i++) {\r\n                W[i] =\r\n                    (buf[opt_offset] << 24) |\r\n                        (buf[opt_offset + 1] << 16) |\r\n                        (buf[opt_offset + 2] << 8) |\r\n                        buf[opt_offset + 3];\r\n                opt_offset += 4;\r\n            }\r\n        }\r\n        // expand to 80 words\r\n        for (var i = 16; i < 80; i++) {\r\n            var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\r\n            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\r\n        }\r\n        var a = this.chain_[0];\r\n        var b = this.chain_[1];\r\n        var c = this.chain_[2];\r\n        var d = this.chain_[3];\r\n        var e = this.chain_[4];\r\n        var f, k;\r\n        // TODO(user): Try to unroll this loop to speed up the computation.\r\n        for (var i = 0; i < 80; i++) {\r\n            if (i < 40) {\r\n                if (i < 20) {\r\n                    f = d ^ (b & (c ^ d));\r\n                    k = 0x5a827999;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0x6ed9eba1;\r\n                }\r\n            }\r\n            else {\r\n                if (i < 60) {\r\n                    f = (b & c) | (d & (b | c));\r\n                    k = 0x8f1bbcdc;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0xca62c1d6;\r\n                }\r\n            }\r\n            var t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\r\n            e = d;\r\n            d = c;\r\n            c = ((b << 30) | (b >>> 2)) & 0xffffffff;\r\n            b = a;\r\n            a = t;\r\n        }\r\n        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\r\n        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\r\n        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\r\n        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\r\n        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\r\n    };\r\n    Sha1.prototype.update = function (bytes, opt_length) {\r\n        // TODO(johnlenz): tighten the function signature and remove this check\r\n        if (bytes == null) {\r\n            return;\r\n        }\r\n        if (opt_length === undefined) {\r\n            opt_length = bytes.length;\r\n        }\r\n        var lengthMinusBlock = opt_length - this.blockSize;\r\n        var n = 0;\r\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\r\n        var buf = this.buf_;\r\n        var inbuf = this.inbuf_;\r\n        // The outer while loop should execute at most twice.\r\n        while (n < opt_length) {\r\n            // When we have no data in the block to top up, we can directly process the\r\n            // input buffer (assuming it contains sufficient data). This gives ~25%\r\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\r\n            // the data is provided in large chunks (or in multiples of 64 bytes).\r\n            if (inbuf == 0) {\r\n                while (n <= lengthMinusBlock) {\r\n                    this.compress_(bytes, n);\r\n                    n += this.blockSize;\r\n                }\r\n            }\r\n            if (typeof bytes === 'string') {\r\n                while (n < opt_length) {\r\n                    buf[inbuf] = bytes.charCodeAt(n);\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf == this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                while (n < opt_length) {\r\n                    buf[inbuf] = bytes[n];\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf == this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.inbuf_ = inbuf;\r\n        this.total_ += opt_length;\r\n    };\r\n    /** @override */\r\n    Sha1.prototype.digest = function () {\r\n        var digest = [];\r\n        var totalBits = this.total_ * 8;\r\n        // Add pad 0x80 0x00*.\r\n        if (this.inbuf_ < 56) {\r\n            this.update(this.pad_, 56 - this.inbuf_);\r\n        }\r\n        else {\r\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\r\n        }\r\n        // Add # bits.\r\n        for (var i = this.blockSize - 1; i >= 56; i--) {\r\n            this.buf_[i] = totalBits & 255;\r\n            totalBits /= 256; // Don't use bit-shifting here!\r\n        }\r\n        this.compress_(this.buf_);\r\n        var n = 0;\r\n        for (var i = 0; i < 5; i++) {\r\n            for (var j = 24; j >= 0; j -= 8) {\r\n                digest[n] = (this.chain_[i] >> j) & 255;\r\n                ++n;\r\n            }\r\n        }\r\n        return digest;\r\n    };\r\n    return Sha1;\r\n}());\n\n/**\r\n * Helper to make a Subscribe function (just like Promise helps make a\r\n * Thenable).\r\n *\r\n * @param executor Function which can make calls to a single Observer\r\n *     as a proxy.\r\n * @param onNoObservers Callback when count of Observers goes to zero.\r\n */\r\nfunction createSubscribe(executor, onNoObservers) {\r\n    var proxy = new ObserverProxy(executor, onNoObservers);\r\n    return proxy.subscribe.bind(proxy);\r\n}\r\n/**\r\n * Implement fan-out for any number of Observers attached via a subscribe\r\n * function.\r\n */\r\nvar ObserverProxy = /** @class */ (function () {\r\n    /**\r\n     * @param executor Function which can make calls to a single Observer\r\n     *     as a proxy.\r\n     * @param onNoObservers Callback when count of Observers goes to zero.\r\n     */\r\n    function ObserverProxy(executor, onNoObservers) {\r\n        var _this = this;\r\n        this.observers = [];\r\n        this.unsubscribes = [];\r\n        this.observerCount = 0;\r\n        // Micro-task scheduling by calling task.then().\r\n        this.task = Promise.resolve();\r\n        this.finalized = false;\r\n        this.onNoObservers = onNoObservers;\r\n        // Call the executor asynchronously so subscribers that are called\r\n        // synchronously after the creation of the subscribe function\r\n        // can still receive the very first value generated in the executor.\r\n        this.task\r\n            .then(function () {\r\n            executor(_this);\r\n        })\r\n            .catch(function (e) {\r\n            _this.error(e);\r\n        });\r\n    }\r\n    ObserverProxy.prototype.next = function (value) {\r\n        this.forEachObserver(function (observer) {\r\n            observer.next(value);\r\n        });\r\n    };\r\n    ObserverProxy.prototype.error = function (error) {\r\n        this.forEachObserver(function (observer) {\r\n            observer.error(error);\r\n        });\r\n        this.close(error);\r\n    };\r\n    ObserverProxy.prototype.complete = function () {\r\n        this.forEachObserver(function (observer) {\r\n            observer.complete();\r\n        });\r\n        this.close();\r\n    };\r\n    /**\r\n     * Subscribe function that can be used to add an Observer to the fan-out list.\r\n     *\r\n     * - We require that no event is sent to a subscriber sychronously to their\r\n     *   call to subscribe().\r\n     */\r\n    ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {\r\n        var _this = this;\r\n        var observer;\r\n        if (nextOrObserver === undefined &&\r\n            error === undefined &&\r\n            complete === undefined) {\r\n            throw new Error('Missing Observer.');\r\n        }\r\n        // Assemble an Observer object when passed as callback functions.\r\n        if (implementsAnyMethods(nextOrObserver, ['next', 'error', 'complete'])) {\r\n            observer = nextOrObserver;\r\n        }\r\n        else {\r\n            observer = {\r\n                next: nextOrObserver,\r\n                error: error,\r\n                complete: complete\r\n            };\r\n        }\r\n        if (observer.next === undefined) {\r\n            observer.next = noop;\r\n        }\r\n        if (observer.error === undefined) {\r\n            observer.error = noop;\r\n        }\r\n        if (observer.complete === undefined) {\r\n            observer.complete = noop;\r\n        }\r\n        var unsub = this.unsubscribeOne.bind(this, this.observers.length);\r\n        // Attempt to subscribe to a terminated Observable - we\r\n        // just respond to the Observer with the final error or complete\r\n        // event.\r\n        if (this.finalized) {\r\n            this.task.then(function () {\r\n                try {\r\n                    if (_this.finalError) {\r\n                        observer.error(_this.finalError);\r\n                    }\r\n                    else {\r\n                        observer.complete();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // nothing\r\n                }\r\n                return;\r\n            });\r\n        }\r\n        this.observers.push(observer);\r\n        return unsub;\r\n    };\r\n    // Unsubscribe is synchronous - we guarantee that no events are sent to\r\n    // any unsubscribed Observer.\r\n    ObserverProxy.prototype.unsubscribeOne = function (i) {\r\n        if (this.observers === undefined || this.observers[i] === undefined) {\r\n            return;\r\n        }\r\n        delete this.observers[i];\r\n        this.observerCount -= 1;\r\n        if (this.observerCount === 0 && this.onNoObservers !== undefined) {\r\n            this.onNoObservers(this);\r\n        }\r\n    };\r\n    ObserverProxy.prototype.forEachObserver = function (fn) {\r\n        if (this.finalized) {\r\n            // Already closed by previous event....just eat the additional values.\r\n            return;\r\n        }\r\n        // Since sendOne calls asynchronously - there is no chance that\r\n        // this.observers will become undefined.\r\n        for (var i = 0; i < this.observers.length; i++) {\r\n            this.sendOne(i, fn);\r\n        }\r\n    };\r\n    // Call the Observer via one of it's callback function. We are careful to\r\n    // confirm that the observe has not been unsubscribed since this asynchronous\r\n    // function had been queued.\r\n    ObserverProxy.prototype.sendOne = function (i, fn) {\r\n        var _this = this;\r\n        // Execute the callback asynchronously\r\n        this.task.then(function () {\r\n            if (_this.observers !== undefined && _this.observers[i] !== undefined) {\r\n                try {\r\n                    fn(_this.observers[i]);\r\n                }\r\n                catch (e) {\r\n                    // Ignore exceptions raised in Observers or missing methods of an\r\n                    // Observer.\r\n                    // Log error to console. b/31404806\r\n                    if (typeof console !== 'undefined' && console.error) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n    ObserverProxy.prototype.close = function (err) {\r\n        var _this = this;\r\n        if (this.finalized) {\r\n            return;\r\n        }\r\n        this.finalized = true;\r\n        if (err !== undefined) {\r\n            this.finalError = err;\r\n        }\r\n        // Proxy is no longer needed - garbage collect references\r\n        this.task.then(function () {\r\n            _this.observers = undefined;\r\n            _this.onNoObservers = undefined;\r\n        });\r\n    };\r\n    return ObserverProxy;\r\n}());\r\n/** Turn synchronous function into one called asynchronously. */\r\nfunction async(fn, onError) {\r\n    return function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        Promise.resolve(true)\r\n            .then(function () {\r\n            fn.apply(void 0, args);\r\n        })\r\n            .catch(function (error) {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n        });\r\n    };\r\n}\r\n/**\r\n * Return true if the object passed in implements any of the named methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {\r\n        var method = methods_1[_i];\r\n        if (method in obj && typeof obj[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction noop() {\r\n    // do nothing\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param {!string} fnName The function name\r\n * @param {!number} minCount The minimum number of arguments to allow for the function call\r\n * @param {!number} maxCount The maximum number of argument to allow for the function call\r\n * @param {!number} argCount The actual number of arguments provided.\r\n */\r\nvar validateArgCount = function (fnName, minCount, maxCount, argCount) {\r\n    var argError;\r\n    if (argCount < minCount) {\r\n        argError = 'at least ' + minCount;\r\n    }\r\n    else if (argCount > maxCount) {\r\n        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\r\n    }\r\n    if (argError) {\r\n        var error = fnName +\r\n            ' failed: Was called with ' +\r\n            argCount +\r\n            (argCount === 1 ? ' argument.' : ' arguments.') +\r\n            ' Expects ' +\r\n            argError +\r\n            '.';\r\n        throw new Error(error);\r\n    }\r\n};\r\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param {!string} fnName The function name\r\n * @param {!number} argumentNumber The index of the argument\r\n * @param {boolean} optional Whether or not the argument is optional\r\n * @return {!string} The prefix to add to the error thrown for validation.\r\n */\r\nfunction errorPrefix(fnName, argumentNumber, optional) {\r\n    var argName = '';\r\n    switch (argumentNumber) {\r\n        case 1:\r\n            argName = optional ? 'first' : 'First';\r\n            break;\r\n        case 2:\r\n            argName = optional ? 'second' : 'Second';\r\n            break;\r\n        case 3:\r\n            argName = optional ? 'third' : 'Third';\r\n            break;\r\n        case 4:\r\n            argName = optional ? 'fourth' : 'Fourth';\r\n            break;\r\n        default:\r\n            throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');\r\n    }\r\n    var error = fnName + ' failed: ';\r\n    error += argName + ' argument ';\r\n    return error;\r\n}\r\n/**\r\n * @param {!string} fnName\r\n * @param {!number} argumentNumber\r\n * @param {!string} namespace\r\n * @param {boolean} optional\r\n */\r\nfunction validateNamespace(fnName, argumentNumber, namespace, optional) {\r\n    if (optional && !namespace)\r\n        return;\r\n    if (typeof namespace !== 'string') {\r\n        //TODO: I should do more validation here. We only allow certain chars in namespaces.\r\n        throw new Error(errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid firebase namespace.');\r\n    }\r\n}\r\nfunction validateCallback(fnName, argumentNumber, callback, optional) {\r\n    if (optional && !callback)\r\n        return;\r\n    if (typeof callback !== 'function')\r\n        throw new Error(errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid function.');\r\n}\r\nfunction validateContextObject(fnName, argumentNumber, context, optional) {\r\n    if (optional && !context)\r\n        return;\r\n    if (typeof context !== 'object' || context === null)\r\n        throw new Error(errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid context object.');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\r\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\r\n// so it's been modified.\r\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\r\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\r\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\r\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\r\n// pair).\r\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\r\n/**\r\n * @param {string} str\r\n * @return {Array}\r\n */\r\nvar stringToByteArray$1 = function (str) {\r\n    var out = [], p = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n        var c = str.charCodeAt(i);\r\n        // Is this the lead surrogate in a surrogate pair?\r\n        if (c >= 0xd800 && c <= 0xdbff) {\r\n            var high = c - 0xd800; // the high 10 bits.\r\n            i++;\r\n            assert(i < str.length, 'Surrogate pair missing trail surrogate.');\r\n            var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\r\n            c = 0x10000 + (high << 10) + low;\r\n        }\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if (c < 65536) {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */\r\nvar stringLength = function (str) {\r\n    var p = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n        var c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            p++;\r\n        }\r\n        else if (c < 2048) {\r\n            p += 2;\r\n        }\r\n        else if (c >= 0xd800 && c <= 0xdbff) {\r\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\r\n            p += 4;\r\n            i++; // skip trail surrogate.\r\n        }\r\n        else {\r\n            p += 3;\r\n        }\r\n    }\r\n    return p;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nexports.CONSTANTS = CONSTANTS;\nexports.Deferred = Deferred;\nexports.ErrorFactory = ErrorFactory;\nexports.FirebaseError = FirebaseError;\nexports.Sha1 = Sha1;\nexports.assert = assert;\nexports.assertionError = assertionError;\nexports.async = async;\nexports.base64 = base64;\nexports.base64Decode = base64Decode;\nexports.base64Encode = base64Encode;\nexports.clone = clone;\nexports.contains = contains;\nexports.createSubscribe = createSubscribe;\nexports.decode = decode;\nexports.deepCopy = deepCopy;\nexports.deepExtend = deepExtend;\nexports.errorPrefix = errorPrefix;\nexports.every = every;\nexports.extend = extend;\nexports.findKey = findKey;\nexports.findValue = findValue;\nexports.forEach = forEach;\nexports.getAnyKey = getAnyKey;\nexports.getCount = getCount;\nexports.getUA = getUA;\nexports.getValues = getValues;\nexports.isAdmin = isAdmin;\nexports.isEmpty = isEmpty;\nexports.isMobileCordova = isMobileCordova;\nexports.isNodeSdk = isNodeSdk;\nexports.isNonNullObject = isNonNullObject;\nexports.isReactNative = isReactNative;\nexports.isValidFormat = isValidFormat;\nexports.isValidTimestamp = isValidTimestamp;\nexports.issuedAtTime = issuedAtTime;\nexports.jsonEval = jsonEval;\nexports.map = map;\nexports.patchCapture = patchCapture;\nexports.patchProperty = patchProperty;\nexports.querystring = querystring;\nexports.querystringDecode = querystringDecode;\nexports.safeGet = safeGet;\nexports.stringLength = stringLength;\nexports.stringToByteArray = stringToByteArray$1;\nexports.stringify = stringify;\nexports.validateArgCount = validateArgCount;\nexports.validateCallback = validateCallback;\nexports.validateContextObject = validateContextObject;\nexports.validateNamespace = validateNamespace;\n//# sourceMappingURL=index.cjs.js.map\n","import 'whatwg-fetch';\nimport 'promise-polyfill/lib/polyfill';\nimport 'core-js/features/array/find';\nimport 'core-js/features/array/find-index';\nimport 'core-js/features/object/assign';\nimport 'core-js/features/string/starts-with';\nimport 'core-js/features/string/repeat';\nimport 'core-js/features/symbol';\nimport 'core-js/features/symbol/iterator';\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n//# sourceMappingURL=index.esm.js.map\n","(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = options.status === undefined ? 200 : options.status\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n","'use strict';\n\n/**\n * @this {Promise}\n */\nfunction finallyConstructor(callback) {\n  var constructor = this.constructor;\n  return this.then(\n    function(value) {\n      return constructor.resolve(callback()).then(function() {\n        return value;\n      });\n    },\n    function(reason) {\n      return constructor.resolve(callback()).then(function() {\n        return constructor.reject(reason);\n      });\n    }\n  );\n}\n\n// Store setTimeout reference so promise-polyfill will be unaffected by\n// other code modifying setTimeout (like sinon.useFakeTimers())\nvar setTimeoutFunc = setTimeout;\n\nfunction noop() {}\n\n// Polyfill for Function.prototype.bind\nfunction bind(fn, thisArg) {\n  return function() {\n    fn.apply(thisArg, arguments);\n  };\n}\n\n/**\n * @constructor\n * @param {Function} fn\n */\nfunction Promise(fn) {\n  if (!(this instanceof Promise))\n    throw new TypeError('Promises must be constructed via new');\n  if (typeof fn !== 'function') throw new TypeError('not a function');\n  /** @type {!number} */\n  this._state = 0;\n  /** @type {!boolean} */\n  this._handled = false;\n  /** @type {Promise|undefined} */\n  this._value = undefined;\n  /** @type {!Array<!Function>} */\n  this._deferreds = [];\n\n  doResolve(fn, this);\n}\n\nfunction handle(self, deferred) {\n  while (self._state === 3) {\n    self = self._value;\n  }\n  if (self._state === 0) {\n    self._deferreds.push(deferred);\n    return;\n  }\n  self._handled = true;\n  Promise._immediateFn(function() {\n    var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;\n    if (cb === null) {\n      (self._state === 1 ? resolve : reject)(deferred.promise, self._value);\n      return;\n    }\n    var ret;\n    try {\n      ret = cb(self._value);\n    } catch (e) {\n      reject(deferred.promise, e);\n      return;\n    }\n    resolve(deferred.promise, ret);\n  });\n}\n\nfunction resolve(self, newValue) {\n  try {\n    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n    if (newValue === self)\n      throw new TypeError('A promise cannot be resolved with itself.');\n    if (\n      newValue &&\n      (typeof newValue === 'object' || typeof newValue === 'function')\n    ) {\n      var then = newValue.then;\n      if (newValue instanceof Promise) {\n        self._state = 3;\n        self._value = newValue;\n        finale(self);\n        return;\n      } else if (typeof then === 'function') {\n        doResolve(bind(then, newValue), self);\n        return;\n      }\n    }\n    self._state = 1;\n    self._value = newValue;\n    finale(self);\n  } catch (e) {\n    reject(self, e);\n  }\n}\n\nfunction reject(self, newValue) {\n  self._state = 2;\n  self._value = newValue;\n  finale(self);\n}\n\nfunction finale(self) {\n  if (self._state === 2 && self._deferreds.length === 0) {\n    Promise._immediateFn(function() {\n      if (!self._handled) {\n        Promise._unhandledRejectionFn(self._value);\n      }\n    });\n  }\n\n  for (var i = 0, len = self._deferreds.length; i < len; i++) {\n    handle(self, self._deferreds[i]);\n  }\n  self._deferreds = null;\n}\n\n/**\n * @constructor\n */\nfunction Handler(onFulfilled, onRejected, promise) {\n  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n  this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n  this.promise = promise;\n}\n\n/**\n * Take a potentially misbehaving resolver function and make sure\n * onFulfilled and onRejected are only called once.\n *\n * Makes no guarantees about asynchrony.\n */\nfunction doResolve(fn, self) {\n  var done = false;\n  try {\n    fn(\n      function(value) {\n        if (done) return;\n        done = true;\n        resolve(self, value);\n      },\n      function(reason) {\n        if (done) return;\n        done = true;\n        reject(self, reason);\n      }\n    );\n  } catch (ex) {\n    if (done) return;\n    done = true;\n    reject(self, ex);\n  }\n}\n\nPromise.prototype['catch'] = function(onRejected) {\n  return this.then(null, onRejected);\n};\n\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  // @ts-ignore\n  var prom = new this.constructor(noop);\n\n  handle(this, new Handler(onFulfilled, onRejected, prom));\n  return prom;\n};\n\nPromise.prototype['finally'] = finallyConstructor;\n\nPromise.all = function(arr) {\n  return new Promise(function(resolve, reject) {\n    if (!arr || typeof arr.length === 'undefined')\n      throw new TypeError('Promise.all accepts an array');\n    var args = Array.prototype.slice.call(arr);\n    if (args.length === 0) return resolve([]);\n    var remaining = args.length;\n\n    function res(i, val) {\n      try {\n        if (val && (typeof val === 'object' || typeof val === 'function')) {\n          var then = val.then;\n          if (typeof then === 'function') {\n            then.call(\n              val,\n              function(val) {\n                res(i, val);\n              },\n              reject\n            );\n            return;\n          }\n        }\n        args[i] = val;\n        if (--remaining === 0) {\n          resolve(args);\n        }\n      } catch (ex) {\n        reject(ex);\n      }\n    }\n\n    for (var i = 0; i < args.length; i++) {\n      res(i, args[i]);\n    }\n  });\n};\n\nPromise.resolve = function(value) {\n  if (value && typeof value === 'object' && value.constructor === Promise) {\n    return value;\n  }\n\n  return new Promise(function(resolve) {\n    resolve(value);\n  });\n};\n\nPromise.reject = function(value) {\n  return new Promise(function(resolve, reject) {\n    reject(value);\n  });\n};\n\nPromise.race = function(values) {\n  return new Promise(function(resolve, reject) {\n    for (var i = 0, len = values.length; i < len; i++) {\n      values[i].then(resolve, reject);\n    }\n  });\n};\n\n// Use polyfill for setImmediate for performance gains\nPromise._immediateFn =\n  (typeof setImmediate === 'function' &&\n    function(fn) {\n      setImmediate(fn);\n    }) ||\n  function(fn) {\n    setTimeoutFunc(fn, 0);\n  };\n\nPromise._unhandledRejectionFn = function _unhandledRejectionFn(err) {\n  if (typeof console !== 'undefined' && console) {\n    console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console\n  }\n};\n\n/** @suppress {undefinedVars} */\nvar globalNS = (function() {\n  // the only reliable means to get the global object is\n  // `Function('return this')()`\n  // However, this causes CSP violations in Chrome apps.\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('unable to locate global object');\n})();\n\nif (!('Promise' in globalNS)) {\n  globalNS['Promise'] = Promise;\n} else if (!globalNS.Promise.prototype['finally']) {\n  globalNS.Promise.prototype['finally'] = finallyConstructor;\n}\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","module.exports = require('../../es/array/find');\n","require('../../modules/es.array.find');\n\nmodule.exports = require('../../internals/entry-unbind')('Array', 'find');\n","'use strict';\nvar internalFind = require('../internals/array-methods')(5);\nvar FIND = 'find';\nvar SKIPS_HOLES = true;\n\n// Shouldn't skip holes\nif (FIND in []) Array(1)[FIND](function () { SKIPS_HOLES = false; });\n\n// `Array.prototype.find` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.find\nrequire('../internals/export')({ target: 'Array', proto: true, forced: SKIPS_HOLES }, {\n  find: function find(callbackfn /* , that = undefined */) {\n    return internalFind(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\nrequire('../internals/add-to-unscopables')(FIND);\n","module.exports = function (it) {\n  if (typeof it != 'function') {\n    throw TypeError(String(it) + ' is not a function');\n  } return it;\n};\n","var nativeFunctionToString = require('../internals/function-to-string');\nvar WeakMap = require('../internals/global').WeakMap;\n\nmodule.exports = typeof WeakMap === 'function' && /native code/.test(nativeFunctionToString.call(WeakMap));\n","var getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');\nvar getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');\nvar anObject = require('../internals/an-object');\nvar Reflect = require('../internals/global').Reflect;\n\n// all object keys, includes non-enumerable and symbols\nmodule.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {\n  var keys = getOwnPropertyNamesModule.f(anObject(it));\n  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\n  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;\n};\n","var toIndexedObject = require('../internals/to-indexed-object');\nvar toLength = require('../internals/to-length');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\n\n// `Array.prototype.{ indexOf, includes }` methods implementation\n// false -> Array#indexOf\n// https://tc39.github.io/ecma262/#sec-array.prototype.indexof\n// true  -> Array#includes\n// https://tc39.github.io/ecma262/#sec-array.prototype.includes\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIndexedObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n","var toInteger = require('../internals/to-integer');\nvar max = Math.max;\nvar min = Math.min;\n\n// Helper for a popular repeating case of the spec:\n// Let integer be ? ToInteger(index).\n// If integer < 0, let result be max((length + integer), 0); else let result be min(length, length).\nmodule.exports = function (index, length) {\n  var integer = toInteger(index);\n  return integer < 0 ? max(integer + length, 0) : min(integer, length);\n};\n","var fails = require('../internals/fails');\nvar replacement = /#|\\.prototype\\./;\n\nvar isForced = function (feature, detection) {\n  var value = data[normalize(feature)];\n  return value == POLYFILL ? true\n    : value == NATIVE ? false\n    : typeof detection == 'function' ? fails(detection)\n    : !!detection;\n};\n\nvar normalize = isForced.normalize = function (string) {\n  return String(string).replace(replacement, '.').toLowerCase();\n};\n\nvar data = isForced.data = {};\nvar NATIVE = isForced.NATIVE = 'N';\nvar POLYFILL = isForced.POLYFILL = 'P';\n\nmodule.exports = isForced;\n","var DESCRIPTORS = require('../internals/descriptors');\nvar definePropertyModule = require('../internals/object-define-property');\nvar anObject = require('../internals/an-object');\nvar objectKeys = require('../internals/object-keys');\n\nmodule.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = objectKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var key;\n  while (length > i) definePropertyModule.f(O, key = keys[i++], Properties[key]);\n  return O;\n};\n","var document = require('../internals/global').document;\n\nmodule.exports = document && document.documentElement;\n","module.exports = require('../../es/array/find-index');\n","require('../../modules/es.array.find-index');\n\nmodule.exports = require('../../internals/entry-unbind')('Array', 'findIndex');\n","'use strict';\nvar internalFindIndex = require('../internals/array-methods')(6);\nvar FIND_INDEX = 'findIndex';\nvar SKIPS_HOLES = true;\n\n// Shouldn't skip holes\nif (FIND_INDEX in []) Array(1)[FIND_INDEX](function () { SKIPS_HOLES = false; });\n\n// `Array.prototype.findIndex` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.findindex\nrequire('../internals/export')({ target: 'Array', proto: true, forced: SKIPS_HOLES }, {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return internalFindIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\nrequire('../internals/add-to-unscopables')(FIND_INDEX);\n","module.exports = require('../../es/object/assign');\n","require('../../modules/es.object.assign');\n\nmodule.exports = require('../../internals/path').Object.assign;\n","var assign = require('../internals/object-assign');\n\n// `Object.assign` method\n// https://tc39.github.io/ecma262/#sec-object.assign\nrequire('../internals/export')({ target: 'Object', stat: true, forced: Object.assign !== assign }, { assign: assign });\n","'use strict';\n// 19.1.2.1 Object.assign(target, source, ...)\nvar objectKeys = require('../internals/object-keys');\nvar getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');\nvar propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');\nvar toObject = require('../internals/to-object');\nvar IndexedObject = require('../internals/indexed-object');\nvar nativeAssign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !nativeAssign || require('../internals/fails')(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var symbol = Symbol();\n  var alphabet = 'abcdefghijklmnopqrst';\n  A[symbol] = 7;\n  alphabet.split('').forEach(function (chr) { B[chr] = chr; });\n  return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var argumentsLength = arguments.length;\n  var index = 1;\n  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\n  var propertyIsEnumerable = propertyIsEnumerableModule.f;\n  while (argumentsLength > index) {\n    var S = IndexedObject(arguments[index++]);\n    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) if (propertyIsEnumerable.call(S, key = keys[j++])) T[key] = S[key];\n  } return T;\n} : nativeAssign;\n","module.exports = require('../../es/string/starts-with');\n","require('../../modules/es.string.starts-with');\n\nmodule.exports = require('../../internals/entry-unbind')('String', 'startsWith');\n","'use strict';\nvar toLength = require('../internals/to-length');\nvar validateArguments = require('../internals/validate-string-method-arguments');\nvar STARTS_WITH = 'startsWith';\nvar CORRECT_IS_REGEXP_LOGIC = require('../internals/correct-is-regexp-logic')(STARTS_WITH);\nvar nativeStartsWith = ''[STARTS_WITH];\n\n// `String.prototype.startsWith` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.startswith\nrequire('../internals/export')({ target: 'String', proto: true, forced: !CORRECT_IS_REGEXP_LOGIC }, {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = validateArguments(this, searchString, STARTS_WITH);\n    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return nativeStartsWith\n      ? nativeStartsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n","// helper for String#{startsWith, endsWith, includes}\nvar isRegExp = require('../internals/is-regexp');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nmodule.exports = function (that, searchString, NAME) {\n  if (isRegExp(searchString)) {\n    throw TypeError('String.prototype.' + NAME + \" doesn't accept regex\");\n  } return String(requireObjectCoercible(that));\n};\n","var isObject = require('../internals/is-object');\nvar classof = require('../internals/classof-raw');\nvar MATCH = require('../internals/well-known-symbol')('match');\n\n// `IsRegExp` abstract operation\n// https://tc39.github.io/ecma262/#sec-isregexp\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');\n};\n","var MATCH = require('../internals/well-known-symbol')('match');\n\nmodule.exports = function (METHOD_NAME) {\n  var regexp = /./;\n  try {\n    '/./'[METHOD_NAME](regexp);\n  } catch (e) {\n    try {\n      regexp[MATCH] = false;\n      return '/./'[METHOD_NAME](regexp);\n    } catch (f) { /* empty */ }\n  } return false;\n};\n","module.exports = require('../../es/string/repeat');\n","require('../../modules/es.string.repeat');\n\nmodule.exports = require('../../internals/entry-unbind')('String', 'repeat');\n","// `String.prototype.repeat` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.repeat\nrequire('../internals/export')({ target: 'String', proto: true }, {\n  repeat: require('../internals/string-repeat')\n});\n","'use strict';\nvar toInteger = require('../internals/to-integer');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\n// `String.prototype.repeat` method implementation\n// https://tc39.github.io/ecma262/#sec-string.prototype.repeat\nmodule.exports = ''.repeat || function repeat(count) {\n  var str = String(requireObjectCoercible(this));\n  var result = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;\n  return result;\n};\n","module.exports = require('../../es/symbol');\n\nrequire('../../modules/esnext.symbol.dispose');\nrequire('../../modules/esnext.symbol.observable');\nrequire('../../modules/esnext.symbol.pattern-match');\n","require('../../modules/es.array.concat');\nrequire('../../modules/es.object.to-string');\nrequire('../../modules/es.symbol');\nrequire('../../modules/es.symbol.async-iterator');\nrequire('../../modules/es.symbol.description');\nrequire('../../modules/es.symbol.has-instance');\nrequire('../../modules/es.symbol.is-concat-spreadable');\nrequire('../../modules/es.symbol.iterator');\nrequire('../../modules/es.symbol.match');\nrequire('../../modules/es.symbol.replace');\nrequire('../../modules/es.symbol.search');\nrequire('../../modules/es.symbol.species');\nrequire('../../modules/es.symbol.split');\nrequire('../../modules/es.symbol.to-primitive');\nrequire('../../modules/es.symbol.to-string-tag');\nrequire('../../modules/es.symbol.unscopables');\nrequire('../../modules/es.math.to-string-tag');\nrequire('../../modules/es.json.to-string-tag');\n\nmodule.exports = require('../../internals/path').Symbol;\n","'use strict';\nvar isArray = require('../internals/is-array');\nvar isObject = require('../internals/is-object');\nvar toObject = require('../internals/to-object');\nvar toLength = require('../internals/to-length');\nvar createProperty = require('../internals/create-property');\nvar arraySpeciesCreate = require('../internals/array-species-create');\nvar IS_CONCAT_SPREADABLE = require('../internals/well-known-symbol')('isConcatSpreadable');\nvar MAX_SAFE_INTEGER = 0x1fffffffffffff;\nvar MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';\n\nvar IS_CONCAT_SPREADABLE_SUPPORT = !require('../internals/fails')(function () {\n  var array = [];\n  array[IS_CONCAT_SPREADABLE] = false;\n  return array.concat()[0] !== array;\n});\n\nvar SPECIES_SUPPORT = require('../internals/array-method-has-species-support')('concat');\n\nvar isConcatSpreadable = function (O) {\n  if (!isObject(O)) return false;\n  var spreadable = O[IS_CONCAT_SPREADABLE];\n  return spreadable !== undefined ? !!spreadable : isArray(O);\n};\n\nvar FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;\n\n// `Array.prototype.concat` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.concat\n// with adding support of @@isConcatSpreadable and @@species\nrequire('../internals/export')({ target: 'Array', proto: true, forced: FORCED }, {\n  concat: function concat(arg) { // eslint-disable-line no-unused-vars\n    var O = toObject(this);\n    var A = arraySpeciesCreate(O, 0);\n    var n = 0;\n    var i, k, length, len, E;\n    for (i = -1, length = arguments.length; i < length; i++) {\n      E = i === -1 ? O : arguments[i];\n      if (isConcatSpreadable(E)) {\n        len = toLength(E.length);\n        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);\n        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);\n      } else {\n        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);\n        createProperty(A, n++, E);\n      }\n    }\n    A.length = n;\n    return A;\n  }\n});\n","'use strict';\nvar toPrimitive = require('../internals/to-primitive');\nvar definePropertyModule = require('../internals/object-define-property');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\n\nmodule.exports = function (object, key, value) {\n  var propertyKey = toPrimitive(key);\n  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));\n  else object[propertyKey] = value;\n};\n","var fails = require('../internals/fails');\nvar SPECIES = require('../internals/well-known-symbol')('species');\n\nmodule.exports = function (METHOD_NAME) {\n  return !fails(function () {\n    var array = [];\n    var constructor = array.constructor = {};\n    constructor[SPECIES] = function () {\n      return { foo: 1 };\n    };\n    return array[METHOD_NAME](Boolean).foo !== 1;\n  });\n};\n","var toString = require('../internals/object-to-string');\nvar ObjectPrototype = Object.prototype;\n\n// `Object.prototype.toString` method\n// https://tc39.github.io/ecma262/#sec-object.prototype.tostring\nif (toString !== ObjectPrototype.toString) {\n  require('../internals/redefine')(ObjectPrototype, 'toString', toString, { unsafe: true });\n}\n","'use strict';\nvar classof = require('../internals/classof');\nvar TO_STRING_TAG = require('../internals/well-known-symbol')('toStringTag');\nvar test = {};\n\ntest[TO_STRING_TAG] = 'z';\n\n// `Object.prototype.toString` method implementation\n// https://tc39.github.io/ecma262/#sec-object.prototype.tostring\nmodule.exports = String(test) !== '[object z]' ? function toString() {\n  return '[object ' + classof(this) + ']';\n} : test.toString;\n","var classofRaw = require('../internals/classof-raw');\nvar TO_STRING_TAG = require('../internals/well-known-symbol')('toStringTag');\n// ES3 wrong here\nvar CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\n// getting tag from ES6+ `Object.prototype.toString`\nmodule.exports = function (it) {\n  var O, tag, result;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag\n    // builtinTag case\n    : CORRECT_ARGUMENTS ? classofRaw(O)\n    // ES3 arguments fallback\n    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;\n};\n","'use strict';\n// ECMAScript 6 symbols shim\nvar global = require('../internals/global');\nvar has = require('../internals/has');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar IS_PURE = require('../internals/is-pure');\nvar $export = require('../internals/export');\nvar redefine = require('../internals/redefine');\nvar hiddenKeys = require('../internals/hidden-keys');\nvar fails = require('../internals/fails');\nvar shared = require('../internals/shared');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar uid = require('../internals/uid');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar wrappedWellKnownSymbolModule = require('../internals/wrapped-well-known-symbol');\nvar defineWellKnownSymbol = require('../internals/define-well-known-symbol');\nvar enumKeys = require('../internals/enum-keys');\nvar isArray = require('../internals/is-array');\nvar anObject = require('../internals/an-object');\nvar isObject = require('../internals/is-object');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar toPrimitive = require('../internals/to-primitive');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar nativeObjectCreate = require('../internals/object-create');\nvar getOwnPropertyNamesExternal = require('../internals/object-get-own-property-names-external');\nvar getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');\nvar definePropertyModule = require('../internals/object-define-property');\nvar propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');\nvar hide = require('../internals/hide');\nvar objectKeys = require('../internals/object-keys');\nvar HIDDEN = require('../internals/shared-key')('hidden');\nvar InternalStateModule = require('../internals/internal-state');\nvar SYMBOL = 'Symbol';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(SYMBOL);\nvar nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\nvar nativeDefineProperty = definePropertyModule.f;\nvar nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;\nvar $Symbol = global.Symbol;\nvar JSON = global.JSON;\nvar nativeJSONStringify = JSON && JSON.stringify;\nvar PROTOTYPE = 'prototype';\nvar TO_PRIMITIVE = wellKnownSymbol('toPrimitive');\nvar nativePropertyIsEnumerable = propertyIsEnumerableModule.f;\nvar SymbolRegistry = shared('symbol-registry');\nvar AllSymbols = shared('symbols');\nvar ObjectPrototypeSymbols = shared('op-symbols');\nvar WellKnownSymbolsStore = shared('wks');\nvar ObjectPrototype = Object[PROTOTYPE];\nvar QObject = global.QObject;\nvar NATIVE_SYMBOL = require('../internals/native-symbol');\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDescriptor = DESCRIPTORS && fails(function () {\n  return nativeObjectCreate(nativeDefineProperty({}, 'a', {\n    get: function () { return nativeDefineProperty(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, key);\n  if (ObjectPrototypeDescriptor) delete ObjectPrototype[key];\n  nativeDefineProperty(it, key, D);\n  if (ObjectPrototypeDescriptor && it !== ObjectPrototype) {\n    nativeDefineProperty(ObjectPrototype, key, ObjectPrototypeDescriptor);\n  }\n} : nativeDefineProperty;\n\nvar wrap = function (tag, description) {\n  var symbol = AllSymbols[tag] = nativeObjectCreate($Symbol[PROTOTYPE]);\n  setInternalState(symbol, {\n    type: SYMBOL,\n    tag: tag,\n    description: description\n  });\n  if (!DESCRIPTORS) symbol.description = description;\n  return symbol;\n};\n\nvar isSymbol = NATIVE_SYMBOL && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return Object(it) instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if (has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!has(it, HIDDEN)) nativeDefineProperty(it, HIDDEN, createPropertyDescriptor(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = nativeObjectCreate(D, { enumerable: createPropertyDescriptor(0, false) });\n    } return setSymbolDescriptor(it, key, D);\n  } return nativeDefineProperty(it, key, D);\n};\n\nvar $defineProperties = function defineProperties(it, P) {\n  anObject(it);\n  var keys = enumKeys(P = toIndexedObject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\n\nvar $create = function create(it, P) {\n  return P === undefined ? nativeObjectCreate(it) : $defineProperties(nativeObjectCreate(it), P);\n};\n\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = nativePropertyIsEnumerable.call(this, key = toPrimitive(key, true));\n  if (this === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\n\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = toIndexedObject(it);\n  key = toPrimitive(key, true);\n  if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;\n  var D = nativeGetOwnPropertyDescriptor(it, key);\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\n\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = nativeGetOwnPropertyNames(toIndexedObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!has(AllSymbols, key = names[i++]) && !has(hiddenKeys, key)) result.push(key);\n  } return result;\n};\n\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectPrototype;\n  var names = nativeGetOwnPropertyNames(IS_OP ? ObjectPrototypeSymbols : toIndexedObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectPrototype, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// `Symbol` constructor\n// https://tc39.github.io/ecma262/#sec-symbol-constructor\nif (!NATIVE_SYMBOL) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');\n    var description = arguments[0] === undefined ? undefined : String(arguments[0]);\n    var tag = uid(description);\n    var setter = function (value) {\n      if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));\n    };\n    if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });\n    return wrap(tag, description);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return getInternalState(this).tag;\n  });\n\n  propertyIsEnumerableModule.f = $propertyIsEnumerable;\n  definePropertyModule.f = $defineProperty;\n  getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;\n  require('../internals/object-get-own-property-names').f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;\n  require('../internals/object-get-own-property-symbols').f = $getOwnPropertySymbols;\n\n  if (DESCRIPTORS) {\n    // https://github.com/tc39/proposal-Symbol-description\n    nativeDefineProperty($Symbol[PROTOTYPE], 'description', {\n      configurable: true,\n      get: function description() {\n        return getInternalState(this).description;\n      }\n    });\n    if (!IS_PURE) {\n      redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });\n    }\n  }\n\n  wrappedWellKnownSymbolModule.f = function (name) {\n    return wrap(wellKnownSymbol(name), name);\n  };\n}\n\n$export({ global: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, { Symbol: $Symbol });\n\nfor (var wellKnownSymbols = objectKeys(WellKnownSymbolsStore), k = 0; wellKnownSymbols.length > k;) {\n  defineWellKnownSymbol(wellKnownSymbols[k++]);\n}\n\n$export({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {\n  // `Symbol.for` method\n  // https://tc39.github.io/ecma262/#sec-symbol.for\n  'for': function (key) {\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // `Symbol.keyFor` method\n  // https://tc39.github.io/ecma262/#sec-symbol.keyfor\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { USE_SETTER = true; },\n  useSimple: function () { USE_SETTER = false; }\n});\n\n$export({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {\n  // `Object.create` method\n  // https://tc39.github.io/ecma262/#sec-object.create\n  create: $create,\n  // `Object.defineProperty` method\n  // https://tc39.github.io/ecma262/#sec-object.defineproperty\n  defineProperty: $defineProperty,\n  // `Object.defineProperties` method\n  // https://tc39.github.io/ecma262/#sec-object.defineproperties\n  defineProperties: $defineProperties,\n  // `Object.getOwnPropertyDescriptor` method\n  // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor\n});\n\n$export({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL }, {\n  // `Object.getOwnPropertyNames` method\n  // https://tc39.github.io/ecma262/#sec-object.getownpropertynames\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // `Object.getOwnPropertySymbols` method\n  // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// `JSON.stringify` method behavior with symbols\n// https://tc39.github.io/ecma262/#sec-json.stringify\nJSON && $export({ target: 'JSON', stat: true, forced: !NATIVE_SYMBOL || fails(function () {\n  var symbol = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  return nativeJSONStringify([symbol]) != '[null]'\n    // WebKit converts symbol values to JSON as null\n    || nativeJSONStringify({ a: symbol }) != '{}'\n    // V8 throws on boxed symbols\n    || nativeJSONStringify(Object(symbol)) != '{}';\n}) }, {\n  stringify: function stringify(it) {\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    $replacer = replacer = args[1];\n    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    if (!isArray(replacer)) replacer = function (key, value) {\n      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return nativeJSONStringify.apply(JSON, args);\n  }\n});\n\n// `Symbol.prototype[@@toPrimitive]` method\n// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive\nif (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) hide($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// `Symbol.prototype[@@toStringTag]` property\n// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag\nsetToStringTag($Symbol, SYMBOL);\n\nhiddenKeys[HIDDEN] = true;\n","var objectKeys = require('../internals/object-keys');\nvar getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');\nvar propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');\n\n// all enumerable object keys, includes symbols\nmodule.exports = function (it) {\n  var result = objectKeys(it);\n  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\n  if (getOwnPropertySymbols) {\n    var symbols = getOwnPropertySymbols(it);\n    var propertyIsEnumerable = propertyIsEnumerableModule.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (propertyIsEnumerable.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n","// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar nativeGetOwnPropertyNames = require('../internals/object-get-own-property-names').f;\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return nativeGetOwnPropertyNames(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]'\n    ? getWindowNames(it)\n    : nativeGetOwnPropertyNames(toIndexedObject(it));\n};\n","// `Symbol.asyncIterator` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.asynciterator\nrequire('../internals/define-well-known-symbol')('asyncIterator');\n","// `Symbol.prototype.description` getter\n// https://tc39.github.io/ecma262/#sec-symbol.prototype.description\n'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar has = require('../internals/has');\nvar isObject = require('../internals/is-object');\nvar defineProperty = require('../internals/object-define-property').f;\nvar copyConstructorProperties = require('../internals/copy-constructor-properties');\nvar NativeSymbol = require('../internals/global').Symbol;\n\nif (DESCRIPTORS && typeof NativeSymbol == 'function' && (!('description' in NativeSymbol.prototype) ||\n  // Safari 12 bug\n  NativeSymbol().description !== undefined\n)) {\n  var EmptyStringDescriptionStore = {};\n  // wrap Symbol constructor for correct work with undefined description\n  var SymbolWrapper = function Symbol() {\n    var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);\n    var result = this instanceof SymbolWrapper\n      ? new NativeSymbol(description)\n      // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'\n      : description === undefined ? NativeSymbol() : NativeSymbol(description);\n    if (description === '') EmptyStringDescriptionStore[result] = true;\n    return result;\n  };\n  copyConstructorProperties(SymbolWrapper, NativeSymbol);\n  var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;\n  symbolPrototype.constructor = SymbolWrapper;\n\n  var symbolToString = symbolPrototype.toString;\n  var native = String(NativeSymbol('test')) == 'Symbol(test)';\n  var regexp = /^Symbol\\((.*)\\)[^)]+$/;\n  defineProperty(symbolPrototype, 'description', {\n    configurable: true,\n    get: function description() {\n      var symbol = isObject(this) ? this.valueOf() : this;\n      var string = symbolToString.call(symbol);\n      if (has(EmptyStringDescriptionStore, symbol)) return '';\n      var desc = native ? string.slice(7, -1) : string.replace(regexp, '$1');\n      return desc === '' ? undefined : desc;\n    }\n  });\n\n  require('../internals/export')({ global: true, forced: true }, { Symbol: SymbolWrapper });\n}\n","// `Symbol.hasInstance` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.hasinstance\nrequire('../internals/define-well-known-symbol')('hasInstance');\n","// `Symbol.isConcatSpreadable` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.isconcatspreadable\nrequire('../internals/define-well-known-symbol')('isConcatSpreadable');\n","// `Symbol.match` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.match\nrequire('../internals/define-well-known-symbol')('match');\n","// `Symbol.replace` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.replace\nrequire('../internals/define-well-known-symbol')('replace');\n","// `Symbol.search` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.search\nrequire('../internals/define-well-known-symbol')('search');\n","// `Symbol.species` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.species\nrequire('../internals/define-well-known-symbol')('species');\n","// `Symbol.split` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.split\nrequire('../internals/define-well-known-symbol')('split');\n","// `Symbol.toPrimitive` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.toprimitive\nrequire('../internals/define-well-known-symbol')('toPrimitive');\n","// `Symbol.toStringTag` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.tostringtag\nrequire('../internals/define-well-known-symbol')('toStringTag');\n","// `Symbol.unscopables` well-known symbol\n// https://tc39.github.io/ecma262/#sec-symbol.unscopables\nrequire('../internals/define-well-known-symbol')('unscopables');\n","// Math[@@toStringTag] property\n// https://tc39.github.io/ecma262/#sec-math-@@tostringtag\nrequire('../internals/set-to-string-tag')(Math, 'Math', true);\n","// JSON[@@toStringTag] property\n// https://tc39.github.io/ecma262/#sec-json-@@tostringtag\nrequire('../internals/set-to-string-tag')(require('../internals/global').JSON, 'JSON', true);\n","// `Symbol.patternMatch` well-known symbol\n// https://github.com/tc39/proposal-using-statement\nrequire('../internals/define-well-known-symbol')('dispose');\n","// https://github.com/tc39/proposal-observable\nrequire('../internals/define-well-known-symbol')('observable');\n","// `Symbol.patternMatch` well-known symbol\n// https://github.com/tc39/proposal-pattern-matching\nrequire('../internals/define-well-known-symbol')('patternMatch');\n","module.exports = require('../../es/symbol/iterator');\n","require('../../modules/es.symbol.iterator');\nrequire('../../modules/es.string.iterator');\nrequire('../../modules/web.dom-collections.iterator');\n\nmodule.exports = require('../../internals/wrapped-well-known-symbol').f('iterator');\n","'use strict';\nvar codePointAt = require('../internals/string-at');\nvar InternalStateModule = require('../internals/internal-state');\nvar defineIterator = require('../internals/define-iterator');\nvar STRING_ITERATOR = 'String Iterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);\n\n// `String.prototype[@@iterator]` method\n// https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator\ndefineIterator(String, 'String', function (iterated) {\n  setInternalState(this, {\n    type: STRING_ITERATOR,\n    string: String(iterated),\n    index: 0\n  });\n// `%StringIteratorPrototype%.next` method\n// https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next\n}, function next() {\n  var state = getInternalState(this);\n  var string = state.string;\n  var index = state.index;\n  var point;\n  if (index >= string.length) return { value: undefined, done: true };\n  point = codePointAt(string, index, true);\n  state.index += point.length;\n  return { value: point, done: false };\n});\n","var toInteger = require('../internals/to-integer');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n// CONVERT_TO_STRING: true  -> String#at\n// CONVERT_TO_STRING: false -> String#codePointAt\nmodule.exports = function (that, pos, CONVERT_TO_STRING) {\n  var S = String(requireObjectCoercible(that));\n  var position = toInteger(pos);\n  var size = S.length;\n  var first, second;\n  if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;\n  first = S.charCodeAt(position);\n  return first < 0xd800 || first > 0xdbff || position + 1 === size\n    || (second = S.charCodeAt(position + 1)) < 0xdc00 || second > 0xdfff\n      ? CONVERT_TO_STRING ? S.charAt(position) : first\n      : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xd800 << 10) + (second - 0xdc00) + 0x10000;\n};\n","'use strict';\nvar IteratorPrototype = require('../internals/iterators-core').IteratorPrototype;\nvar create = require('../internals/object-create');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar Iterators = require('../internals/iterators');\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (IteratorConstructor, NAME, next) {\n  var TO_STRING_TAG = NAME + ' Iterator';\n  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next) });\n  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);\n  Iterators[TO_STRING_TAG] = returnThis;\n  return IteratorConstructor;\n};\n","module.exports = !require('../internals/fails')(function () {\n  function F() { /* empty */ }\n  F.prototype.constructor = null;\n  return Object.getPrototypeOf(new F()) !== F.prototype;\n});\n","// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar validateSetPrototypeOfArguments = require('../internals/validate-set-prototype-of-arguments');\n\nmodule.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () { // eslint-disable-line\n  var correctSetter = false;\n  var test = {};\n  var setter;\n  try {\n    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;\n    setter.call(test, []);\n    correctSetter = test instanceof Array;\n  } catch (e) { /* empty */ }\n  return function setPrototypeOf(O, proto) {\n    validateSetPrototypeOfArguments(O, proto);\n    if (correctSetter) setter.call(O, proto);\n    else O.__proto__ = proto;\n    return O;\n  };\n}() : undefined);\n","var isObject = require('../internals/is-object');\nvar anObject = require('../internals/an-object');\n\nmodule.exports = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) {\n    throw TypeError(\"Can't set \" + String(proto) + ' as a prototype');\n  }\n};\n","var DOMIterables = require('../internals/dom-iterables');\nvar ArrayIteratorMethods = require('../modules/es.array.iterator');\nvar global = require('../internals/global');\nvar hide = require('../internals/hide');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar ITERATOR = wellKnownSymbol('iterator');\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar ArrayValues = ArrayIteratorMethods.values;\n\nfor (var COLLECTION_NAME in DOMIterables) {\n  var Collection = global[COLLECTION_NAME];\n  var CollectionPrototype = Collection && Collection.prototype;\n  if (CollectionPrototype) {\n    // some Chrome versions have non-configurable methods on DOMTokenList\n    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {\n      hide(CollectionPrototype, ITERATOR, ArrayValues);\n    } catch (e) {\n      CollectionPrototype[ITERATOR] = ArrayValues;\n    }\n    if (!CollectionPrototype[TO_STRING_TAG]) hide(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);\n    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {\n      // some Chrome versions have non-configurable methods on DOMTokenList\n      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {\n        hide(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);\n      } catch (e) {\n        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];\n      }\n    }\n  }\n}\n","// iterable DOM collections\n// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods\nmodule.exports = {\n  CSSRuleList: 0,\n  CSSStyleDeclaration: 0,\n  CSSValueList: 0,\n  ClientRectList: 0,\n  DOMRectList: 0,\n  DOMStringList: 0,\n  DOMTokenList: 1,\n  DataTransferItemList: 0,\n  FileList: 0,\n  HTMLAllCollection: 0,\n  HTMLCollection: 0,\n  HTMLFormElement: 0,\n  HTMLSelectElement: 0,\n  MediaList: 0,\n  MimeTypeArray: 0,\n  NamedNodeMap: 0,\n  NodeList: 1,\n  PaintRequestList: 0,\n  Plugin: 0,\n  PluginArray: 0,\n  SVGLengthList: 0,\n  SVGNumberList: 0,\n  SVGPathSegList: 0,\n  SVGPointList: 0,\n  SVGStringList: 0,\n  SVGTransformList: 0,\n  SourceBufferList: 0,\n  StyleSheetList: 0,\n  TextTrackCueList: 0,\n  TextTrackList: 0,\n  TouchList: 0\n};\n","'use strict';\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar addToUnscopables = require('../internals/add-to-unscopables');\nvar Iterators = require('../internals/iterators');\nvar InternalStateModule = require('../internals/internal-state');\nvar defineIterator = require('../internals/define-iterator');\nvar ARRAY_ITERATOR = 'Array Iterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);\n\n// `Array.prototype.entries` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.entries\n// `Array.prototype.keys` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.keys\n// `Array.prototype.values` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.values\n// `Array.prototype[@@iterator]` method\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator\n// `CreateArrayIterator` internal method\n// https://tc39.github.io/ecma262/#sec-createarrayiterator\nmodule.exports = defineIterator(Array, 'Array', function (iterated, kind) {\n  setInternalState(this, {\n    type: ARRAY_ITERATOR,\n    target: toIndexedObject(iterated), // target\n    index: 0,                          // next index\n    kind: kind                         // kind\n  });\n// `%ArrayIteratorPrototype%.next` method\n// https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next\n}, function () {\n  var state = getInternalState(this);\n  var target = state.target;\n  var kind = state.kind;\n  var index = state.index++;\n  if (!target || index >= target.length) {\n    state.target = undefined;\n    return { value: undefined, done: true };\n  }\n  if (kind == 'keys') return { value: index, done: false };\n  if (kind == 'values') return { value: target[index], done: false };\n  return { value: [index, target[index]], done: false };\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values%\n// https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject\n// https://tc39.github.io/ecma262/#sec-createmappedargumentsobject\nIterators.Arguments = Iterators.Array;\n\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n","import '@firebase/database';\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n//# sourceMappingURL=index.esm.js.map\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar firebase = _interopDefault(require('@firebase/app'));\nvar tslib_1 = require('tslib');\nvar util = require('@firebase/util');\nvar logger$1 = require('@firebase/logger');\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n * @constructor\r\n */\r\nvar DOMStorageWrapper = /** @class */ (function () {\r\n    /**\r\n     * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    function DOMStorageWrapper(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param {string} key The key to save the value under\r\n     * @param {?Object} value The value being stored, or null to remove the key.\r\n     */\r\n    DOMStorageWrapper.prototype.set = function (key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), util.stringify(value));\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} key\r\n     * @return {*} The value that was stored under this key, or null\r\n     */\r\n    DOMStorageWrapper.prototype.get = function (key) {\r\n        var storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return util.jsonEval(storedVal);\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} key\r\n     */\r\n    DOMStorageWrapper.prototype.remove = function (key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    };\r\n    /**\r\n     * @param {string} name\r\n     * @return {string}\r\n     */\r\n    DOMStorageWrapper.prototype.prefixedName_ = function (name) {\r\n        return this.prefix_ + name;\r\n    };\r\n    DOMStorageWrapper.prototype.toString = function () {\r\n        return this.domStorage_.toString();\r\n    };\r\n    return DOMStorageWrapper;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n *\r\n * @constructor\r\n */\r\nvar MemoryStorage = /** @class */ (function () {\r\n    function MemoryStorage() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    MemoryStorage.prototype.set = function (key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    };\r\n    MemoryStorage.prototype.get = function (key) {\r\n        if (util.contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    };\r\n    MemoryStorage.prototype.remove = function (key) {\r\n        delete this.cache_[key];\r\n    };\r\n    return MemoryStorage;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param {string} domStorageName Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @return {?} Turning off type information until a common interface is defined.\r\n */\r\nvar createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            var domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nvar PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nvar SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar logClient = new logger$1.Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n * @type {function(): number} Generated ID.\r\n */\r\nvar LUIDGenerator = (function () {\r\n    var id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param {!string} str The string to hash\r\n * @return {!string} The resulting hash\r\n */\r\nvar sha1 = function (str) {\r\n    var utf8Bytes = util.stringToByteArray(str);\r\n    var sha1 = new util.Sha1();\r\n    sha1.update(utf8Bytes);\r\n    var sha1Bytes = sha1.digest();\r\n    return util.base64.encodeByteArray(sha1Bytes);\r\n};\r\n/**\r\n * @param {...*} var_args\r\n * @return {string}\r\n * @private\r\n */\r\nvar buildLogMessage_ = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = '';\r\n    for (var i = 0; i < var_args.length; i++) {\r\n        if (Array.isArray(var_args[i]) ||\r\n            (var_args[i] &&\r\n                typeof var_args[i] === 'object' &&\r\n                typeof var_args[i].length === 'number')) {\r\n            message += buildLogMessage_.apply(null, var_args[i]);\r\n        }\r\n        else if (typeof var_args[i] === 'object') {\r\n            message += util.stringify(var_args[i]);\r\n        }\r\n        else {\r\n            message += var_args[i];\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n * @type {?function(string)}\r\n */\r\nvar logger = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n * @type {boolean}\r\n * @private\r\n */\r\nvar firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\r\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\r\n */\r\nvar enableLogging = function (logger_, persistent) {\r\n    util.assert(!persistent || (logger_ === true || logger_ === false), \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = logger$1.LogLevel.VERBOSE;\r\n        logger = logClient.log.bind(logClient);\r\n        if (persistent)\r\n            SessionStorage.set('logging_enabled', true);\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger = logger_;\r\n    }\r\n    else {\r\n        logger = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\n/**\r\n *\r\n * @param {...(string|Arguments)} var_args\r\n */\r\nvar log = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger === null && SessionStorage.get('logging_enabled') === true)\r\n            enableLogging(true);\r\n    }\r\n    if (logger) {\r\n        var message = buildLogMessage_.apply(null, var_args);\r\n        logger(message);\r\n    }\r\n};\r\n/**\r\n * @param {!string} prefix\r\n * @return {function(...[*])}\r\n */\r\nvar logWrapper = function (prefix) {\r\n    return function () {\r\n        var var_args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            var_args[_i] = arguments[_i];\r\n        }\r\n        log.apply(void 0, [prefix].concat(var_args));\r\n    };\r\n};\r\n/**\r\n * @param {...string} var_args\r\n */\r\nvar error = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, var_args);\r\n    logClient.error(message);\r\n};\r\n/**\r\n * @param {...string} var_args\r\n */\r\nvar fatal = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = \"FIREBASE FATAL ERROR: \" + buildLogMessage_.apply(void 0, var_args);\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\n/**\r\n * @param {...*} var_args\r\n */\r\nvar warn = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, var_args);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nvar warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n * @param {*} data\r\n * @return {boolean}\r\n */\r\nvar isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data != data || // NaN\r\n            data == Number.POSITIVE_INFINITY ||\r\n            data == Number.NEGATIVE_INFINITY));\r\n};\r\n/**\r\n * @param {function()} fn\r\n */\r\nvar executeWhenDOMReady = function (fn) {\r\n    if (util.isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        var called_1 = false;\r\n        var wrappedFn_1 = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn_1, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called_1) {\r\n                called_1 = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn_1, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn_1, false);\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            document.attachEvent('onreadystatechange', function () {\r\n                if (document.readyState === 'complete')\r\n                    wrappedFn_1();\r\n            });\r\n            // fallback to onload.\r\n            window.attachEvent('onload', wrappedFn_1);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n * @type {!string}\r\n */\r\nvar MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n * @type {!string}\r\n */\r\nvar MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number}\r\n */\r\nvar nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        var aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt == 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number} comparison result.\r\n */\r\nvar stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\n/**\r\n * @param {string} key\r\n * @param {Object} obj\r\n * @return {*}\r\n */\r\nvar requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + util.stringify(obj));\r\n    }\r\n};\r\n/**\r\n * @param {*} obj\r\n * @return {string}\r\n */\r\nvar ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null)\r\n        return util.stringify(obj);\r\n    var keys = [];\r\n    for (var k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    var key = '{';\r\n    for (var i = 0; i < keys.length; i++) {\r\n        if (i !== 0)\r\n            key += ',';\r\n        key += util.stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param {!string} str The string\r\n * @param {!number} segsize The maximum number of chars in the string.\r\n * @return {Array.<string>} The string, split into appropriately-sized chunks\r\n */\r\nvar splitStringBySize = function (str, segsize) {\r\n    var len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    var dataSegs = [];\r\n    for (var c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param {!(Object|Array)} obj The object or array to iterate over\r\n * @param {function(?, ?)} fn The function to apply\r\n */\r\nvar each = function (obj, fn) {\r\n    if (Array.isArray(obj)) {\r\n        for (var i = 0; i < obj.length; ++i) {\r\n            fn(i, obj[i]);\r\n        }\r\n    }\r\n    else {\r\n        /**\r\n         * in the conversion of code we removed the goog.object.forEach\r\n         * function which did a value,key callback. We standardized on\r\n         * a single impl that does a key, value callback. So we invert\r\n         * to not have to touch the `each` code points\r\n         */\r\n        util.forEach(obj, function (key, val) { return fn(val, key); });\r\n    }\r\n};\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param {!number} v A double\r\n * @return {string}\r\n */\r\nvar doubleToIEEE754String = function (v) {\r\n    util.assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    var ebits = 11, fbits = 52;\r\n    var bias = (1 << (ebits - 1)) - 1, s, e, f, ln, i, bits, str;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    var hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        var hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1)\r\n            hexByte = '0' + hexByte;\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n * @return {boolean}\r\n */\r\nvar isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n * @return {boolean}\r\n */\r\nvar isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n * @param {!string} code\r\n * @param {!Query} query\r\n * @return {Error}\r\n */\r\nvar errorForServerCode = function (code, query) {\r\n    var reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code == 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code == 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    var error = new Error(code + ' at ' + query.path.toString() + ': ' + reason);\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n};\r\n/**\r\n * Used to test for integer-looking strings\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INTEGER_REGEXP_ = new RegExp('^-?\\\\d{1,10}$');\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n * @param {!string} str\r\n * @return {?number}\r\n */\r\nvar tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        var intVal = Number(str);\r\n        if (intVal >= -2147483648 && intVal <= 2147483647) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param {!function()} fn The code to guard.\r\n */\r\nvar exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(function () {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            var stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @return {boolean} true if we think we're currently being crawled.\r\n */\r\nvar beingCrawled = function () {\r\n    var userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param {Function} fn Function to run.\r\n * @param {number} time Milliseconds to wait before running.\r\n * @return {number|Object} The setTimeout() return value.\r\n */\r\nvar setTimeoutNonBlocking = function (fn, time) {\r\n    var timeout = setTimeout(fn, time);\r\n    if (typeof timeout === 'object' && timeout['unref']) {\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nvar Path = /** @class */ (function () {\r\n    /**\r\n     * @param {string|Array.<string>} pathOrString Path string to parse,\r\n     *      or another path, or the raw tokens array\r\n     * @param {number=} pieceNum\r\n     */\r\n    function Path(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            var copyTo = 0;\r\n            for (var i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    Object.defineProperty(Path, \"Empty\", {\r\n        /**\r\n         * Singleton to represent an empty path\r\n         *\r\n         * @const\r\n         */\r\n        get: function () {\r\n            return new Path('');\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Path.prototype.getFront = function () {\r\n        if (this.pieceNum_ >= this.pieces_.length)\r\n            return null;\r\n        return this.pieces_[this.pieceNum_];\r\n    };\r\n    /**\r\n     * @return {number} The number of segments in this path\r\n     */\r\n    Path.prototype.getLength = function () {\r\n        return this.pieces_.length - this.pieceNum_;\r\n    };\r\n    /**\r\n     * @return {!Path}\r\n     */\r\n    Path.prototype.popFront = function () {\r\n        var pieceNum = this.pieceNum_;\r\n        if (pieceNum < this.pieces_.length) {\r\n            pieceNum++;\r\n        }\r\n        return new Path(this.pieces_, pieceNum);\r\n    };\r\n    /**\r\n     * @return {?string}\r\n     */\r\n    Path.prototype.getBack = function () {\r\n        if (this.pieceNum_ < this.pieces_.length)\r\n            return this.pieces_[this.pieces_.length - 1];\r\n        return null;\r\n    };\r\n    Path.prototype.toString = function () {\r\n        var pathString = '';\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '')\r\n                pathString += '/' + this.pieces_[i];\r\n        }\r\n        return pathString || '/';\r\n    };\r\n    Path.prototype.toUrlEncodedString = function () {\r\n        var pathString = '';\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '')\r\n                pathString += '/' + encodeURIComponent(String(this.pieces_[i]));\r\n        }\r\n        return pathString || '/';\r\n    };\r\n    /**\r\n     * Shallow copy of the parts of the path.\r\n     *\r\n     * @param {number=} begin\r\n     * @return {!Array<string>}\r\n     */\r\n    Path.prototype.slice = function (begin) {\r\n        if (begin === void 0) { begin = 0; }\r\n        return this.pieces_.slice(this.pieceNum_ + begin);\r\n    };\r\n    /**\r\n     * @return {?Path}\r\n     */\r\n    Path.prototype.parent = function () {\r\n        if (this.pieceNum_ >= this.pieces_.length)\r\n            return null;\r\n        var pieces = [];\r\n        for (var i = this.pieceNum_; i < this.pieces_.length - 1; i++)\r\n            pieces.push(this.pieces_[i]);\r\n        return new Path(pieces, 0);\r\n    };\r\n    /**\r\n     * @param {string|!Path} childPathObj\r\n     * @return {!Path}\r\n     */\r\n    Path.prototype.child = function (childPathObj) {\r\n        var pieces = [];\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++)\r\n            pieces.push(this.pieces_[i]);\r\n        if (childPathObj instanceof Path) {\r\n            for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n                pieces.push(childPathObj.pieces_[i]);\r\n            }\r\n        }\r\n        else {\r\n            var childPieces = childPathObj.split('/');\r\n            for (var i = 0; i < childPieces.length; i++) {\r\n                if (childPieces[i].length > 0)\r\n                    pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n        return new Path(pieces, 0);\r\n    };\r\n    /**\r\n     * @return {boolean} True if there are no segments in this path\r\n     */\r\n    Path.prototype.isEmpty = function () {\r\n        return this.pieceNum_ >= this.pieces_.length;\r\n    };\r\n    /**\r\n     * @param {!Path} outerPath\r\n     * @param {!Path} innerPath\r\n     * @return {!Path} The path from outerPath to innerPath\r\n     */\r\n    Path.relativePath = function (outerPath, innerPath) {\r\n        var outer = outerPath.getFront(), inner = innerPath.getFront();\r\n        if (outer === null) {\r\n            return innerPath;\r\n        }\r\n        else if (outer === inner) {\r\n            return Path.relativePath(outerPath.popFront(), innerPath.popFront());\r\n        }\r\n        else {\r\n            throw new Error('INTERNAL ERROR: innerPath (' +\r\n                innerPath +\r\n                ') is not within ' +\r\n                'outerPath (' +\r\n                outerPath +\r\n                ')');\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Path} left\r\n     * @param {!Path} right\r\n     * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.\r\n     */\r\n    Path.comparePaths = function (left, right) {\r\n        var leftKeys = left.slice();\r\n        var rightKeys = right.slice();\r\n        for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n            var cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n            if (cmp !== 0)\r\n                return cmp;\r\n        }\r\n        if (leftKeys.length === rightKeys.length)\r\n            return 0;\r\n        return leftKeys.length < rightKeys.length ? -1 : 1;\r\n    };\r\n    /**\r\n     *\r\n     * @param {Path} other\r\n     * @return {boolean} true if paths are the same.\r\n     */\r\n    Path.prototype.equals = function (other) {\r\n        if (this.getLength() !== other.getLength()) {\r\n            return false;\r\n        }\r\n        for (var i = this.pieceNum_, j = other.pieceNum_; i <= this.pieces_.length; i++, j++) {\r\n            if (this.pieces_[i] !== other.pieces_[j]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Path} other\r\n     * @return {boolean} True if this path is a parent (or the same as) other\r\n     */\r\n    Path.prototype.contains = function (other) {\r\n        var i = this.pieceNum_;\r\n        var j = other.pieceNum_;\r\n        if (this.getLength() > other.getLength()) {\r\n            return false;\r\n        }\r\n        while (i < this.pieces_.length) {\r\n            if (this.pieces_[i] !== other.pieces_[j]) {\r\n                return false;\r\n            }\r\n            ++i;\r\n            ++j;\r\n        }\r\n        return true;\r\n    };\r\n    return Path;\r\n}()); // end Path\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nvar ValidationPath = /** @class */ (function () {\r\n    /**\r\n     * @param {!Path} path Initial Path.\r\n     * @param {string} errorPrefix_ Prefix for any error messages.\r\n     */\r\n    function ValidationPath(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        /** @type {!Array<string>} */\r\n        this.parts_ = path.slice();\r\n        /** @type {number} Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (var i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += util.stringLength(this.parts_[i]);\r\n        }\r\n        this.checkValid_();\r\n    }\r\n    Object.defineProperty(ValidationPath, \"MAX_PATH_DEPTH\", {\r\n        /** @const {number} Maximum key depth. */\r\n        get: function () {\r\n            return 32;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValidationPath, \"MAX_PATH_LENGTH_BYTES\", {\r\n        /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */\r\n        get: function () {\r\n            return 768;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @param {string} child */\r\n    ValidationPath.prototype.push = function (child) {\r\n        // Count the needed '/'\r\n        if (this.parts_.length > 0) {\r\n            this.byteLength_ += 1;\r\n        }\r\n        this.parts_.push(child);\r\n        this.byteLength_ += util.stringLength(child);\r\n        this.checkValid_();\r\n    };\r\n    ValidationPath.prototype.pop = function () {\r\n        var last = this.parts_.pop();\r\n        this.byteLength_ -= util.stringLength(last);\r\n        // Un-count the previous '/'\r\n        if (this.parts_.length > 0) {\r\n            this.byteLength_ -= 1;\r\n        }\r\n    };\r\n    ValidationPath.prototype.checkValid_ = function () {\r\n        if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {\r\n            throw new Error(this.errorPrefix_ +\r\n                'has a key path longer than ' +\r\n                ValidationPath.MAX_PATH_LENGTH_BYTES +\r\n                ' bytes (' +\r\n                this.byteLength_ +\r\n                ').');\r\n        }\r\n        if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {\r\n            throw new Error(this.errorPrefix_ +\r\n                'path specified exceeds the maximum depth that can be written (' +\r\n                ValidationPath.MAX_PATH_DEPTH +\r\n                ') or object contains a cycle ' +\r\n                this.toErrorString());\r\n        }\r\n    };\r\n    /**\r\n     * String for use in error messages - uses '.' notation for path.\r\n     *\r\n     * @return {string}\r\n     */\r\n    ValidationPath.prototype.toErrorString = function () {\r\n        if (this.parts_.length == 0) {\r\n            return '';\r\n        }\r\n        return \"in property '\" + this.parts_.join('.') + \"'\";\r\n    };\r\n    return ValidationPath;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar PROTOCOL_VERSION = '5';\r\nvar VERSION_PARAM = 'v';\r\nvar TRANSPORT_SESSION_PARAM = 's';\r\nvar REFERER_PARAM = 'r';\r\nvar FORGE_REF = 'f';\r\nvar FORGE_DOMAIN = 'firebaseio.com';\r\nvar LAST_SESSION_PARAM = 'ls';\r\nvar WEBSOCKET = 'websocket';\r\nvar LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n *\r\n * @constructor\r\n */\r\nvar RepoInfo = /** @class */ (function () {\r\n    /**\r\n     * @param {string} host Hostname portion of the url for the repo\r\n     * @param {boolean} secure Whether or not this repo is accessed over ssl\r\n     * @param {string} namespace The namespace represented by the repo\r\n     * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param {string=} persistenceKey Override the default session persistence storage key\r\n     */\r\n    function RepoInfo(host, secure, namespace, webSocketOnly, persistenceKey) {\r\n        if (persistenceKey === void 0) { persistenceKey = ''; }\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.persistenceKey = persistenceKey;\r\n        this.host = host.toLowerCase();\r\n        this.domain = this.host.substr(this.host.indexOf('.') + 1);\r\n        this.internalHost = PersistentStorage.get('host:' + host) || this.host;\r\n    }\r\n    RepoInfo.prototype.needsQueryParam = function () {\r\n        return this.host !== this.internalHost || this.isCustomHost();\r\n    };\r\n    RepoInfo.prototype.isCacheableHost = function () {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    };\r\n    RepoInfo.prototype.isDemoHost = function () {\r\n        return this.domain === 'firebaseio-demo.com';\r\n    };\r\n    RepoInfo.prototype.isCustomHost = function () {\r\n        return (this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com');\r\n    };\r\n    RepoInfo.prototype.updateHost = function (newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this.host, this.internalHost);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns the websocket URL for this repo\r\n     * @param {string} type of connection\r\n     * @param {Object} params list\r\n     * @return {string} The URL for this repo\r\n     */\r\n    RepoInfo.prototype.connectionURL = function (type, params) {\r\n        util.assert(typeof type === 'string', 'typeof type must == string');\r\n        util.assert(typeof params === 'object', 'typeof params must == object');\r\n        var connURL;\r\n        if (type === WEBSOCKET) {\r\n            connURL =\r\n                (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\r\n        }\r\n        else if (type === LONG_POLLING) {\r\n            connURL =\r\n                (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\r\n        }\r\n        else {\r\n            throw new Error('Unknown connection type: ' + type);\r\n        }\r\n        if (this.needsQueryParam()) {\r\n            params['ns'] = this.namespace;\r\n        }\r\n        var pairs = [];\r\n        util.forEach(params, function (key, value) {\r\n            pairs.push(key + '=' + value);\r\n        });\r\n        return connURL + pairs.join('&');\r\n    };\r\n    /** @return {string} */\r\n    RepoInfo.prototype.toString = function () {\r\n        var str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    };\r\n    /** @return {string} */\r\n    RepoInfo.prototype.toURLString = function () {\r\n        return (this.secure ? 'https://' : 'http://') + this.host;\r\n    };\r\n    return RepoInfo;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!string} pathString\r\n * @return {string}\r\n */\r\nfunction decodePath(pathString) {\r\n    var pathStringDecoded = '';\r\n    var pieces = pathString.split('/');\r\n    for (var i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            var piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @param {!string} queryString\r\n * @return {!{[key:string]:string}} key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    var results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (var _i = 0, _a = queryString.split('&'); _i < _a.length; _i++) {\r\n        var segment = _a[_i];\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        var kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(\"Invalid query segment '\" + segment + \"' in query '\" + queryString + \"'\");\r\n        }\r\n    }\r\n    return results;\r\n}\r\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{repoInfo: !RepoInfo, path: !Path}}\r\n */\r\nvar parseRepoInfo = function (dataURL) {\r\n    var parsedUrl = parseURL(dataURL), namespace = parsedUrl.subdomain;\r\n    if (parsedUrl.domain === 'firebase') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace == 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string}}\r\n */\r\nvar parseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    var host = '', domain = '', subdomain = '', pathString = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    var secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        var colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        var slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        var questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = dataURL.length;\r\n        }\r\n        var parts = host.split('.');\r\n        if (parts.length === 3) {\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            domain = parts[1];\r\n            subdomain = parts[0].toLowerCase();\r\n        }\r\n        else if (parts.length === 2) {\r\n            domain = parts[0];\r\n        }\r\n        else if (parts[0].slice(0, colonInd).toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        // Support `ns` query param if subdomain not already set\r\n        if (subdomain === '' && 'ns' in queryParams) {\r\n            subdomain = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host: host,\r\n        port: port,\r\n        domain: domain,\r\n        subdomain: subdomain,\r\n        secure: secure,\r\n        scheme: scheme,\r\n        pathString: pathString\r\n    };\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n * @type {number}\r\n * @private\r\n */\r\nvar MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\n/**\r\n * @param {*} key\r\n * @return {boolean}\r\n */\r\nvar isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\r\nvar isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\r\nvar isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\n/**\r\n * @param {*} priority\r\n * @return {boolean}\r\n */\r\nvar isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority && typeof priority === 'object' && util.contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\r\nvar validateFirebaseDataArg = function (fnName, argumentNumber, data, path, optional) {\r\n    if (optional && data === undefined)\r\n        return;\r\n    validateFirebaseData(util.errorPrefix(fnName, argumentNumber, optional), data, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {*} data\r\n * @param {!Path|!ValidationPath} path_\r\n */\r\nvar validateFirebaseData = function (errorPrefix, data, path_) {\r\n    var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            path.toErrorString() +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString());\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        util.stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            path.toErrorString() +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        var hasDotValue_1 = false, hasActualChild_1 = false;\r\n        util.forEach(data, function (key, value) {\r\n            if (key === '.value') {\r\n                hasDotValue_1 = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild_1 = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        path.toErrorString() +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            path.push(key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            path.pop();\r\n        });\r\n        if (hasDotValue_1 && hasActualChild_1) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                path.toErrorString() +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {Array<!Path>} mergePaths\r\n */\r\nvar validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    var i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        var keys = curPath.slice();\r\n        for (var j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(Path.comparePaths);\r\n    var prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && prevPath.contains(curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\r\nvar validateFirebaseMergeDataArg = function (fnName, argumentNumber, data, path, optional) {\r\n    if (optional && data === undefined)\r\n        return;\r\n    var errorPrefix = util.errorPrefix(fnName, argumentNumber, optional);\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix + ' must be an object containing the children to replace.');\r\n    }\r\n    var mergePaths = [];\r\n    util.forEach(data, function (key, value) {\r\n        var curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix, value, path.child(curPath));\r\n        if (curPath.getBack() === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix, mergePaths);\r\n};\r\nvar validatePriority = function (fnName, argumentNumber, priority, optional) {\r\n    if (optional && priority === undefined)\r\n        return;\r\n    if (isInvalidJSONNumber(priority))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n};\r\nvar validateEventType = function (fnName, argumentNumber, eventType, optional) {\r\n    if (optional && eventType === undefined)\r\n        return;\r\n    switch (eventType) {\r\n        case 'value':\r\n        case 'child_added':\r\n        case 'child_removed':\r\n        case 'child_changed':\r\n        case 'child_moved':\r\n            break;\r\n        default:\r\n            throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n                'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\r\n                '\"child_changed\", or \"child_moved\".');\r\n    }\r\n};\r\nvar validateKey = function (fnName, argumentNumber, key, optional) {\r\n    if (optional && key === undefined)\r\n        return;\r\n    if (!isValidKey(key))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n};\r\nvar validatePathString = function (fnName, argumentNumber, pathString, optional) {\r\n    if (optional && pathString === undefined)\r\n        return;\r\n    if (!isValidPathString(pathString))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n};\r\nvar validateRootPathString = function (fnName, argumentNumber, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentNumber, pathString, optional);\r\n};\r\nvar validateWritablePath = function (fnName, path) {\r\n    if (path.getFront() === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nvar validateUrl = function (fnName, argumentNumber, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    var pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, false) +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\r\nvar validateBoolean = function (fnName, argumentNumber, bool, optional) {\r\n    if (optional && bool === undefined)\r\n        return;\r\n    if (typeof bool !== 'boolean')\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'must be a boolean.');\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n */\r\nvar OnDisconnect = /** @class */ (function () {\r\n    /**\r\n     * @param {!Repo} repo_\r\n     * @param {!Path} path_\r\n     */\r\n    function OnDisconnect(repo_, path_) {\r\n        this.repo_ = repo_;\r\n        this.path_ = path_;\r\n    }\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.cancel = function (onComplete) {\r\n        util.validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\r\n        util.validateCallback('OnDisconnect.cancel', 1, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.remove = function (onComplete) {\r\n        util.validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\r\n        validateWritablePath('OnDisconnect.remove', this.path_);\r\n        util.validateCallback('OnDisconnect.remove', 1, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} value\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.set = function (value, onComplete) {\r\n        util.validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\r\n        validateWritablePath('OnDisconnect.set', this.path_);\r\n        validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\r\n        util.validateCallback('OnDisconnect.set', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} value\r\n     * @param {number|string|null} priority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {\r\n        util.validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\r\n        validateWritablePath('OnDisconnect.setWithPriority', this.path_);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);\r\n        validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\r\n        util.validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {!Object} objectToMerge\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.update = function (objectToMerge, onComplete) {\r\n        util.validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\r\n        validateWritablePath('OnDisconnect.update', this.path_);\r\n        if (Array.isArray(objectToMerge)) {\r\n            var newObjectToMerge = {};\r\n            for (var i = 0; i < objectToMerge.length; ++i) {\r\n                newObjectToMerge['' + i] = objectToMerge[i];\r\n            }\r\n            objectToMerge = newObjectToMerge;\r\n            warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\r\n                'existing data, or an Object with integer keys if you really do want to only update some of the children.');\r\n        }\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);\r\n        util.validateCallback('OnDisconnect.update', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    return OnDisconnect;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar TransactionResult = /** @class */ (function () {\r\n    /**\r\n     * A type for the resolve value of Firebase.transaction.\r\n     * @constructor\r\n     * @dict\r\n     * @param {boolean} committed\r\n     * @param {DataSnapshot} snapshot\r\n     */\r\n    function TransactionResult(committed, snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    TransactionResult.prototype.toJSON = function () {\r\n        util.validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    };\r\n    return TransactionResult;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nvar nextPushId = (function () {\r\n    // Modeled after base64 web-safe chars, but ordered by ASCII.\r\n    var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    var lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    var lastRandChars = [];\r\n    return function (now) {\r\n        var duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        var i;\r\n        var timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        util.assert(now === 0, 'Cannot push at time == 0');\r\n        var id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        util.assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @param {!string} name\r\n * @param {!Node} node\r\n * @constructor\r\n * @struct\r\n */\r\nvar NamedNode = /** @class */ (function () {\r\n    function NamedNode(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    /**\r\n     *\r\n     * @param {!string} name\r\n     * @param {!Node} node\r\n     * @return {NamedNode}\r\n     */\r\n    NamedNode.Wrap = function (name, node) {\r\n        return new NamedNode(name, node);\r\n    };\r\n    return NamedNode;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @constructor\r\n */\r\nvar Index = /** @class */ (function () {\r\n    function Index() {\r\n    }\r\n    /**\r\n     * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\r\n     * this index\r\n     */\r\n    Index.prototype.getCompare = function () {\r\n        return this.compare.bind(this);\r\n    };\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     * @param {!Node} oldNode\r\n     * @param {!Node} newNode\r\n     * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    Index.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        var oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        var newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    };\r\n    /**\r\n     * @return {!NamedNode} a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    Index.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    return Index;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __EMPTY_NODE;\r\nvar KeyIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(KeyIndex, _super);\r\n    function KeyIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Object.defineProperty(KeyIndex, \"__EMPTY_NODE\", {\r\n        get: function () {\r\n            return __EMPTY_NODE;\r\n        },\r\n        set: function (val) {\r\n            __EMPTY_NODE = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.compare = function (a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.isDefinedOn = function (node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw util.assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.maxPost = function () {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    KeyIndex.prototype.makePost = function (indexValue, name) {\r\n        util.assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    KeyIndex.prototype.toString = function () {\r\n        return '.key';\r\n    };\r\n    return KeyIndex;\r\n}(Index));\r\nvar KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar MAX_NODE;\r\nfunction setMaxNode(val) {\r\n    MAX_NODE = val;\r\n}\r\n/**\r\n * @param {(!string|!number)} priority\r\n * @return {!string}\r\n */\r\nvar priorityHashText = function (priority) {\r\n    if (typeof priority === 'number')\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    else\r\n        return 'string:' + priority;\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n *\r\n * @param {!Node} priorityNode\r\n */\r\nvar validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        var val = priorityNode.val();\r\n        util.assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && util.contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        util.assert(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    util.assert(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nvar LeafNode = /** @class */ (function () {\r\n    /**\r\n     * @implements {Node}\r\n     * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.\r\n     *                                         The object type is possible in the event of a deferred value\r\n     * @param {!Node=} priorityNode_ The priority of this node.\r\n     */\r\n    function LeafNode(value_, priorityNode_) {\r\n        if (priorityNode_ === void 0) { priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE; }\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        util.assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    Object.defineProperty(LeafNode, \"__childrenNodeConstructor\", {\r\n        get: function () {\r\n            return __childrenNodeConstructor;\r\n        },\r\n        set: function (val) {\r\n            __childrenNodeConstructor = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.isLeafNode = function () {\r\n        return true;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getPriority = function () {\r\n        return this.priorityNode_;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updatePriority = function (newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getImmediateChild = function (childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getChild = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this;\r\n        }\r\n        else if (path.getFront() === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.hasChild = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {\r\n        return null;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updateChild = function (path, newChildNode) {\r\n        var front = path.getFront();\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            util.assert(front !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(), newChildNode));\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.numChildren = function () {\r\n        return 0;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.forEachChild = function (index, action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.val = function (exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty())\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        else\r\n            return this.getValue();\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.hash = function () {\r\n        if (this.lazyHash_ === null) {\r\n            var toHash = '';\r\n            if (!this.priorityNode_.isEmpty())\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            var type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    };\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @return {Object|string|number|boolean} The value of the node.\r\n     */\r\n    LeafNode.prototype.getValue = function () {\r\n        return this.value_;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.compareTo = function (other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            util.assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    };\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     * @param {!LeafNode} otherLeaf\r\n     * @return {!number}\r\n     * @private\r\n     */\r\n    LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {\r\n        var otherLeafType = typeof otherLeaf.value_;\r\n        var thisLeafType = typeof this.value_;\r\n        var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        util.assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        util.assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.withIndex = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.isIndexed = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.equals = function (other) {\r\n        /**\r\n         * @inheritDoc\r\n         */\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            var otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n     * the same type, the comparison falls back to their value\r\n     * @type {Array.<!string>}\r\n     * @const\r\n     */\r\n    LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\r\n    return LeafNode;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar nodeFromJSON;\r\nvar MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON = val;\r\n}\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\r\nvar PriorityIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PriorityIndex, _super);\r\n    function PriorityIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.compare = function (a, b) {\r\n        var aPriority = a.node.getPriority();\r\n        var bPriority = b.node.getPriority();\r\n        var indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.isDefinedOn = function (node) {\r\n        return !node.getPriority().isEmpty();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.maxPost = function () {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    PriorityIndex.prototype.makePost = function (indexValue, name) {\r\n        var priorityNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    PriorityIndex.prototype.toString = function () {\r\n        return '.priority';\r\n    };\r\n    return PriorityIndex;\r\n}(Index));\r\nvar PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nvar SortedMapIterator = /** @class */ (function () {\r\n    /**\r\n     * @template K, V, T\r\n     * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\r\n     * @param {?K} startKey\r\n     * @param {function(K, K): number} comparator\r\n     * @param {boolean} isReverse_ Whether or not to iterate in reverse\r\n     * @param {(function(K, V):T)=} resultGenerator_\r\n     */\r\n    function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {\r\n        if (resultGenerator_ === void 0) { resultGenerator_ = null; }\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        /** @private\r\n         * @type {Array.<!LLRBNode>}\r\n         */\r\n        this.nodeStack_ = [];\r\n        var cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_)\r\n                cmp *= -1;\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    SortedMapIterator.prototype.getNext = function () {\r\n        if (this.nodeStack_.length === 0)\r\n            return null;\r\n        var node = this.nodeStack_.pop();\r\n        var result;\r\n        if (this.resultGenerator_)\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        else\r\n            result = { key: node.key, value: node.value };\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    SortedMapIterator.prototype.hasNext = function () {\r\n        return this.nodeStack_.length > 0;\r\n    };\r\n    SortedMapIterator.prototype.peek = function () {\r\n        if (this.nodeStack_.length === 0)\r\n            return null;\r\n        var node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    };\r\n    return SortedMapIterator;\r\n}());\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nvar LLRBNode = /** @class */ (function () {\r\n    /**\r\n     * @template K, V\r\n     * @param {!K} key Key associated with this node.\r\n     * @param {!V} value Value associated with this node.\r\n     * @param {?boolean} color Whether this node is red.\r\n     * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\r\n     * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\r\n     */\r\n    function LLRBNode(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param {?K} key New key for the node, or null.\r\n     * @param {?V} value New value for the node, or null.\r\n     * @param {?boolean} color New color for the node, or null.\r\n     * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\r\n     * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\r\n     * @return {!LLRBNode} The node copy.\r\n     */\r\n    LLRBNode.prototype.copy = function (key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the tree.\r\n     */\r\n    LLRBNode.prototype.count = function () {\r\n        return this.left.count() + 1 + this.right.count();\r\n    };\r\n    /**\r\n     * @return {boolean} True if the tree is empty.\r\n     */\r\n    LLRBNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @return {*} The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    LLRBNode.prototype.inorderTraversal = function (action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    };\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!Object, !Object)} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {*} True if traversal was aborted.\r\n     */\r\n    LLRBNode.prototype.reverseTraversal = function (action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    };\r\n    /**\r\n     * @return {!Object} The minimum node in the tree.\r\n     * @private\r\n     */\r\n    LLRBNode.prototype.min_ = function () {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    };\r\n    /**\r\n     * @return {!K} The maximum key in the tree.\r\n     */\r\n    LLRBNode.prototype.minKey = function () {\r\n        return this.min_().key;\r\n    };\r\n    /**\r\n     * @return {!K} The maximum key in the tree.\r\n     */\r\n    LLRBNode.prototype.maxKey = function () {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Object} key Key to insert.\r\n     * @param {!Object} value Value to insert.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode} New tree, with the key/value added.\r\n     */\r\n    LLRBNode.prototype.insert = function (key, value, comparator) {\r\n        var cmp, n;\r\n        n = this;\r\n        cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\r\n     */\r\n    LLRBNode.prototype.removeMin_ = function () {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        var n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_())\r\n            n = n.moveRedLeft_();\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @param {!Object} key The key of the item to remove.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\r\n     */\r\n    LLRBNode.prototype.remove = function (key, comparator) {\r\n        var n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_())\r\n                n = n.rotateRight_();\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {boolean} Whether this is a RED node.\r\n     */\r\n    LLRBNode.prototype.isRed_ = function () {\r\n        return this.color;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree after performing any needed rotations.\r\n     */\r\n    LLRBNode.prototype.fixUp_ = function () {\r\n        var n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_())\r\n            n = n.rotateLeft_();\r\n        if (n.left.isRed_() && n.left.left.isRed_())\r\n            n = n.rotateRight_();\r\n        if (n.left.isRed_() && n.right.isRed_())\r\n            n = n.colorFlip_();\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after moveRedLeft.\r\n     */\r\n    LLRBNode.prototype.moveRedLeft_ = function () {\r\n        var n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after moveRedRight.\r\n     */\r\n    LLRBNode.prototype.moveRedRight_ = function () {\r\n        var n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after rotateLeft.\r\n     */\r\n    LLRBNode.prototype.rotateLeft_ = function () {\r\n        var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after rotateRight.\r\n     */\r\n    LLRBNode.prototype.rotateRight_ = function () {\r\n        var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after colorFlip.\r\n     */\r\n    LLRBNode.prototype.colorFlip_ = function () {\r\n        var left = this.left.copy(null, null, !this.left.color, null, null);\r\n        var right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    };\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @private\r\n     * @return {boolean} True if all is well.\r\n     */\r\n    LLRBNode.prototype.checkMaxDepth_ = function () {\r\n        var blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {number} Not sure what this returns exactly. :-).\r\n     */\r\n    LLRBNode.prototype.check_ = function () {\r\n        var blackDepth;\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    };\r\n    LLRBNode.RED = true;\r\n    LLRBNode.BLACK = false;\r\n    return LLRBNode;\r\n}());\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nvar LLRBEmptyNode = /** @class */ (function () {\r\n    function LLRBEmptyNode() {\r\n    }\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @return {!LLRBEmptyNode} The node copy.\r\n     */\r\n    LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\r\n        return this;\r\n    };\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param {!K} key Key to be added.\r\n     * @param {!V} value Value to be added.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode} New tree, with item added.\r\n     */\r\n    LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    };\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param {!K} key The key to remove.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBEmptyNode} New tree, with item removed.\r\n     */\r\n    LLRBEmptyNode.prototype.remove = function (key, comparator) {\r\n        return this;\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the tree.\r\n     */\r\n    LLRBEmptyNode.prototype.count = function () {\r\n        return 0;\r\n    };\r\n    /**\r\n     * @return {boolean} True if the tree is empty.\r\n     */\r\n    LLRBEmptyNode.prototype.isEmpty = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {boolean} True if traversal was aborted.\r\n     */\r\n    LLRBEmptyNode.prototype.inorderTraversal = function (action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V)} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {boolean} True if traversal was aborted.\r\n     */\r\n    LLRBEmptyNode.prototype.reverseTraversal = function (action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * @return {null}\r\n     */\r\n    LLRBEmptyNode.prototype.minKey = function () {\r\n        return null;\r\n    };\r\n    /**\r\n     * @return {null}\r\n     */\r\n    LLRBEmptyNode.prototype.maxKey = function () {\r\n        return null;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {number} Not sure what this returns exactly. :-).\r\n     */\r\n    LLRBEmptyNode.prototype.check_ = function () {\r\n        return 0;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {boolean} Whether this node is red.\r\n     */\r\n    LLRBEmptyNode.prototype.isRed_ = function () {\r\n        return false;\r\n    };\r\n    return LLRBEmptyNode;\r\n}());\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nvar SortedMap = /** @class */ (function () {\r\n    /**\r\n     * @template K, V\r\n     * @param {function(K, K):number} comparator_ Key comparator.\r\n     * @param {LLRBNode=} root_ (Optional) Root node for the map.\r\n     */\r\n    function SortedMap(comparator_, root_) {\r\n        if (root_ === void 0) { root_ = SortedMap.EMPTY_NODE; }\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param {!K} key Key to be added.\r\n     * @param {!V} value Value to be added.\r\n     * @return {!SortedMap.<K, V>} New map, with item added.\r\n     */\r\n    SortedMap.prototype.insert = function (key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    };\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param {!K} key The key to remove.\r\n     * @return {!SortedMap.<K, V>} New map, with item removed.\r\n     */\r\n    SortedMap.prototype.remove = function (key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    };\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param {!K} key The key to look up.\r\n     * @return {?V} The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    SortedMap.prototype.get = function (key) {\r\n        var cmp;\r\n        var node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param {K} key The key to find the predecessor of\r\n     * @return {?K} The predecessor key.\r\n     */\r\n    SortedMap.prototype.getPredecessorKey = function (key) {\r\n        var cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty())\r\n                        node = node.right;\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    };\r\n    /**\r\n     * @return {boolean} True if the map is empty.\r\n     */\r\n    SortedMap.prototype.isEmpty = function () {\r\n        return this.root_.isEmpty();\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the map.\r\n     */\r\n    SortedMap.prototype.count = function () {\r\n        return this.root_.count();\r\n    };\r\n    /**\r\n     * @return {?K} The minimum key in the map.\r\n     */\r\n    SortedMap.prototype.minKey = function () {\r\n        return this.root_.minKey();\r\n    };\r\n    /**\r\n     * @return {?K} The maximum key in the map.\r\n     */\r\n    SortedMap.prototype.maxKey = function () {\r\n        return this.root_.maxKey();\r\n    };\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @return {*} The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    SortedMap.prototype.inorderTraversal = function (action) {\r\n        return this.root_.inorderTraversal(action);\r\n    };\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param {function(!Object, !Object)} action Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @return {*} True if the traversal was aborted.\r\n     */\r\n    SortedMap.prototype.reverseTraversal = function (action) {\r\n        return this.root_.reverseTraversal(action);\r\n    };\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @template T\r\n     * @param {(function(K, V):T)=} resultGenerator\r\n     * @return {SortedMapIterator.<K, V, T>} The iterator.\r\n     */\r\n    SortedMap.prototype.getIterator = function (resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getReverseIterator = function (resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    };\r\n    /**\r\n     * Always use the same empty node, to reduce memory.\r\n     * @const\r\n     */\r\n    SortedMap.EMPTY_NODE = new LLRBEmptyNode();\r\n    return SortedMap;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar LOG_2 = Math.log(2);\r\n/**\r\n * @constructor\r\n */\r\nvar Base12Num = /** @class */ (function () {\r\n    /**\r\n     * @param {number} length\r\n     */\r\n    function Base12Num(length) {\r\n        var logBase2 = function (num) {\r\n            return parseInt((Math.log(num) / LOG_2), 10);\r\n        };\r\n        var bitMask = function (bits) { return parseInt(Array(bits + 1).join('1'), 2); };\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        var mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    Base12Num.prototype.nextBitIsOne = function () {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        var result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    };\r\n    return Base12Num;\r\n}());\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @template K, V\r\n * @param {Array.<!NamedNode>} childList Unsorted list of children\r\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\r\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\r\n *                                                        type is not NamedNode\r\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\r\n * @return {SortedMap.<K, V>}\r\n */\r\nvar buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    var buildBalancedTree = function (low, high) {\r\n        var length = high - low;\r\n        var namedNode;\r\n        var key;\r\n        if (length == 0) {\r\n            return null;\r\n        }\r\n        else if (length == 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            var middle = parseInt((length / 2), 10) + low;\r\n            var left = buildBalancedTree(low, middle);\r\n            var right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    var buildFrom12Array = function (base12) {\r\n        var node = null;\r\n        var root = null;\r\n        var index = childList.length;\r\n        var buildPennant = function (chunkSize, color) {\r\n            var low = index - chunkSize;\r\n            var high = index;\r\n            index -= chunkSize;\r\n            var childTree = buildBalancedTree(low + 1, high);\r\n            var namedNode = childList[low];\r\n            var key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        var attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (var i = 0; i < base12.count; ++i) {\r\n            var isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            var chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    var base12 = new Base12Num(childList.length);\r\n    var root = buildFrom12Array(base12);\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar _defaultIndexMap;\r\nvar fallbackObject = {};\r\n/**\r\n *\r\n * @param {Object.<string, FallbackType|SortedMap.<NamedNode, Node>>} indexes\r\n * @param {Object.<string, Index>} indexSet\r\n * @constructor\r\n */\r\nvar IndexMap = /** @class */ (function () {\r\n    function IndexMap(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    Object.defineProperty(IndexMap, \"Default\", {\r\n        /**\r\n         * The default IndexMap for nodes without a priority\r\n         * @type {!IndexMap}\r\n         * @const\r\n         */\r\n        get: function () {\r\n            util.assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n            _defaultIndexMap =\r\n                _defaultIndexMap ||\r\n                    new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n            return _defaultIndexMap;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     *\r\n     * @param {!string} indexKey\r\n     * @return {?SortedMap.<NamedNode, Node>}\r\n     */\r\n    IndexMap.prototype.get = function (indexKey) {\r\n        var sortedMap = util.safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap)\r\n            throw new Error('No index defined for ' + indexKey);\r\n        if (sortedMap === fallbackObject) {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n        else {\r\n            return sortedMap;\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {boolean}\r\n     */\r\n    IndexMap.prototype.hasIndex = function (indexDefinition) {\r\n        return util.contains(this.indexSet_, indexDefinition.toString());\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @param {!SortedMap.<string, !Node>} existingChildren\r\n     * @return {!IndexMap}\r\n     */\r\n    IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {\r\n        util.assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        var childList = [];\r\n        var sawIndexedValue = false;\r\n        var iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        var next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        var newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        var indexName = indexDefinition.toString();\r\n        var newIndexSet = util.clone(this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        var newIndexes = util.clone(this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    };\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     * @param {!NamedNode} namedNode\r\n     * @param {!SortedMap.<string, !Node>} existingChildren\r\n     * @return {!IndexMap}\r\n     */\r\n    IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {\r\n        var _this = this;\r\n        var newIndexes = util.map(this.indexes_, function (indexedChildren, indexName) {\r\n            var index = util.safeGet(_this.indexSet_, indexName);\r\n            util.assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    var childList = [];\r\n                    var iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    var next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name != namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                var existingSnap = existingChildren.get(namedNode.name);\r\n                var newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    };\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     * @param {!NamedNode} namedNode\r\n     * @param {!SortedMap.<string, !Node>} existingChildren\r\n     * @return {!IndexMap}\r\n     */\r\n    IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {\r\n        var newIndexes = util.map(this.indexes_, function (indexedChildren) {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                var existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    };\r\n    return IndexMap;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nvar EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n *\r\n * @constructor\r\n * @implements {Node}\r\n */\r\nvar ChildrenNode = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!SortedMap.<string, !Node>} children_ List of children\r\n     * of this node..\r\n     * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).\r\n     * @param {!IndexMap} indexMap_\r\n     */\r\n    function ChildrenNode(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            util.assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    Object.defineProperty(ChildrenNode, \"EMPTY_NODE\", {\r\n        get: function () {\r\n            return (EMPTY_NODE ||\r\n                (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.isLeafNode = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getPriority = function () {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updatePriority = function (newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getImmediateChild = function (childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            var child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getChild = function (path) {\r\n        var front = path.getFront();\r\n        if (front === null)\r\n            return this;\r\n        return this.getImmediateChild(front).getChild(path.popFront());\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.hasChild = function (childName) {\r\n        return this.children_.get(childName) !== null;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {\r\n        util.assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            var namedNode = new NamedNode(childName, newChildNode);\r\n            var newChildren = void 0, newIndexMap = void 0, newPriority = void 0;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updateChild = function (path, newChildNode) {\r\n        var front = path.getFront();\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            util.assert(path.getFront() !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\r\n            var newImmediateChild = this.getImmediateChild(front).updateChild(path.popFront(), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.isEmpty = function () {\r\n        return this.children_.isEmpty();\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.numChildren = function () {\r\n        return this.children_.count();\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.val = function (exportFormat) {\r\n        if (this.isEmpty())\r\n            return null;\r\n        var obj = {};\r\n        var numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            var array = [];\r\n            for (var key in obj)\r\n                array[key] = obj[key];\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.hash = function () {\r\n        if (this.lazyHash_ === null) {\r\n            var toHash_1 = '';\r\n            if (!this.getPriority().isEmpty())\r\n                toHash_1 +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                var childHash = childNode.hash();\r\n                if (childHash !== '')\r\n                    toHash_1 += ':' + key + ':' + childHash;\r\n            });\r\n            this.lazyHash_ = toHash_1 === '' ? '' : sha1(toHash_1);\r\n        }\r\n        return this.lazyHash_;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {\r\n        var idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            var predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?string}\r\n     */\r\n    ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            var minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?NamedNode}\r\n     */\r\n    ChildrenNode.prototype.getFirstChild = function (indexDefinition) {\r\n        var minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     * @param {!Index} indexDefinition\r\n     * @return {?string}\r\n     */\r\n    ChildrenNode.prototype.getLastChildName = function (indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            var maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?NamedNode}\r\n     */\r\n    ChildrenNode.prototype.getLastChild = function (indexDefinition) {\r\n        var maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.forEachChild = function (index, action) {\r\n        var idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(function (wrappedNode) {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getIterator = function (indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    };\r\n    /**\r\n     *\r\n     * @param {!NamedNode} startPost\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, function (key) { return key; });\r\n        }\r\n        else {\r\n            var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            var next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    };\r\n    /**\r\n     * @param {!NamedNode} endPost\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, function (key) {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            var next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.compareTo = function (other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE$2) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.withIndex = function (indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.isIndexed = function (index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.equals = function (other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            var otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                var thisIter = this.getIterator(PRIORITY_INDEX);\r\n                var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                var thisCurrent = thisIter.getNext();\r\n                var otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     * @private\r\n     * @param {!Index} indexDefinition\r\n     * @return {?SortedMap.<NamedNode, Node>}\r\n     */\r\n    ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    };\r\n    /**\r\n     * @private\r\n     * @type {RegExp}\r\n     */\r\n    ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\n    return ChildrenNode;\r\n}());\r\n/**\r\n * @constructor\r\n * @extends {ChildrenNode}\r\n * @private\r\n */\r\nvar MaxNode = /** @class */ (function (_super) {\r\n    tslib_1.__extends(MaxNode, _super);\r\n    function MaxNode() {\r\n        return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default) || this;\r\n    }\r\n    MaxNode.prototype.compareTo = function (other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    };\r\n    MaxNode.prototype.equals = function (other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    };\r\n    MaxNode.prototype.getPriority = function () {\r\n        return this;\r\n    };\r\n    MaxNode.prototype.getImmediateChild = function (childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    };\r\n    MaxNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    return MaxNode;\r\n}(ChildrenNode));\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n * @type {!MAX_NODE}\r\n * @const\r\n */\r\nvar MAX_NODE$2 = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE$2)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode(MAX_NODE$2);\r\nsetMaxNode$1(MAX_NODE$2);\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param {*} json JSON to create a node for.\r\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n * @return {!Node}\r\n */\r\nfunction nodeFromJSON$1(json, priority) {\r\n    if (priority === void 0) { priority = null; }\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    util.assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        var jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON$1(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        var children_1 = [];\r\n        var childrenHavePriority_1 = false;\r\n        var hinzeJsonObj_1 = json;\r\n        util.forEach(hinzeJsonObj_1, function (key, child) {\r\n            if (typeof key !== 'string' || key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                var childNode = nodeFromJSON$1(hinzeJsonObj_1[key]);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority_1 =\r\n                        childrenHavePriority_1 || !childNode.getPriority().isEmpty();\r\n                    children_1.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children_1.length == 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function (namedNode) { return namedNode.name; }, NAME_COMPARATOR);\r\n        if (childrenHavePriority_1) {\r\n            var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON$1(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON$1(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        var node_1 = ChildrenNode.EMPTY_NODE;\r\n        var jsonObj_1 = json;\r\n        util.forEach(jsonObj_1, function (key, childData) {\r\n            if (util.contains(jsonObj_1, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    var childNode = nodeFromJSON$1(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty())\r\n                        node_1 = node_1.updateImmediateChild(key, childNode);\r\n                }\r\n            }\r\n        });\r\n        return node_1.updatePriority(nodeFromJSON$1(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON$1);\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\r\nvar ValueIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ValueIndex, _super);\r\n    function ValueIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.compare = function (a, b) {\r\n        var indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.isDefinedOn = function (node) {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.maxPost = function () {\r\n        return NamedNode.MAX;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    ValueIndex.prototype.makePost = function (indexValue, name) {\r\n        var valueNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    ValueIndex.prototype.toString = function () {\r\n        return '.value';\r\n    };\r\n    return ValueIndex;\r\n}(Index));\r\nvar VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!Path} indexPath\r\n * @constructor\r\n * @extends {Index}\r\n */\r\nvar PathIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PathIndex, _super);\r\n    function PathIndex(indexPath_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.indexPath_ = indexPath_;\r\n        util.assert(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {!Node} snap\r\n     * @return {!Node}\r\n     * @protected\r\n     */\r\n    PathIndex.prototype.extractChild = function (snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.isDefinedOn = function (node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.compare = function (a, b) {\r\n        var aChild = this.extractChild(a.node);\r\n        var bChild = this.extractChild(b.node);\r\n        var indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.makePost = function (indexValue, name) {\r\n        var valueNode = nodeFromJSON$1(indexValue);\r\n        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.maxPost = function () {\r\n        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE$2);\r\n        return new NamedNode(MAX_NAME, node);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.toString = function () {\r\n        return this.indexPath_.slice().join('/');\r\n    };\r\n    return PathIndex;\r\n}(Index));\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\r\n * surfaces the public methods (val, forEach, etc.) we want to expose.\r\n */\r\nvar DataSnapshot = /** @class */ (function () {\r\n    /**\r\n     * @param {!Node} node_ A SnapshotNode to wrap.\r\n     * @param {!Reference} ref_ The ref of the location this snapshot came from.\r\n     * @param {!Index} index_ The iteration order for this snapshot\r\n     */\r\n    function DataSnapshot(node_, ref_, index_) {\r\n        this.node_ = node_;\r\n        this.ref_ = ref_;\r\n        this.index_ = index_;\r\n    }\r\n    /**\r\n     * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\r\n     * empty.\r\n     *\r\n     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    DataSnapshot.prototype.val = function () {\r\n        util.validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\r\n        return this.node_.val();\r\n    };\r\n    /**\r\n     * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\r\n     * the entire node contents.\r\n     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    DataSnapshot.prototype.exportVal = function () {\r\n        util.validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\r\n        return this.node_.val(true);\r\n    };\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    DataSnapshot.prototype.toJSON = function () {\r\n        // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\r\n        util.validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\r\n        return this.exportVal();\r\n    };\r\n    /**\r\n     * Returns whether the snapshot contains a non-null value.\r\n     *\r\n     * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\r\n     */\r\n    DataSnapshot.prototype.exists = function () {\r\n        util.validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\r\n        return !this.node_.isEmpty();\r\n    };\r\n    /**\r\n     * Returns a DataSnapshot of the specified child node's contents.\r\n     *\r\n     * @param {!string} childPathString Path to a child.\r\n     * @return {!DataSnapshot} DataSnapshot for child node.\r\n     */\r\n    DataSnapshot.prototype.child = function (childPathString) {\r\n        util.validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\r\n        // Ensure the childPath is a string (can be a number)\r\n        childPathString = String(childPathString);\r\n        validatePathString('DataSnapshot.child', 1, childPathString, false);\r\n        var childPath = new Path(childPathString);\r\n        var childRef = this.ref_.child(childPath);\r\n        return new DataSnapshot(this.node_.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    };\r\n    /**\r\n     * Returns whether the snapshot contains a child at the specified path.\r\n     *\r\n     * @param {!string} childPathString Path to a child.\r\n     * @return {boolean} Whether the child exists.\r\n     */\r\n    DataSnapshot.prototype.hasChild = function (childPathString) {\r\n        util.validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\r\n        validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\r\n        var childPath = new Path(childPathString);\r\n        return !this.node_.getChild(childPath).isEmpty();\r\n    };\r\n    /**\r\n     * Returns the priority of the object, or null if no priority was set.\r\n     *\r\n     * @return {string|number|null} The priority.\r\n     */\r\n    DataSnapshot.prototype.getPriority = function () {\r\n        util.validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this.node_.getPriority().val();\r\n    };\r\n    /**\r\n     * Iterates through child nodes and calls the specified action for each one.\r\n     *\r\n     * @param {function(!DataSnapshot)} action Callback function to be called\r\n     * for each child.\r\n     * @return {boolean} True if forEach was canceled by action returning true for\r\n     * one of the child nodes.\r\n     */\r\n    DataSnapshot.prototype.forEach = function (action) {\r\n        var _this = this;\r\n        util.validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\r\n        util.validateCallback('DataSnapshot.forEach', 1, action, false);\r\n        if (this.node_.isLeafNode())\r\n            return false;\r\n        var childrenNode = this.node_;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this.index_, function (key, node) {\r\n            return action(new DataSnapshot(node, _this.ref_.child(key), PRIORITY_INDEX));\r\n        });\r\n    };\r\n    /**\r\n     * Returns whether this DataSnapshot has children.\r\n     * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\r\n     */\r\n    DataSnapshot.prototype.hasChildren = function () {\r\n        util.validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\r\n        if (this.node_.isLeafNode())\r\n            return false;\r\n        else\r\n            return !this.node_.isEmpty();\r\n    };\r\n    Object.defineProperty(DataSnapshot.prototype, \"key\", {\r\n        get: function () {\r\n            return this.ref_.getKey();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns the number of children for this DataSnapshot.\r\n     * @return {number} The number of children that this DataSnapshot contains.\r\n     */\r\n    DataSnapshot.prototype.numChildren = function () {\r\n        util.validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\r\n        return this.node_.numChildren();\r\n    };\r\n    /**\r\n     * @return {Reference} The Firebase reference for the location this snapshot's data came from.\r\n     */\r\n    DataSnapshot.prototype.getRef = function () {\r\n        util.validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\r\n        return this.ref_;\r\n    };\r\n    Object.defineProperty(DataSnapshot.prototype, \"ref\", {\r\n        get: function () {\r\n            return this.getRef();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DataSnapshot;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n * @implements {Event}\r\n */\r\nvar DataEvent = /** @class */ (function () {\r\n    /**\r\n     * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided\r\n     * @param {!DataSnapshot} snapshot The data backing the event\r\n     * @param {?string=} prevName Optional, the name of the previous child for child_* events.\r\n     */\r\n    function DataEvent(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getPath = function () {\r\n        var ref = this.snapshot.getRef();\r\n        if (this.eventType === 'value') {\r\n            return ref.path;\r\n        }\r\n        else {\r\n            return ref.getParent().path;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getEventType = function () {\r\n        return this.eventType;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getEventRunner = function () {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.toString = function () {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            util.stringify(this.snapshot.exportVal()));\r\n    };\r\n    return DataEvent;\r\n}());\r\nvar CancelEvent = /** @class */ (function () {\r\n    /**\r\n     * @param {EventRegistration} eventRegistration\r\n     * @param {Error} error\r\n     * @param {!Path} path\r\n     */\r\n    function CancelEvent(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getPath = function () {\r\n        return this.path;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getEventType = function () {\r\n        return 'cancel';\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getEventRunner = function () {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.toString = function () {\r\n        return this.path.toString() + ':cancel';\r\n    };\r\n    return CancelEvent;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nvar ValueEventRegistration = /** @class */ (function () {\r\n    /**\r\n     * @param {?function(!DataSnapshot)} callback_\r\n     * @param {?function(Error)} cancelCallback_\r\n     * @param {?Object} context_\r\n     */\r\n    function ValueEventRegistration(callback_, cancelCallback_, context_) {\r\n        this.callback_ = callback_;\r\n        this.cancelCallback_ = cancelCallback_;\r\n        this.context_ = context_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.respondsTo = function (eventType) {\r\n        return eventType === 'value';\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.createEvent = function (change, query) {\r\n        var index = query.getQueryParams().getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, query.getRef(), index));\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.getEventRunner = function (eventData) {\r\n        var ctx = this.context_;\r\n        if (eventData.getEventType() === 'cancel') {\r\n            util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\r\n            var cancelCB_1 = this.cancelCallback_;\r\n            return function () {\r\n                // We know that error exists, we checked above that this is a cancel event\r\n                cancelCB_1.call(ctx, eventData.error);\r\n            };\r\n        }\r\n        else {\r\n            var cb_1 = this.callback_;\r\n            return function () {\r\n                cb_1.call(ctx, eventData.snapshot);\r\n            };\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.createCancelEvent = function (error, path) {\r\n        if (this.cancelCallback_) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.matches = function (other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callback_ || !this.callback_) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return (other.callback_ === this.callback_ && other.context_ === this.context_);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.hasAnyCallback = function () {\r\n        return this.callback_ !== null;\r\n    };\r\n    return ValueEventRegistration;\r\n}());\r\n/**\r\n * Represents the registration of 1 or more child_xxx events.\r\n *\r\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\r\n * register a group of callbacks together in the future.\r\n *\r\n * @constructor\r\n * @implements {EventRegistration}\r\n */\r\nvar ChildEventRegistration = /** @class */ (function () {\r\n    /**\r\n     * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_\r\n     * @param {?function(Error)} cancelCallback_\r\n     * @param {Object=} context_\r\n     */\r\n    function ChildEventRegistration(callbacks_, cancelCallback_, context_) {\r\n        this.callbacks_ = callbacks_;\r\n        this.cancelCallback_ = cancelCallback_;\r\n        this.context_ = context_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.respondsTo = function (eventType) {\r\n        var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return util.contains(this.callbacks_, eventToCheck);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.createCancelEvent = function (error, path) {\r\n        if (this.cancelCallback_) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.createEvent = function (change, query) {\r\n        util.assert(change.childName != null, 'Child events should have a childName.');\r\n        var ref = query.getRef().child(/** @type {!string} */ (change.childName));\r\n        var index = query.getQueryParams().getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, ref, index), change.prevName);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.getEventRunner = function (eventData) {\r\n        var ctx = this.context_;\r\n        if (eventData.getEventType() === 'cancel') {\r\n            util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\r\n            var cancelCB_2 = this.cancelCallback_;\r\n            return function () {\r\n                // We know that error exists, we checked above that this is a cancel event\r\n                cancelCB_2.call(ctx, eventData.error);\r\n            };\r\n        }\r\n        else {\r\n            var cb_2 = this.callbacks_[eventData.eventType];\r\n            return function () {\r\n                cb_2.call(ctx, eventData.snapshot, eventData.prevName);\r\n            };\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.matches = function (other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            if (!this.callbacks_ || !other.callbacks_) {\r\n                return true;\r\n            }\r\n            else if (this.context_ === other.context_) {\r\n                var otherCount = util.getCount(other.callbacks_);\r\n                var thisCount = util.getCount(this.callbacks_);\r\n                if (otherCount === thisCount) {\r\n                    // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\r\n                    //  If event types don't match, not a match\r\n                    // If count is not 1, exact match across all\r\n                    if (otherCount === 1) {\r\n                        var otherKey /** @type {!string} */ = util.getAnyKey(other.callbacks_);\r\n                        var thisKey /** @type {!string} */ = util.getAnyKey(this.callbacks_);\r\n                        return (thisKey === otherKey &&\r\n                            (!other.callbacks_[otherKey] ||\r\n                                !this.callbacks_[thisKey] ||\r\n                                other.callbacks_[otherKey] === this.callbacks_[thisKey]));\r\n                    }\r\n                    else {\r\n                        // Exact match on each key.\r\n                        return util.every(this.callbacks_, function (eventType, cb) { return other.callbacks_[eventType] === cb; });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.hasAnyCallback = function () {\r\n        return this.callbacks_ !== null;\r\n    };\r\n    return ChildEventRegistration;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __referenceConstructor;\r\n/**\r\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\r\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\r\n *\r\n * Since every Firebase reference is a query, Firebase inherits from this object.\r\n */\r\nvar Query = /** @class */ (function () {\r\n    function Query(repo, path, queryParams_, orderByCalled_) {\r\n        this.repo = repo;\r\n        this.path = path;\r\n        this.queryParams_ = queryParams_;\r\n        this.orderByCalled_ = orderByCalled_;\r\n    }\r\n    Object.defineProperty(Query, \"__referenceConstructor\", {\r\n        get: function () {\r\n            util.assert(__referenceConstructor, 'Reference.ts has not been loaded');\r\n            return __referenceConstructor;\r\n        },\r\n        set: function (val) {\r\n            __referenceConstructor = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Validates start/end values for queries.\r\n     * @param {!QueryParams} params\r\n     * @private\r\n     */\r\n    Query.validateQueryEndpoints_ = function (params) {\r\n        var startNode = null;\r\n        var endNode = null;\r\n        if (params.hasStart()) {\r\n            startNode = params.getIndexStartValue();\r\n        }\r\n        if (params.hasEnd()) {\r\n            endNode = params.getIndexEndValue();\r\n        }\r\n        if (params.getIndex() === KEY_INDEX) {\r\n            var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n                'startAt(), endAt(), or equalTo().';\r\n            var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), endAt(),' +\r\n                'or equalTo() must be a string.';\r\n            if (params.hasStart()) {\r\n                var startName = params.getIndexStartName();\r\n                if (startName != MIN_NAME) {\r\n                    throw new Error(tooManyArgsError);\r\n                }\r\n                else if (typeof startNode !== 'string') {\r\n                    throw new Error(wrongArgTypeError);\r\n                }\r\n            }\r\n            if (params.hasEnd()) {\r\n                var endName = params.getIndexEndName();\r\n                if (endName != MAX_NAME) {\r\n                    throw new Error(tooManyArgsError);\r\n                }\r\n                else if (typeof endNode !== 'string') {\r\n                    throw new Error(wrongArgTypeError);\r\n                }\r\n            }\r\n        }\r\n        else if (params.getIndex() === PRIORITY_INDEX) {\r\n            if ((startNode != null && !isValidPriority(startNode)) ||\r\n                (endNode != null && !isValidPriority(endNode))) {\r\n                throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                    'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).');\r\n            }\r\n        }\r\n        else {\r\n            util.assert(params.getIndex() instanceof PathIndex ||\r\n                params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n            if ((startNode != null && typeof startNode === 'object') ||\r\n                (endNode != null && typeof endNode === 'object')) {\r\n                throw new Error('Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' +\r\n                    'an object.');\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Validates that limit* has been called with the correct combination of parameters\r\n     * @param {!QueryParams} params\r\n     * @private\r\n     */\r\n    Query.validateLimit_ = function (params) {\r\n        if (params.hasStart() &&\r\n            params.hasEnd() &&\r\n            params.hasLimit() &&\r\n            !params.hasAnchoredLimit()) {\r\n            throw new Error(\"Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.\");\r\n        }\r\n    };\r\n    /**\r\n     * Validates that no other order by call has been made\r\n     * @param {!string} fnName\r\n     * @private\r\n     */\r\n    Query.prototype.validateNoPreviousOrderByCall_ = function (fnName) {\r\n        if (this.orderByCalled_ === true) {\r\n            throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n        }\r\n    };\r\n    /**\r\n     * @return {!QueryParams}\r\n     */\r\n    Query.prototype.getQueryParams = function () {\r\n        return this.queryParams_;\r\n    };\r\n    /**\r\n     * @return {!Reference}\r\n     */\r\n    Query.prototype.getRef = function () {\r\n        util.validateArgCount('Query.ref', 0, 0, arguments.length);\r\n        // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\r\n        // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\r\n        // method gets called.\r\n        return new Query.__referenceConstructor(this.repo, this.path);\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @param {!function(DataSnapshot, string=)} callback\r\n     * @param {(function(Error)|Object)=} cancelCallbackOrContext\r\n     * @param {Object=} context\r\n     * @return {!function(DataSnapshot, string=)}\r\n     */\r\n    Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {\r\n        util.validateArgCount('Query.on', 2, 4, arguments.length);\r\n        validateEventType('Query.on', 1, eventType, false);\r\n        util.validateCallback('Query.on', 2, callback, false);\r\n        var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);\r\n        if (eventType === 'value') {\r\n            this.onValueEvent(callback, ret.cancel, ret.context);\r\n        }\r\n        else {\r\n            var callbacks = {};\r\n            callbacks[eventType] = callback;\r\n            this.onChildEvent(callbacks, ret.cancel, ret.context);\r\n        }\r\n        return callback;\r\n    };\r\n    /**\r\n     * @param {!function(!DataSnapshot)} callback\r\n     * @param {?function(Error)} cancelCallback\r\n     * @param {?Object} context\r\n     * @protected\r\n     */\r\n    Query.prototype.onValueEvent = function (callback, cancelCallback, context) {\r\n        var container = new ValueEventRegistration(callback, cancelCallback || null, context || null);\r\n        this.repo.addEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks\r\n     * @param {?function(Error)} cancelCallback\r\n     * @param {?Object} context\r\n     * @protected\r\n     */\r\n    Query.prototype.onChildEvent = function (callbacks, cancelCallback, context) {\r\n        var container = new ChildEventRegistration(callbacks, cancelCallback, context);\r\n        this.repo.addEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * @param {string=} eventType\r\n     * @param {(function(!DataSnapshot, ?string=))=} callback\r\n     * @param {Object=} context\r\n     */\r\n    Query.prototype.off = function (eventType, callback, context) {\r\n        util.validateArgCount('Query.off', 0, 3, arguments.length);\r\n        validateEventType('Query.off', 1, eventType, true);\r\n        util.validateCallback('Query.off', 2, callback, true);\r\n        util.validateContextObject('Query.off', 3, context, true);\r\n        var container = null;\r\n        var callbacks = null;\r\n        if (eventType === 'value') {\r\n            var valueCallback = callback || null;\r\n            container = new ValueEventRegistration(valueCallback, null, context || null);\r\n        }\r\n        else if (eventType) {\r\n            if (callback) {\r\n                callbacks = {};\r\n                callbacks[eventType] = callback;\r\n            }\r\n            container = new ChildEventRegistration(callbacks, null, context || null);\r\n        }\r\n        this.repo.removeEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * Attaches a listener, waits for the first event, and then removes the listener\r\n     * @param {!string} eventType\r\n     * @param {!function(!DataSnapshot, string=)} userCallback\r\n     * @param cancelOrContext\r\n     * @param context\r\n     * @return {!firebase.Promise}\r\n     */\r\n    Query.prototype.once = function (eventType, userCallback, cancelOrContext, context) {\r\n        var _this = this;\r\n        util.validateArgCount('Query.once', 1, 4, arguments.length);\r\n        validateEventType('Query.once', 1, eventType, false);\r\n        util.validateCallback('Query.once', 2, userCallback, true);\r\n        var ret = Query.getCancelAndContextArgs_('Query.once', cancelOrContext, context);\r\n        // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\r\n        // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\r\n        // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\r\n        // against the Promise specification.\r\n        var firstCall = true;\r\n        var deferred = new util.Deferred();\r\n        // A dummy error handler in case a user wasn't expecting promises\r\n        deferred.promise.catch(function () { });\r\n        var onceCallback = function (snapshot) {\r\n            // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\r\n            // triggers multiple events (e.g. child_added or child_changed).\r\n            if (firstCall) {\r\n                firstCall = false;\r\n                _this.off(eventType, onceCallback);\r\n                if (userCallback) {\r\n                    userCallback.bind(ret.context)(snapshot);\r\n                }\r\n                deferred.resolve(snapshot);\r\n            }\r\n        };\r\n        this.on(eventType, onceCallback, \r\n        /*cancel=*/ function (err) {\r\n            _this.off(eventType, onceCallback);\r\n            if (ret.cancel)\r\n                ret.cancel.bind(ret.context)(err);\r\n            deferred.reject(err);\r\n        });\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * Set a limit and anchor it to the start of the window.\r\n     * @param {!number} limit\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.limitToFirst = function (limit) {\r\n        util.validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\r\n        if (typeof limit !== 'number' ||\r\n            Math.floor(limit) !== limit ||\r\n            limit <= 0) {\r\n            throw new Error('Query.limitToFirst: First argument must be a positive integer.');\r\n        }\r\n        if (this.queryParams_.hasLimit()) {\r\n            throw new Error('Query.limitToFirst: Limit was already set (by another call to limit, ' +\r\n                'limitToFirst, or limitToLast).');\r\n        }\r\n        return new Query(this.repo, this.path, this.queryParams_.limitToFirst(limit), this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Set a limit and anchor it to the end of the window.\r\n     * @param {!number} limit\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.limitToLast = function (limit) {\r\n        util.validateArgCount('Query.limitToLast', 1, 1, arguments.length);\r\n        if (typeof limit !== 'number' ||\r\n            Math.floor(limit) !== limit ||\r\n            limit <= 0) {\r\n            throw new Error('Query.limitToLast: First argument must be a positive integer.');\r\n        }\r\n        if (this.queryParams_.hasLimit()) {\r\n            throw new Error('Query.limitToLast: Limit was already set (by another call to limit, ' +\r\n                'limitToFirst, or limitToLast).');\r\n        }\r\n        return new Query(this.repo, this.path, this.queryParams_.limitToLast(limit), this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Given a child path, return a new query ordered by the specified grandchild path.\r\n     * @param {!string} path\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByChild = function (path) {\r\n        util.validateArgCount('Query.orderByChild', 1, 1, arguments.length);\r\n        if (path === '$key') {\r\n            throw new Error('Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.');\r\n        }\r\n        else if (path === '$priority') {\r\n            throw new Error('Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.');\r\n        }\r\n        else if (path === '$value') {\r\n            throw new Error('Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.');\r\n        }\r\n        validatePathString('Query.orderByChild', 1, path, false);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByChild');\r\n        var parsedPath = new Path(path);\r\n        if (parsedPath.isEmpty()) {\r\n            throw new Error('Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.');\r\n        }\r\n        var index = new PathIndex(parsedPath);\r\n        var newParams = this.queryParams_.orderBy(index);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the KeyIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByKey = function () {\r\n        util.validateArgCount('Query.orderByKey', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByKey');\r\n        var newParams = this.queryParams_.orderBy(KEY_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the PriorityIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByPriority = function () {\r\n        util.validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByPriority');\r\n        var newParams = this.queryParams_.orderBy(PRIORITY_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the ValueIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByValue = function () {\r\n        util.validateArgCount('Query.orderByValue', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByValue');\r\n        var newParams = this.queryParams_.orderBy(VALUE_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * @param {number|string|boolean|null} value\r\n     * @param {?string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.startAt = function (value, name) {\r\n        if (value === void 0) { value = null; }\r\n        util.validateArgCount('Query.startAt', 0, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\r\n        validateKey('Query.startAt', 2, name, true);\r\n        var newParams = this.queryParams_.startAt(value, name);\r\n        Query.validateLimit_(newParams);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        if (this.queryParams_.hasStart()) {\r\n            throw new Error('Query.startAt: Starting point was already set (by another call to startAt ' +\r\n                'or equalTo).');\r\n        }\r\n        // Calling with no params tells us to start at the beginning.\r\n        if (value === undefined) {\r\n            value = null;\r\n            name = null;\r\n        }\r\n        return new Query(this.repo, this.path, newParams, this.orderByCalled_);\r\n    };\r\n    /**\r\n     * @param {number|string|boolean|null} value\r\n     * @param {?string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.endAt = function (value, name) {\r\n        if (value === void 0) { value = null; }\r\n        util.validateArgCount('Query.endAt', 0, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\r\n        validateKey('Query.endAt', 2, name, true);\r\n        var newParams = this.queryParams_.endAt(value, name);\r\n        Query.validateLimit_(newParams);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        if (this.queryParams_.hasEnd()) {\r\n            throw new Error('Query.endAt: Ending point was already set (by another call to endAt or ' +\r\n                'equalTo).');\r\n        }\r\n        return new Query(this.repo, this.path, newParams, this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Load the selection of children with exactly the specified value, and, optionally,\r\n     * the specified name.\r\n     * @param {number|string|boolean|null} value\r\n     * @param {string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.equalTo = function (value, name) {\r\n        util.validateArgCount('Query.equalTo', 1, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\r\n        validateKey('Query.equalTo', 2, name, true);\r\n        if (this.queryParams_.hasStart()) {\r\n            throw new Error('Query.equalTo: Starting point was already set (by another call to startAt or ' +\r\n                'equalTo).');\r\n        }\r\n        if (this.queryParams_.hasEnd()) {\r\n            throw new Error('Query.equalTo: Ending point was already set (by another call to endAt or ' +\r\n                'equalTo).');\r\n        }\r\n        return this.startAt(value, name).endAt(value, name);\r\n    };\r\n    /**\r\n     * @return {!string} URL for this location.\r\n     */\r\n    Query.prototype.toString = function () {\r\n        util.validateArgCount('Query.toString', 0, 0, arguments.length);\r\n        return this.repo.toString() + this.path.toUrlEncodedString();\r\n    };\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users.\r\n    Query.prototype.toJSON = function () {\r\n        // An optional spacer argument is unnecessary for a string.\r\n        util.validateArgCount('Query.toJSON', 0, 1, arguments.length);\r\n        return this.toString();\r\n    };\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     * @return {!Object}\r\n     */\r\n    Query.prototype.queryObject = function () {\r\n        return this.queryParams_.getQueryObject();\r\n    };\r\n    /**\r\n     * @return {!string}\r\n     */\r\n    Query.prototype.queryIdentifier = function () {\r\n        var obj = this.queryObject();\r\n        var id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    };\r\n    /**\r\n     * Return true if this query and the provided query are equivalent; otherwise, return false.\r\n     * @param {Query} other\r\n     * @return {boolean}\r\n     */\r\n    Query.prototype.isEqual = function (other) {\r\n        util.validateArgCount('Query.isEqual', 1, 1, arguments.length);\r\n        if (!(other instanceof Query)) {\r\n            var error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\r\n            throw new Error(error);\r\n        }\r\n        var sameRepo = this.repo === other.repo;\r\n        var samePath = this.path.equals(other.path);\r\n        var sameQueryIdentifier = this.queryIdentifier() === other.queryIdentifier();\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    };\r\n    /**\r\n     * Helper used by .on and .once to extract the context and or cancel arguments.\r\n     * @param {!string} fnName The function name (on or once)\r\n     * @param {(function(Error)|Object)=} cancelOrContext\r\n     * @param {Object=} context\r\n     * @return {{cancel: ?function(Error), context: ?Object}}\r\n     * @private\r\n     */\r\n    Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {\r\n        var ret = { cancel: null, context: null };\r\n        if (cancelOrContext && context) {\r\n            ret.cancel = cancelOrContext;\r\n            util.validateCallback(fnName, 3, ret.cancel, true);\r\n            ret.context = context;\r\n            util.validateContextObject(fnName, 4, ret.context, true);\r\n        }\r\n        else if (cancelOrContext) {\r\n            // we have either a cancel callback or a context.\r\n            if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\r\n                // it's a context!\r\n                ret.context = cancelOrContext;\r\n            }\r\n            else if (typeof cancelOrContext === 'function') {\r\n                ret.cancel = cancelOrContext;\r\n            }\r\n            else {\r\n                throw new Error(util.errorPrefix(fnName, 3, true) +\r\n                    ' must either be a cancel callback or a context object.');\r\n            }\r\n        }\r\n        return ret;\r\n    };\r\n    Object.defineProperty(Query.prototype, \"ref\", {\r\n        get: function () {\r\n            return this.getRef();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Query;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Implements a set with a count of elements.\r\n *\r\n * @template K, V\r\n */\r\nvar CountedSet = /** @class */ (function () {\r\n    function CountedSet() {\r\n        this.set = {};\r\n    }\r\n    /**\r\n     * @param {!K} item\r\n     * @param {V} val\r\n     */\r\n    CountedSet.prototype.add = function (item, val) {\r\n        this.set[item] = val !== null ? val : true;\r\n    };\r\n    /**\r\n     * @param {!K} key\r\n     * @return {boolean}\r\n     */\r\n    CountedSet.prototype.contains = function (key) {\r\n        return util.contains(this.set, key);\r\n    };\r\n    /**\r\n     * @param {!K} item\r\n     * @return {V}\r\n     */\r\n    CountedSet.prototype.get = function (item) {\r\n        return this.contains(item) ? this.set[item] : undefined;\r\n    };\r\n    /**\r\n     * @param {!K} item\r\n     */\r\n    CountedSet.prototype.remove = function (item) {\r\n        delete this.set[item];\r\n    };\r\n    /**\r\n     * Deletes everything in the set\r\n     */\r\n    CountedSet.prototype.clear = function () {\r\n        this.set = {};\r\n    };\r\n    /**\r\n     * True if there's nothing in the set\r\n     * @return {boolean}\r\n     */\r\n    CountedSet.prototype.isEmpty = function () {\r\n        return util.isEmpty(this.set);\r\n    };\r\n    /**\r\n     * @return {number} The number of items in the set\r\n     */\r\n    CountedSet.prototype.count = function () {\r\n        return util.getCount(this.set);\r\n    };\r\n    /**\r\n     * Run a function on each k,v pair in the set\r\n     * @param {function(K, V)} fn\r\n     */\r\n    CountedSet.prototype.each = function (fn) {\r\n        util.forEach(this.set, function (k, v) { return fn(k, v); });\r\n    };\r\n    /**\r\n     * Mostly for debugging\r\n     * @return {Array.<K>} The keys present in this CountedSet\r\n     */\r\n    CountedSet.prototype.keys = function () {\r\n        var keys = [];\r\n        util.forEach(this.set, function (k) {\r\n            keys.push(k);\r\n        });\r\n        return keys;\r\n    };\r\n    return CountedSet;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper class to store a sparse set of snapshots.\r\n *\r\n * @constructor\r\n */\r\nvar SparseSnapshotTree = /** @class */ (function () {\r\n    function SparseSnapshotTree() {\r\n        /**\r\n         * @private\r\n         * @type {Node}\r\n         */\r\n        this.value_ = null;\r\n        /**\r\n         * @private\r\n         * @type {CountedSet}\r\n         */\r\n        this.children_ = null;\r\n    }\r\n    /**\r\n     * Gets the node stored at the given path if one exists.\r\n     *\r\n     * @param {!Path} path Path to look up snapshot for.\r\n     * @return {?Node} The retrieved node, or null.\r\n     */\r\n    SparseSnapshotTree.prototype.find = function (path) {\r\n        if (this.value_ != null) {\r\n            return this.value_.getChild(path);\r\n        }\r\n        else if (!path.isEmpty() && this.children_ != null) {\r\n            var childKey = path.getFront();\r\n            path = path.popFront();\r\n            if (this.children_.contains(childKey)) {\r\n                var childTree = this.children_.get(childKey);\r\n                return childTree.find(path);\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Stores the given node at the specified path. If there is already a node\r\n     * at a shallower path, it merges the new data into that snapshot node.\r\n     *\r\n     * @param {!Path} path Path to look up snapshot for.\r\n     * @param {!Node} data The new data, or null.\r\n     */\r\n    SparseSnapshotTree.prototype.remember = function (path, data) {\r\n        if (path.isEmpty()) {\r\n            this.value_ = data;\r\n            this.children_ = null;\r\n        }\r\n        else if (this.value_ !== null) {\r\n            this.value_ = this.value_.updateChild(path, data);\r\n        }\r\n        else {\r\n            if (this.children_ == null) {\r\n                this.children_ = new CountedSet();\r\n            }\r\n            var childKey = path.getFront();\r\n            if (!this.children_.contains(childKey)) {\r\n                this.children_.add(childKey, new SparseSnapshotTree());\r\n            }\r\n            var child = this.children_.get(childKey);\r\n            path = path.popFront();\r\n            child.remember(path, data);\r\n        }\r\n    };\r\n    /**\r\n     * Purge the data at path from the cache.\r\n     *\r\n     * @param {!Path} path Path to look up snapshot for.\r\n     * @return {boolean} True if this node should now be removed.\r\n     */\r\n    SparseSnapshotTree.prototype.forget = function (path) {\r\n        if (path.isEmpty()) {\r\n            this.value_ = null;\r\n            this.children_ = null;\r\n            return true;\r\n        }\r\n        else {\r\n            if (this.value_ !== null) {\r\n                if (this.value_.isLeafNode()) {\r\n                    // We're trying to forget a node that doesn't exist\r\n                    return false;\r\n                }\r\n                else {\r\n                    var value = this.value_;\r\n                    this.value_ = null;\r\n                    var self_1 = this;\r\n                    value.forEachChild(PRIORITY_INDEX, function (key, tree) {\r\n                        self_1.remember(new Path(key), tree);\r\n                    });\r\n                    return this.forget(path);\r\n                }\r\n            }\r\n            else if (this.children_ !== null) {\r\n                var childKey = path.getFront();\r\n                path = path.popFront();\r\n                if (this.children_.contains(childKey)) {\r\n                    var safeToRemove = this.children_.get(childKey).forget(path);\r\n                    if (safeToRemove) {\r\n                        this.children_.remove(childKey);\r\n                    }\r\n                }\r\n                if (this.children_.isEmpty()) {\r\n                    this.children_ = null;\r\n                    return true;\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Recursively iterates through all of the stored tree and calls the\r\n     * callback on each one.\r\n     *\r\n     * @param {!Path} prefixPath Path to look up node for.\r\n     * @param {!Function} func The function to invoke for each tree.\r\n     */\r\n    SparseSnapshotTree.prototype.forEachTree = function (prefixPath, func) {\r\n        if (this.value_ !== null) {\r\n            func(prefixPath, this.value_);\r\n        }\r\n        else {\r\n            this.forEachChild(function (key, tree) {\r\n                var path = new Path(prefixPath.toString() + '/' + key);\r\n                tree.forEachTree(path, func);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Iterates through each immediate child and triggers the callback.\r\n     *\r\n     * @param {!Function} func The function to invoke for each child.\r\n     */\r\n    SparseSnapshotTree.prototype.forEachChild = function (func) {\r\n        if (this.children_ !== null) {\r\n            this.children_.each(function (key, tree) {\r\n                func(key, tree);\r\n            });\r\n        }\r\n    };\r\n    return SparseSnapshotTree;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Generate placeholders for deferred values.\r\n * @param {?Object} values\r\n * @return {!Object}\r\n */\r\nvar generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n * @param {(Object|string|number|boolean)} value\r\n * @param {!Object} serverValues\r\n * @return {!(string|number|boolean)}\r\n */\r\nvar resolveDeferredValue = function (value, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    else {\r\n        util.assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n        return serverValues[value['.sv']];\r\n    }\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param {!SparseSnapshotTree} tree\r\n * @param {!Object} serverValues\r\n * @return {!SparseSnapshotTree}\r\n */\r\nvar resolveDeferredValueTree = function (tree, serverValues) {\r\n    var resolvedTree = new SparseSnapshotTree();\r\n    tree.forEachTree(new Path(''), function (path, node) {\r\n        resolvedTree.remember(path, resolveDeferredValueSnapshot(node, serverValues));\r\n    });\r\n    return resolvedTree;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n * @param {!Node} node\r\n * @param {!Object} serverValues\r\n * @return {!Node}\r\n */\r\nvar resolveDeferredValueSnapshot = function (node, serverValues) {\r\n    var rawPri = node.getPriority().val();\r\n    var priority = resolveDeferredValue(rawPri, serverValues);\r\n    var newNode;\r\n    if (node.isLeafNode()) {\r\n        var leafNode = node;\r\n        var value = resolveDeferredValue(leafNode.getValue(), serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON$1(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        var childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n            var newChildNode = resolveDeferredValueSnapshot(childNode, serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\n/**\r\n * @param {boolean} fromUser\r\n * @param {boolean} fromServer\r\n * @param {?string} queryId\r\n * @param {boolean} tagged\r\n * @constructor\r\n */\r\nvar OperationSource = /** @class */ (function () {\r\n    function OperationSource(fromUser, fromServer, queryId, tagged) {\r\n        this.fromUser = fromUser;\r\n        this.fromServer = fromServer;\r\n        this.queryId = queryId;\r\n        this.tagged = tagged;\r\n        util.assert(!tagged || fromServer, 'Tagged queries must be from server.');\r\n    }\r\n    /**\r\n     * @const\r\n     * @type {!OperationSource}\r\n     */\r\n    OperationSource.User = new OperationSource(\r\n    /*fromUser=*/ true, false, null, \r\n    /*tagged=*/ false);\r\n    /**\r\n     * @const\r\n     * @type {!OperationSource}\r\n     */\r\n    OperationSource.Server = new OperationSource(false, \r\n    /*fromServer=*/ true, null, \r\n    /*tagged=*/ false);\r\n    /**\r\n     * @param {string} queryId\r\n     * @return {!OperationSource}\r\n     */\r\n    OperationSource.forServerTaggedQuery = function (queryId) {\r\n        return new OperationSource(false, \r\n        /*fromServer=*/ true, queryId, \r\n        /*tagged=*/ true);\r\n    };\r\n    return OperationSource;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar AckUserWrite = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\r\n     * @param {!boolean} revert\r\n     */\r\n    function AckUserWrite(\r\n    /**@inheritDoc */ path, \r\n    /**@inheritDoc */ affectedTree, \r\n    /**@inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = OperationSource.User;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    AckUserWrite.prototype.operationForChild = function (childName) {\r\n        if (!this.path.isEmpty()) {\r\n            util.assert(this.path.getFront() === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            util.assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            var childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(Path.Empty, childTree, this.revert);\r\n        }\r\n    };\r\n    return AckUserWrite;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n * @const\r\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\r\n */\r\nvar EmptyChildren = function () {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nvar ImmutableTree = /** @class */ (function () {\r\n    /**\r\n     * @template T\r\n     * @param {?T} value\r\n     * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\r\n     */\r\n    function ImmutableTree(value, children) {\r\n        if (children === void 0) { children = EmptyChildren(); }\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {!Object.<string, !T>} obj\r\n     * @return {!ImmutableTree.<!T>}\r\n     */\r\n    ImmutableTree.fromObject = function (obj) {\r\n        var tree = ImmutableTree.Empty;\r\n        util.forEach(obj, function (childPath, childSnap) {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    };\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     * @return {boolean}\r\n     */\r\n    ImmutableTree.prototype.isEmpty = function () {\r\n        return this.value === null && this.children.isEmpty();\r\n    };\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\r\n     * on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param {!Path} relativePath The remainder of the path\r\n     * @param {function(T):boolean} predicate The predicate to satisfy to return a\r\n     *   node\r\n     * @return {?{path:!Path, value:!T}}\r\n     */\r\n    ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: Path.Empty, value: this.value };\r\n        }\r\n        else {\r\n            if (relativePath.isEmpty()) {\r\n                return null;\r\n            }\r\n            else {\r\n                var front = relativePath.getFront();\r\n                var child = this.children.get(front);\r\n                if (child !== null) {\r\n                    var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(relativePath.popFront(), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        var fullPath = new Path(front).child(childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     * @param {!Path} relativePath\r\n     * @return {?{path: !Path, value: !T}}\r\n     */\r\n    ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, function () { return true; });\r\n    };\r\n    /**\r\n     * @param {!Path} relativePath\r\n     * @return {!ImmutableTree.<T>} The subtree at the given path\r\n     */\r\n    ImmutableTree.prototype.subtree = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(relativePath.popFront());\r\n            }\r\n            else {\r\n                return ImmutableTree.Empty;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param {!Path} relativePath Path to set value at.\r\n     * @param {?T} toSet Value to set.\r\n     * @return {!ImmutableTree.<T>} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.set = function (relativePath, toSet) {\r\n        if (relativePath.isEmpty()) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front) || ImmutableTree.Empty;\r\n            var newChild = child.set(relativePath.popFront(), toSet);\r\n            var newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    };\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param {!Path} relativePath Path to value to remove.\r\n     * @return {!ImmutableTree.<T>} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.remove = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            if (this.children.isEmpty()) {\r\n                return ImmutableTree.Empty;\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front);\r\n            if (child) {\r\n                var newChild = child.remove(relativePath.popFront());\r\n                var newChildren = void 0;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return ImmutableTree.Empty;\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param {!Path} relativePath Path to get value for.\r\n     * @return {?T} Value at path, or null.\r\n     */\r\n    ImmutableTree.prototype.get = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(relativePath.popFront());\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param {!Path} relativePath Path to replace subtree for.\r\n     * @param {!ImmutableTree} newTree New tree.\r\n     * @return {!ImmutableTree} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.setTree = function (relativePath, newTree) {\r\n        if (relativePath.isEmpty()) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front) || ImmutableTree.Empty;\r\n            var newChild = child.setTree(relativePath.popFront(), newTree);\r\n            var newChildren = void 0;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    };\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     * @template V\r\n     * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n     * @return {V}\r\n     */\r\n    ImmutableTree.prototype.fold = function (fn) {\r\n        return this.fold_(Path.Empty, fn);\r\n    };\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     * @template V\r\n     * @param {!Path} pathSoFar\r\n     * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n     * @return {V}\r\n     * @private\r\n     */\r\n    ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {\r\n        var accum = {};\r\n        this.children.inorderTraversal(function (childKey, childTree) {\r\n            accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    };\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     * @template V\r\n     * @param {!Path} path\r\n     * @param {!function(!Path, !T):?V} f\r\n     * @return {?V}\r\n     */\r\n    ImmutableTree.prototype.findOnPath = function (path, f) {\r\n        return this.findOnPath_(path, Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {\r\n        var result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathToFollow.isEmpty()) {\r\n                return null;\r\n            }\r\n            else {\r\n                var front = pathToFollow.getFront();\r\n                var nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathToFollow.popFront(), pathSoFar.child(front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!function(!Path, !T)} f\r\n     * @returns {!ImmutableTree.<T>}\r\n     */\r\n    ImmutableTree.prototype.foreachOnPath = function (path, f) {\r\n        return this.foreachOnPath_(path, Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {\r\n        if (pathToFollow.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            var front = pathToFollow.getFront();\r\n            var nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathToFollow.popFront(), currentRelativePath.child(front), f);\r\n            }\r\n            else {\r\n                return ImmutableTree.Empty;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param {function(!Path, !T)} f A function to be called with\r\n     *   the path from the root of the tree to a node, and the value at that node.\r\n     *   Called in depth-first order.\r\n     */\r\n    ImmutableTree.prototype.foreach = function (f) {\r\n        this.foreach_(Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {\r\n        this.children.inorderTraversal(function (childName, childTree) {\r\n            childTree.foreach_(currentRelativePath.child(childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {function(string, !T)} f\r\n     */\r\n    ImmutableTree.prototype.foreachChild = function (f) {\r\n        this.children.inorderTraversal(function (childName, childTree) {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    };\r\n    ImmutableTree.Empty = new ImmutableTree(null);\r\n    return ImmutableTree;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar ListenComplete = /** @class */ (function () {\r\n    function ListenComplete(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    ListenComplete.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            return new ListenComplete(this.source, Path.Empty);\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, this.path.popFront());\r\n        }\r\n    };\r\n    return ListenComplete;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!Node} snap\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar Overwrite = /** @class */ (function () {\r\n    function Overwrite(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    Overwrite.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            return new Overwrite(this.source, Path.Empty, this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, this.path.popFront(), this.snap);\r\n        }\r\n    };\r\n    return Overwrite;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!ImmutableTree.<!Node>} children\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar Merge = /** @class */ (function () {\r\n    function Merge(\r\n    /**@inheritDoc */ source, \r\n    /**@inheritDoc */ path, \r\n    /**@inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    Merge.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            var childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, Path.Empty, childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, Path.Empty, childTree);\r\n            }\r\n        }\r\n        else {\r\n            util.assert(this.path.getFront() === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, this.path.popFront(), this.children);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    Merge.prototype.toString = function () {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    };\r\n    return Merge;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nvar CacheNode = /** @class */ (function () {\r\n    /**\r\n     * @param {!Node} node_\r\n     * @param {boolean} fullyInitialized_\r\n     * @param {boolean} filtered_\r\n     */\r\n    function CacheNode(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isFullyInitialized = function () {\r\n        return this.fullyInitialized_;\r\n    };\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isFiltered = function () {\r\n        return this.filtered_;\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isCompleteForPath = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        var childKey = path.getFront();\r\n        return this.isCompleteForChild(childKey);\r\n    };\r\n    /**\r\n     * @param {!string} key\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isCompleteForChild = function (key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    };\r\n    /**\r\n     * @return {!Node}\r\n     */\r\n    CacheNode.prototype.getNode = function () {\r\n        return this.node_;\r\n    };\r\n    return CacheNode;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Stores the data we have cached for a view.\r\n *\r\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\r\n *\r\n * @constructor\r\n */\r\nvar ViewCache = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!CacheNode} eventCache_\r\n     * @param {!CacheNode} serverCache_\r\n     */\r\n    function ViewCache(eventCache_, serverCache_) {\r\n        this.eventCache_ = eventCache_;\r\n        this.serverCache_ = serverCache_;\r\n    }\r\n    /**\r\n     * @param {!Node} eventSnap\r\n     * @param {boolean} complete\r\n     * @param {boolean} filtered\r\n     * @return {!ViewCache}\r\n     */\r\n    ViewCache.prototype.updateEventSnap = function (eventSnap, complete, filtered) {\r\n        return new ViewCache(new CacheNode(eventSnap, complete, filtered), this.serverCache_);\r\n    };\r\n    /**\r\n     * @param {!Node} serverSnap\r\n     * @param {boolean} complete\r\n     * @param {boolean} filtered\r\n     * @return {!ViewCache}\r\n     */\r\n    ViewCache.prototype.updateServerSnap = function (serverSnap, complete, filtered) {\r\n        return new ViewCache(this.eventCache_, new CacheNode(serverSnap, complete, filtered));\r\n    };\r\n    /**\r\n     * @return {!CacheNode}\r\n     */\r\n    ViewCache.prototype.getEventCache = function () {\r\n        return this.eventCache_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    ViewCache.prototype.getCompleteEventSnap = function () {\r\n        return this.eventCache_.isFullyInitialized()\r\n            ? this.eventCache_.getNode()\r\n            : null;\r\n    };\r\n    /**\r\n     * @return {!CacheNode}\r\n     */\r\n    ViewCache.prototype.getServerCache = function () {\r\n        return this.serverCache_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    ViewCache.prototype.getCompleteServerSnap = function () {\r\n        return this.serverCache_.isFullyInitialized()\r\n            ? this.serverCache_.getNode()\r\n            : null;\r\n    };\r\n    /**\r\n     * @const\r\n     * @type {ViewCache}\r\n     */\r\n    ViewCache.Empty = new ViewCache(new CacheNode(ChildrenNode.EMPTY_NODE, \r\n    /*fullyInitialized=*/ false, \r\n    /*filtered=*/ false), new CacheNode(ChildrenNode.EMPTY_NODE, \r\n    /*fullyInitialized=*/ false, \r\n    /*filtered=*/ false));\r\n    return ViewCache;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @struct\r\n * @param {!string} type The event type\r\n * @param {!Node} snapshotNode The data\r\n * @param {string=} childName The name for this child, if it's a child event\r\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\r\n * @param {string=} prevName The name for the previous child, if applicable\r\n */\r\nvar Change = /** @class */ (function () {\r\n    function Change(type, snapshotNode, childName, oldSnap, prevName) {\r\n        this.type = type;\r\n        this.snapshotNode = snapshotNode;\r\n        this.childName = childName;\r\n        this.oldSnap = oldSnap;\r\n        this.prevName = prevName;\r\n    }\r\n    /**\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.valueChange = function (snapshot) {\r\n        return new Change(Change.VALUE, snapshot);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childAddedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_ADDED, snapshot, childKey);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childRemovedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_REMOVED, snapshot, childKey);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} newSnapshot\r\n     * @param {!Node} oldSnapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {\r\n        return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childMovedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_MOVED, snapshot, childKey);\r\n    };\r\n    //event types\r\n    /** Event type for a child added */\r\n    Change.CHILD_ADDED = 'child_added';\r\n    /** Event type for a child removed */\r\n    Change.CHILD_REMOVED = 'child_removed';\r\n    /** Event type for a child changed */\r\n    Change.CHILD_CHANGED = 'child_changed';\r\n    /** Event type for a child moved */\r\n    Change.CHILD_MOVED = 'child_moved';\r\n    /** Event type for a value change */\r\n    Change.VALUE = 'value';\r\n    return Change;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n * @param {!Index} index\r\n */\r\nvar IndexedFilter = /** @class */ (function () {\r\n    function IndexedFilter(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        util.assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        var oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() == newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, oldChild));\r\n                }\r\n                else {\r\n                    util.assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(Change.childAddedChange(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(Change.childChangedChange(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        var oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(Change.childChangedChange(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(Change.childAddedChange(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.filtersNodes = function () {\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.getIndexedFilter = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    return IndexedFilter;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n */\r\nvar ChildChangeAccumulator = /** @class */ (function () {\r\n    function ChildChangeAccumulator() {\r\n        this.changeMap_ = {};\r\n    }\r\n    /**\r\n     * @param {!Change} change\r\n     */\r\n    ChildChangeAccumulator.prototype.trackChildChange = function (change) {\r\n        var type = change.type;\r\n        var childKey /** @type {!string} */ = change.childName;\r\n        util.assert(type == Change.CHILD_ADDED ||\r\n            type == Change.CHILD_CHANGED ||\r\n            type == Change.CHILD_REMOVED, 'Only child changes supported for tracking');\r\n        util.assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        var oldChange = util.safeGet(this.changeMap_, childKey);\r\n        if (oldChange) {\r\n            var oldType = oldChange.type;\r\n            if (type == Change.CHILD_ADDED && oldType == Change.CHILD_REMOVED) {\r\n                this.changeMap_[childKey] = Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode);\r\n            }\r\n            else if (type == Change.CHILD_REMOVED &&\r\n                oldType == Change.CHILD_ADDED) {\r\n                delete this.changeMap_[childKey];\r\n            }\r\n            else if (type == Change.CHILD_REMOVED &&\r\n                oldType == Change.CHILD_CHANGED) {\r\n                this.changeMap_[childKey] = Change.childRemovedChange(childKey, oldChange.oldSnap);\r\n            }\r\n            else if (type == Change.CHILD_CHANGED &&\r\n                oldType == Change.CHILD_ADDED) {\r\n                this.changeMap_[childKey] = Change.childAddedChange(childKey, change.snapshotNode);\r\n            }\r\n            else if (type == Change.CHILD_CHANGED &&\r\n                oldType == Change.CHILD_CHANGED) {\r\n                this.changeMap_[childKey] = Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap);\r\n            }\r\n            else {\r\n                throw util.assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap_[childKey] = change;\r\n        }\r\n    };\r\n    /**\r\n     * @return {!Array.<!Change>}\r\n     */\r\n    ChildChangeAccumulator.prototype.getChanges = function () {\r\n        return util.getValues(this.changeMap_);\r\n    };\r\n    return ChildChangeAccumulator;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n *\r\n * @private\r\n * @constructor\r\n * @implements CompleteChildSource\r\n */\r\nvar NoCompleteChildSource_ = /** @class */ (function () {\r\n    function NoCompleteChildSource_() {\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {\r\n        return null;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {\r\n        return null;\r\n    };\r\n    return NoCompleteChildSource_;\r\n}());\r\n/**\r\n * Singleton instance.\r\n * @const\r\n * @type {!CompleteChildSource}\r\n */\r\nvar NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n *\r\n *\r\n * @implements CompleteChildSource\r\n */\r\nvar WriteTreeCompleteChildSource = /** @class */ (function () {\r\n    /**\r\n     * @param {!WriteTreeRef} writes_\r\n     * @param {!ViewCache} viewCache_\r\n     * @param {?Node} optCompleteServerCache_\r\n     */\r\n    function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {\r\n        if (optCompleteServerCache_ === void 0) { optCompleteServerCache_ = null; }\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {\r\n        var node = this.viewCache_.getEventCache();\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            var serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.getServerCache();\r\n            return this.writes_.calcCompleteChild(childKey, serverNode);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {\r\n        var completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : this.viewCache_.getCompleteServerSnap();\r\n        var nodes = this.writes_.calcIndexedSlice(completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    };\r\n    return WriteTreeCompleteChildSource;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @struct\r\n */\r\nvar ProcessorResult = /** @class */ (function () {\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Array.<!Change>} changes\r\n     */\r\n    function ProcessorResult(viewCache, changes) {\r\n        this.viewCache = viewCache;\r\n        this.changes = changes;\r\n    }\r\n    return ProcessorResult;\r\n}());\r\n/**\r\n * @constructor\r\n */\r\nvar ViewProcessor = /** @class */ (function () {\r\n    /**\r\n     * @param {!NodeFilter} filter_\r\n     */\r\n    function ViewProcessor(filter_) {\r\n        this.filter_ = filter_;\r\n    }\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     */\r\n    ViewProcessor.prototype.assertIndexed = function (viewCache) {\r\n        util.assert(viewCache\r\n            .getEventCache()\r\n            .getNode()\r\n            .isIndexed(this.filter_.getIndex()), 'Event snap not indexed');\r\n        util.assert(viewCache\r\n            .getServerCache()\r\n            .getNode()\r\n            .isIndexed(this.filter_.getIndex()), 'Server snap not indexed');\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @return {!ProcessorResult}\r\n     */\r\n    ViewProcessor.prototype.applyOperation = function (oldViewCache, operation, writesCache, completeCache) {\r\n        var accumulator = new ChildChangeAccumulator();\r\n        var newViewCache, filterServerNode;\r\n        if (operation.type === OperationType.OVERWRITE) {\r\n            var overwrite = operation;\r\n            if (overwrite.source.fromUser) {\r\n                newViewCache = this.applyUserOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                util.assert(overwrite.source.fromServer, 'Unknown source.');\r\n                // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n                // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n                // again\r\n                filterServerNode =\r\n                    overwrite.source.tagged ||\r\n                        (oldViewCache.getServerCache().isFiltered() &&\r\n                            !overwrite.path.isEmpty());\r\n                newViewCache = this.applyServerOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.MERGE) {\r\n            var merge = operation;\r\n            if (merge.source.fromUser) {\r\n                newViewCache = this.applyUserMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                util.assert(merge.source.fromServer, 'Unknown source.');\r\n                // We filter the node if it's a tagged update or the node has been previously filtered\r\n                filterServerNode =\r\n                    merge.source.tagged || oldViewCache.getServerCache().isFiltered();\r\n                newViewCache = this.applyServerMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n            var ackUserWrite = operation;\r\n            if (!ackUserWrite.revert) {\r\n                newViewCache = this.ackUserWrite_(oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                newViewCache = this.revertUserWrite_(oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n            newViewCache = this.listenComplete_(oldViewCache, operation.path, writesCache, accumulator);\r\n        }\r\n        else {\r\n            throw util.assertionError('Unknown operation type: ' + operation.type);\r\n        }\r\n        var changes = accumulator.getChanges();\r\n        ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\r\n        return new ProcessorResult(newViewCache, changes);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!ViewCache} newViewCache\r\n     * @param {!Array.<!Change>} accumulator\r\n     * @private\r\n     */\r\n    ViewProcessor.maybeAddValueEvent_ = function (oldViewCache, newViewCache, accumulator) {\r\n        var eventSnap = newViewCache.getEventCache();\r\n        if (eventSnap.isFullyInitialized()) {\r\n            var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n            var oldCompleteSnap = oldViewCache.getCompleteEventSnap();\r\n            if (accumulator.length > 0 ||\r\n                !oldViewCache.getEventCache().isFullyInitialized() ||\r\n                (isLeafOrEmpty &&\r\n                    !eventSnap\r\n                        .getNode()\r\n                        .equals(/** @type {!Node} */ (oldCompleteSnap))) ||\r\n                !eventSnap\r\n                    .getNode()\r\n                    .getPriority()\r\n                    .equals(oldCompleteSnap.getPriority())) {\r\n                accumulator.push(Change.valueChange(\r\n                /** @type {!Node} */ newViewCache.getCompleteEventSnap()));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} changePath\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {!CompleteChildSource} source\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.generateEventCacheAfterServerEvent_ = function (viewCache, changePath, writesCache, source, accumulator) {\r\n        var oldEventSnap = viewCache.getEventCache();\r\n        if (writesCache.shadowingWrite(changePath) != null) {\r\n            // we have a shadowing write, ignore changes\r\n            return viewCache;\r\n        }\r\n        else {\r\n            var newEventCache = void 0, serverNode = void 0;\r\n            if (changePath.isEmpty()) {\r\n                // TODO: figure out how this plays with \"sliding ack windows\"\r\n                util.assert(viewCache.getServerCache().isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n                if (viewCache.getServerCache().isFiltered()) {\r\n                    // We need to special case this, because we need to only apply writes to complete children, or\r\n                    // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                    // writes cannot be guaranteed to be complete\r\n                    var serverCache = viewCache.getCompleteServerSnap();\r\n                    var completeChildren = serverCache instanceof ChildrenNode\r\n                        ? serverCache\r\n                        : ChildrenNode.EMPTY_NODE;\r\n                    var completeEventChildren = writesCache.calcCompleteEventChildren(completeChildren);\r\n                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeEventChildren, accumulator);\r\n                }\r\n                else {\r\n                    var completeNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeNode, accumulator);\r\n                }\r\n            }\r\n            else {\r\n                var childKey = changePath.getFront();\r\n                if (childKey == '.priority') {\r\n                    util.assert(changePath.getLength() == 1, \"Can't have a priority with additional path components\");\r\n                    var oldEventNode = oldEventSnap.getNode();\r\n                    serverNode = viewCache.getServerCache().getNode();\r\n                    // we might have overwrites for this priority\r\n                    var updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventNode, serverNode);\r\n                    if (updatedPriority != null) {\r\n                        newEventCache = this.filter_.updatePriority(oldEventNode, updatedPriority);\r\n                    }\r\n                    else {\r\n                        // priority didn't change, keep old node\r\n                        newEventCache = oldEventSnap.getNode();\r\n                    }\r\n                }\r\n                else {\r\n                    var childChangePath = changePath.popFront();\r\n                    // update child\r\n                    var newEventChild = void 0;\r\n                    if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                        serverNode = viewCache.getServerCache().getNode();\r\n                        var eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventSnap.getNode(), serverNode);\r\n                        if (eventChildUpdate != null) {\r\n                            newEventChild = oldEventSnap\r\n                                .getNode()\r\n                                .getImmediateChild(childKey)\r\n                                .updateChild(childChangePath, eventChildUpdate);\r\n                        }\r\n                        else {\r\n                            // Nothing changed, just keep the old child\r\n                            newEventChild = oldEventSnap\r\n                                .getNode()\r\n                                .getImmediateChild(childKey);\r\n                        }\r\n                    }\r\n                    else {\r\n                        newEventChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\r\n                    }\r\n                    if (newEventChild != null) {\r\n                        newEventCache = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                    }\r\n                    else {\r\n                        // no complete child available or no change\r\n                        newEventCache = oldEventSnap.getNode();\r\n                    }\r\n                }\r\n            }\r\n            return viewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized() || changePath.isEmpty(), this.filter_.filtersNodes());\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Path} changePath\r\n     * @param {!Node} changedSnap\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {boolean} filterServerNode\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyServerOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n        var oldServerSnap = oldViewCache.getServerCache();\r\n        var newServerCache;\r\n        var serverFilter = filterServerNode\r\n            ? this.filter_\r\n            : this.filter_.getIndexedFilter();\r\n        if (changePath.isEmpty()) {\r\n            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n        }\r\n        else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n            // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n            var newServerNode = oldServerSnap\r\n                .getNode()\r\n                .updateChild(changePath, changedSnap);\r\n            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n        }\r\n        else {\r\n            var childKey = changePath.getFront();\r\n            if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n                changePath.getLength() > 1) {\r\n                // We don't update incomplete nodes with updates intended for other listeners\r\n                return oldViewCache;\r\n            }\r\n            var childChangePath = changePath.popFront();\r\n            var childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n            var newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n            if (childKey == '.priority') {\r\n                newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n            }\r\n            else {\r\n                newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n            }\r\n        }\r\n        var newViewCache = oldViewCache.updateServerSnap(newServerCache, oldServerSnap.isFullyInitialized() || changePath.isEmpty(), serverFilter.filtersNodes());\r\n        var source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n        return this.generateEventCacheAfterServerEvent_(newViewCache, changePath, writesCache, source, accumulator);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Path} changePath\r\n     * @param {!Node} changedSnap\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyUserOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n        var oldEventSnap = oldViewCache.getEventCache();\r\n        var newViewCache, newEventCache;\r\n        var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n        if (changePath.isEmpty()) {\r\n            newEventCache = this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(), changedSnap, accumulator);\r\n            newViewCache = oldViewCache.updateEventSnap(newEventCache, true, this.filter_.filtersNodes());\r\n        }\r\n        else {\r\n            var childKey = changePath.getFront();\r\n            if (childKey === '.priority') {\r\n                newEventCache = this.filter_.updatePriority(oldViewCache.getEventCache().getNode(), changedSnap);\r\n                newViewCache = oldViewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n            }\r\n            else {\r\n                var childChangePath = changePath.popFront();\r\n                var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                var newChild = void 0;\r\n                if (childChangePath.isEmpty()) {\r\n                    // Child overwrite, we can replace the child\r\n                    newChild = changedSnap;\r\n                }\r\n                else {\r\n                    var childNode = source.getCompleteChild(childKey);\r\n                    if (childNode != null) {\r\n                        if (childChangePath.getBack() === '.priority' &&\r\n                            childNode.getChild(childChangePath.parent()).isEmpty()) {\r\n                            // This is a priority update on an empty node. If this node exists on the server, the\r\n                            // server will send down the priority in the update, so ignore for now\r\n                            newChild = childNode;\r\n                        }\r\n                        else {\r\n                            newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                        }\r\n                    }\r\n                    else {\r\n                        // There is no complete child node available\r\n                        newChild = ChildrenNode.EMPTY_NODE;\r\n                    }\r\n                }\r\n                if (!oldChild.equals(newChild)) {\r\n                    var newEventSnap = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                    newViewCache = oldViewCache.updateEventSnap(newEventSnap, oldEventSnap.isFullyInitialized(), this.filter_.filtersNodes());\r\n                }\r\n                else {\r\n                    newViewCache = oldViewCache;\r\n                }\r\n            }\r\n        }\r\n        return newViewCache;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {string} childKey\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    ViewProcessor.cacheHasChild_ = function (viewCache, childKey) {\r\n        return viewCache.getEventCache().isCompleteForChild(childKey);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {ImmutableTree.<!Node>} changedChildren\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyUserMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n        var _this = this;\r\n        // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n        // window leaving room for new items.  It's important we process these changes first, so we\r\n        // iterate the changes twice, first processing any that affect items currently in view.\r\n        // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n        // not the other.\r\n        var curViewCache = viewCache;\r\n        changedChildren.foreach(function (relativePath, childNode) {\r\n            var writePath = path.child(relativePath);\r\n            if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\r\n                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n            }\r\n        });\r\n        changedChildren.foreach(function (relativePath, childNode) {\r\n            var writePath = path.child(relativePath);\r\n            if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\r\n                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n            }\r\n        });\r\n        return curViewCache;\r\n    };\r\n    /**\r\n     * @param {!Node} node\r\n     * @param {ImmutableTree.<!Node>} merge\r\n     * @return {!Node}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyMerge_ = function (node, merge) {\r\n        merge.foreach(function (relativePath, childNode) {\r\n            node = node.updateChild(relativePath, childNode);\r\n        });\r\n        return node;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!ImmutableTree.<!Node>} changedChildren\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache\r\n     * @param {boolean} filterServerNode\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyServerMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n        var _this = this;\r\n        // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n        // wait for the complete data update coming soon.\r\n        if (viewCache\r\n            .getServerCache()\r\n            .getNode()\r\n            .isEmpty() &&\r\n            !viewCache.getServerCache().isFullyInitialized()) {\r\n            return viewCache;\r\n        }\r\n        // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n        // window leaving room for new items.  It's important we process these changes first, so we\r\n        // iterate the changes twice, first processing any that affect items currently in view.\r\n        // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n        // not the other.\r\n        var curViewCache = viewCache;\r\n        var viewMergeTree;\r\n        if (path.isEmpty()) {\r\n            viewMergeTree = changedChildren;\r\n        }\r\n        else {\r\n            viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);\r\n        }\r\n        var serverNode = viewCache.getServerCache().getNode();\r\n        viewMergeTree.children.inorderTraversal(function (childKey, childTree) {\r\n            if (serverNode.hasChild(childKey)) {\r\n                var serverChild = viewCache\r\n                    .getServerCache()\r\n                    .getNode()\r\n                    .getImmediateChild(childKey);\r\n                var newChild = _this.applyMerge_(serverChild, childTree);\r\n                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n            }\r\n        });\r\n        viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {\r\n            var isUnknownDeepMerge = !viewCache.getServerCache().isCompleteForChild(childKey) &&\r\n                childMergeTree.value == null;\r\n            if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n                var serverChild = viewCache\r\n                    .getServerCache()\r\n                    .getNode()\r\n                    .getImmediateChild(childKey);\r\n                var newChild = _this.applyMerge_(serverChild, childMergeTree);\r\n                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n            }\r\n        });\r\n        return curViewCache;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} ackPath\r\n     * @param {!ImmutableTree<!boolean>} affectedTree\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.ackUserWrite_ = function (viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n        if (writesCache.shadowingWrite(ackPath) != null) {\r\n            return viewCache;\r\n        }\r\n        // Only filter server node if it is currently filtered\r\n        var filterServerNode = viewCache.getServerCache().isFiltered();\r\n        // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n        // now that it won't be shadowed.\r\n        var serverCache = viewCache.getServerCache();\r\n        if (affectedTree.value != null) {\r\n            // This is an overwrite.\r\n            if ((ackPath.isEmpty() && serverCache.isFullyInitialized()) ||\r\n                serverCache.isCompleteForPath(ackPath)) {\r\n                return this.applyServerOverwrite_(viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n            else if (ackPath.isEmpty()) {\r\n                // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n                // should just re-apply whatever we have in our cache as a merge.\r\n                var changedChildren_1 = ImmutableTree.Empty;\r\n                serverCache.getNode().forEachChild(KEY_INDEX, function (name, node) {\r\n                    changedChildren_1 = changedChildren_1.set(new Path(name), node);\r\n                });\r\n                return this.applyServerMerge_(viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n            else {\r\n                return viewCache;\r\n            }\r\n        }\r\n        else {\r\n            // This is a merge.\r\n            var changedChildren_2 = ImmutableTree.Empty;\r\n            affectedTree.foreach(function (mergePath, value) {\r\n                var serverCachePath = ackPath.child(mergePath);\r\n                if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                    changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n                }\r\n            });\r\n            return this.applyServerMerge_(viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.listenComplete_ = function (viewCache, path, writesCache, accumulator) {\r\n        var oldServerNode = viewCache.getServerCache();\r\n        var newViewCache = viewCache.updateServerSnap(oldServerNode.getNode(), oldServerNode.isFullyInitialized() || path.isEmpty(), oldServerNode.isFiltered());\r\n        return this.generateEventCacheAfterServerEvent_(newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeServerCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.revertUserWrite_ = function (viewCache, path, writesCache, completeServerCache, accumulator) {\r\n        var complete;\r\n        if (writesCache.shadowingWrite(path) != null) {\r\n            return viewCache;\r\n        }\r\n        else {\r\n            var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n            var oldEventCache = viewCache.getEventCache().getNode();\r\n            var newEventCache = void 0;\r\n            if (path.isEmpty() || path.getFront() === '.priority') {\r\n                var newNode = void 0;\r\n                if (viewCache.getServerCache().isFullyInitialized()) {\r\n                    newNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                }\r\n                else {\r\n                    var serverChildren = viewCache.getServerCache().getNode();\r\n                    util.assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                    newNode = writesCache.calcCompleteEventChildren(serverChildren);\r\n                }\r\n                newNode = newNode;\r\n                newEventCache = this.filter_.updateFullNode(oldEventCache, newNode, accumulator);\r\n            }\r\n            else {\r\n                var childKey = path.getFront();\r\n                var newChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\r\n                if (newChild == null &&\r\n                    viewCache.getServerCache().isCompleteForChild(childKey)) {\r\n                    newChild = oldEventCache.getImmediateChild(childKey);\r\n                }\r\n                if (newChild != null) {\r\n                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, newChild, path.popFront(), source, accumulator);\r\n                }\r\n                else if (viewCache\r\n                    .getEventCache()\r\n                    .getNode()\r\n                    .hasChild(childKey)) {\r\n                    // No complete child available, delete the existing one, if any\r\n                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, path.popFront(), source, accumulator);\r\n                }\r\n                else {\r\n                    newEventCache = oldEventCache;\r\n                }\r\n                if (newEventCache.isEmpty() &&\r\n                    viewCache.getServerCache().isFullyInitialized()) {\r\n                    // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                    complete = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                    if (complete.isLeafNode()) {\r\n                        newEventCache = this.filter_.updateFullNode(newEventCache, complete, accumulator);\r\n                    }\r\n                }\r\n            }\r\n            complete =\r\n                viewCache.getServerCache().isFullyInitialized() ||\r\n                    writesCache.shadowingWrite(Path.Empty) != null;\r\n            return viewCache.updateEventSnap(newEventCache, complete, this.filter_.filtersNodes());\r\n        }\r\n    };\r\n    return ViewProcessor;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n * @constructor\r\n */\r\nvar EventGenerator = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Query} query_\r\n     */\r\n    function EventGenerator(query_) {\r\n        this.query_ = query_;\r\n        /**\r\n         * @private\r\n         * @type {!Index}\r\n         */\r\n        this.index_ = this.query_.getQueryParams().getIndex();\r\n    }\r\n    /**\r\n     * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n     * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n     *\r\n     * Notes:\r\n     *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n     *    our index.\r\n     *  - prevName will be calculated based on the index ordering.\r\n     *\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Node} eventCache\r\n     * @param {!Array.<!EventRegistration>} eventRegistrations\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {\r\n        var _this = this;\r\n        var events = [];\r\n        var moves = [];\r\n        changes.forEach(function (change) {\r\n            if (change.type === Change.CHILD_CHANGED &&\r\n                _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n                moves.push(Change.childMovedChange(change.childName, change.snapshotNode));\r\n            }\r\n        });\r\n        this.generateEventsForType_(events, Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_ADDED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_MOVED, moves, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.VALUE, changes, eventRegistrations, eventCache);\r\n        return events;\r\n    };\r\n    /**\r\n     * Given changes of a single change type, generate the corresponding events.\r\n     *\r\n     * @param {!Array.<!Event>} events\r\n     * @param {!string} eventType\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Array.<!EventRegistration>} registrations\r\n     * @param {!Node} eventCache\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {\r\n        var _this = this;\r\n        var filteredChanges = changes.filter(function (change) { return change.type === eventType; });\r\n        filteredChanges.sort(this.compareChanges_.bind(this));\r\n        filteredChanges.forEach(function (change) {\r\n            var materializedChange = _this.materializeSingleChange_(change, eventCache);\r\n            registrations.forEach(function (registration) {\r\n                if (registration.respondsTo(change.type)) {\r\n                    events.push(registration.createEvent(materializedChange, _this.query_));\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Change} change\r\n     * @param {!Node} eventCache\r\n     * @return {!Change}\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {\r\n        if (change.type === 'value' || change.type === 'child_removed') {\r\n            return change;\r\n        }\r\n        else {\r\n            change.prevName = eventCache.getPredecessorChildName(\r\n            /** @type {!string} */\r\n            change.childName, change.snapshotNode, this.index_);\r\n            return change;\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Change} a\r\n     * @param {!Change} b\r\n     * @return {number}\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.compareChanges_ = function (a, b) {\r\n        if (a.childName == null || b.childName == null) {\r\n            throw util.assertionError('Should only compare child_ events.');\r\n        }\r\n        var aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n        var bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n        return this.index_.compare(aWrapped, bWrapped);\r\n    };\r\n    return EventGenerator;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n * @constructor\r\n */\r\nvar View = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Query} query_\r\n     * @param {!ViewCache} initialViewCache\r\n     */\r\n    function View(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        var params = this.query_.getQueryParams();\r\n        var indexFilter = new IndexedFilter(params.getIndex());\r\n        var filter = params.getNodeFilter();\r\n        /**\r\n         * @type {ViewProcessor}\r\n         * @private\r\n         */\r\n        this.processor_ = new ViewProcessor(filter);\r\n        var initialServerCache = initialViewCache.getServerCache();\r\n        var initialEventCache = initialViewCache.getEventCache();\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        /**\r\n         * @type {!ViewCache}\r\n         * @private\r\n         */\r\n        this.viewCache_ = new ViewCache(newEventCache, newServerCache);\r\n        /**\r\n         * @type {!EventGenerator}\r\n         * @private\r\n         */\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    /**\r\n     * @return {!Query}\r\n     */\r\n    View.prototype.getQuery = function () {\r\n        return this.query_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    View.prototype.getServerCache = function () {\r\n        return this.viewCache_.getServerCache().getNode();\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    View.prototype.getCompleteServerCache = function (path) {\r\n        var cache = this.viewCache_.getCompleteServerSnap();\r\n        if (cache) {\r\n            // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n            // we need to see if it contains the child we're interested in.\r\n            if (this.query_.getQueryParams().loadsAllData() ||\r\n                (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())) {\r\n                return cache.getChild(path);\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    View.prototype.isEmpty = function () {\r\n        return this.eventRegistrations_.length === 0;\r\n    };\r\n    /**\r\n     * @param {!EventRegistration} eventRegistration\r\n     */\r\n    View.prototype.addEventRegistration = function (eventRegistration) {\r\n        this.eventRegistrations_.push(eventRegistration);\r\n    };\r\n    /**\r\n     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\r\n     */\r\n    View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {\r\n        var cancelEvents = [];\r\n        if (cancelError) {\r\n            util.assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n            var path_1 = this.query_.path;\r\n            this.eventRegistrations_.forEach(function (registration) {\r\n                cancelError /** @type {!Error} */ = cancelError;\r\n                var maybeEvent = registration.createCancelEvent(cancelError, path_1);\r\n                if (maybeEvent) {\r\n                    cancelEvents.push(maybeEvent);\r\n                }\r\n            });\r\n        }\r\n        if (eventRegistration) {\r\n            var remaining = [];\r\n            for (var i = 0; i < this.eventRegistrations_.length; ++i) {\r\n                var existing = this.eventRegistrations_[i];\r\n                if (!existing.matches(eventRegistration)) {\r\n                    remaining.push(existing);\r\n                }\r\n                else if (eventRegistration.hasAnyCallback()) {\r\n                    // We're removing just this one\r\n                    remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\r\n                    break;\r\n                }\r\n            }\r\n            this.eventRegistrations_ = remaining;\r\n        }\r\n        else {\r\n            this.eventRegistrations_ = [];\r\n        }\r\n        return cancelEvents;\r\n    };\r\n    /**\r\n     * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n     *\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeServerCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {\r\n        if (operation.type === OperationType.MERGE &&\r\n            operation.source.queryId !== null) {\r\n            util.assert(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');\r\n            util.assert(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');\r\n        }\r\n        var oldViewCache = this.viewCache_;\r\n        var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);\r\n        this.processor_.assertIndexed(result.viewCache);\r\n        util.assert(result.viewCache.getServerCache().isFullyInitialized() ||\r\n            !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n        this.viewCache_ = result.viewCache;\r\n        return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);\r\n    };\r\n    /**\r\n     * @param {!EventRegistration} registration\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.getInitialEvents = function (registration) {\r\n        var eventSnap = this.viewCache_.getEventCache();\r\n        var initialChanges = [];\r\n        if (!eventSnap.getNode().isLeafNode()) {\r\n            var eventNode = eventSnap.getNode();\r\n            eventNode.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                initialChanges.push(Change.childAddedChange(key, childNode));\r\n            });\r\n        }\r\n        if (eventSnap.isFullyInitialized()) {\r\n            initialChanges.push(Change.valueChange(eventSnap.getNode()));\r\n        }\r\n        return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Node} eventCache\r\n     * @param {EventRegistration=} eventRegistration\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {\r\n        var registrations = eventRegistration\r\n            ? [eventRegistration]\r\n            : this.eventRegistrations_;\r\n        return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);\r\n    };\r\n    return View;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nvar SyncPoint = /** @class */ (function () {\r\n    function SyncPoint() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         *\r\n         * @type {!Object.<!string, !View>}\r\n         * @private\r\n         */\r\n        this.views_ = {};\r\n    }\r\n    Object.defineProperty(SyncPoint, \"__referenceConstructor\", {\r\n        get: function () {\r\n            util.assert(__referenceConstructor$1, 'Reference.ts has not been loaded');\r\n            return __referenceConstructor$1;\r\n        },\r\n        set: function (val) {\r\n            util.assert(!__referenceConstructor$1, '__referenceConstructor has already been defined');\r\n            __referenceConstructor$1 = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    SyncPoint.prototype.isEmpty = function () {\r\n        return util.isEmpty(this.views_);\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} optCompleteServerCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    SyncPoint.prototype.applyOperation = function (operation, writesCache, optCompleteServerCache) {\r\n        var queryId = operation.source.queryId;\r\n        if (queryId !== null) {\r\n            var view = util.safeGet(this.views_, queryId);\r\n            util.assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n            return view.applyOperation(operation, writesCache, optCompleteServerCache);\r\n        }\r\n        else {\r\n            var events_1 = [];\r\n            util.forEach(this.views_, function (key, view) {\r\n                events_1 = events_1.concat(view.applyOperation(operation, writesCache, optCompleteServerCache));\r\n            });\r\n            return events_1;\r\n        }\r\n    };\r\n    /**\r\n     * Add an event callback for the specified query.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache Complete server cache, if we have it.\r\n     * @param {boolean} serverCacheComplete\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncPoint.prototype.addEventRegistration = function (query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n        var queryId = query.queryIdentifier();\r\n        var view = util.safeGet(this.views_, queryId);\r\n        if (!view) {\r\n            // TODO: make writesCache take flag for complete server node\r\n            var eventCache = writesCache.calcCompleteEventCache(serverCacheComplete ? serverCache : null);\r\n            var eventCacheComplete = false;\r\n            if (eventCache) {\r\n                eventCacheComplete = true;\r\n            }\r\n            else if (serverCache instanceof ChildrenNode) {\r\n                eventCache = writesCache.calcCompleteEventChildren(serverCache);\r\n                eventCacheComplete = false;\r\n            }\r\n            else {\r\n                eventCache = ChildrenNode.EMPTY_NODE;\r\n                eventCacheComplete = false;\r\n            }\r\n            var viewCache = new ViewCache(new CacheNode(\r\n            /** @type {!Node} */ (eventCache), eventCacheComplete, false), new CacheNode(\r\n            /** @type {!Node} */ (serverCache), serverCacheComplete, false));\r\n            view = new View(query, viewCache);\r\n            this.views_[queryId] = view;\r\n        }\r\n        // This is guaranteed to exist now, we just created anything that was missing\r\n        view.addEventRegistration(eventRegistration);\r\n        return view.getInitialEvents(eventRegistration);\r\n    };\r\n    /**\r\n     * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n     *\r\n     * If query is the default query, we'll check all views for the specified eventRegistration.\r\n     * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n     *\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events\r\n     */\r\n    SyncPoint.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\r\n        var queryId = query.queryIdentifier();\r\n        var removed = [];\r\n        var cancelEvents = [];\r\n        var hadCompleteView = this.hasCompleteView();\r\n        if (queryId === 'default') {\r\n            // When you do ref.off(...), we search all views for the registration to remove.\r\n            var self_1 = this;\r\n            util.forEach(this.views_, function (viewQueryId, view) {\r\n                cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\r\n                if (view.isEmpty()) {\r\n                    delete self_1.views_[viewQueryId];\r\n                    // We'll deal with complete views later.\r\n                    if (!view\r\n                        .getQuery()\r\n                        .getQueryParams()\r\n                        .loadsAllData()) {\r\n                        removed.push(view.getQuery());\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            // remove the callback from the specific view.\r\n            var view = util.safeGet(this.views_, queryId);\r\n            if (view) {\r\n                cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\r\n                if (view.isEmpty()) {\r\n                    delete this.views_[queryId];\r\n                    // We'll deal with complete views later.\r\n                    if (!view\r\n                        .getQuery()\r\n                        .getQueryParams()\r\n                        .loadsAllData()) {\r\n                        removed.push(view.getQuery());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (hadCompleteView && !this.hasCompleteView()) {\r\n            // We removed our last complete view.\r\n            removed.push(new SyncPoint.__referenceConstructor(query.repo, query.path));\r\n        }\r\n        return { removed: removed, events: cancelEvents };\r\n    };\r\n    /**\r\n     * @return {!Array.<!View>}\r\n     */\r\n    SyncPoint.prototype.getQueryViews = function () {\r\n        var _this = this;\r\n        var values = Object.keys(this.views_).map(function (key) { return _this.views_[key]; });\r\n        return values.filter(function (view) {\r\n            return !view\r\n                .getQuery()\r\n                .getQueryParams()\r\n                .loadsAllData();\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Path} path The path to the desired complete snapshot\r\n     * @return {?Node} A complete cache, if it exists\r\n     */\r\n    SyncPoint.prototype.getCompleteServerCache = function (path) {\r\n        var serverCache = null;\r\n        util.forEach(this.views_, function (key, view) {\r\n            serverCache = serverCache || view.getCompleteServerCache(path);\r\n        });\r\n        return serverCache;\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @return {?View}\r\n     */\r\n    SyncPoint.prototype.viewForQuery = function (query) {\r\n        var params = query.getQueryParams();\r\n        if (params.loadsAllData()) {\r\n            return this.getCompleteView();\r\n        }\r\n        else {\r\n            var queryId = query.queryIdentifier();\r\n            return util.safeGet(this.views_, queryId);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @return {boolean}\r\n     */\r\n    SyncPoint.prototype.viewExistsForQuery = function (query) {\r\n        return this.viewForQuery(query) != null;\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    SyncPoint.prototype.hasCompleteView = function () {\r\n        return this.getCompleteView() != null;\r\n    };\r\n    /**\r\n     * @return {?View}\r\n     */\r\n    SyncPoint.prototype.getCompleteView = function () {\r\n        var completeView = util.findValue(this.views_, function (view) {\r\n            return view\r\n                .getQuery()\r\n                .getQueryParams()\r\n                .loadsAllData();\r\n        });\r\n        return completeView || null;\r\n    };\r\n    return SyncPoint;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n *\r\n * @constructor\r\n * @param {!ImmutableTree.<!Node>} writeTree\r\n */\r\nvar CompoundWrite = /** @class */ (function () {\r\n    function CompoundWrite(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!Node} node\r\n     * @return {!CompoundWrite}\r\n     */\r\n    CompoundWrite.prototype.addWrite = function (path, node) {\r\n        if (path.isEmpty()) {\r\n            return new CompoundWrite(new ImmutableTree(node));\r\n        }\r\n        else {\r\n            var rootmost = this.writeTree_.findRootMostValueAndPath(path);\r\n            if (rootmost != null) {\r\n                var rootMostPath = rootmost.path;\r\n                var value = rootmost.value;\r\n                var relativePath = Path.relativePath(rootMostPath, path);\r\n                value = value.updateChild(relativePath, node);\r\n                return new CompoundWrite(this.writeTree_.set(rootMostPath, value));\r\n            }\r\n            else {\r\n                var subtree = new ImmutableTree(node);\r\n                var newWriteTree = this.writeTree_.setTree(path, subtree);\r\n                return new CompoundWrite(newWriteTree);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} updates\r\n     * @return {!CompoundWrite}\r\n     */\r\n    CompoundWrite.prototype.addWrites = function (path, updates) {\r\n        var newWrite = this;\r\n        util.forEach(updates, function (childKey, node) {\r\n            newWrite = newWrite.addWrite(path.child(childKey), node);\r\n        });\r\n        return newWrite;\r\n    };\r\n    /**\r\n     * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n     * location, which must be removed by calling this method with that path.\r\n     *\r\n     * @param {!Path} path The path at which a write and all deeper writes should be removed\r\n     * @return {!CompoundWrite} The new CompoundWrite with the removed path\r\n     */\r\n    CompoundWrite.prototype.removeWrite = function (path) {\r\n        if (path.isEmpty()) {\r\n            return CompoundWrite.Empty;\r\n        }\r\n        else {\r\n            var newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    };\r\n    /**\r\n     * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n     * considered \"complete\".\r\n     *\r\n     * @param {!Path} path The path to check for\r\n     * @return {boolean} Whether there is a complete write at that path\r\n     */\r\n    CompoundWrite.prototype.hasCompleteWrite = function (path) {\r\n        return this.getCompleteNode(path) != null;\r\n    };\r\n    /**\r\n     * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n     * writes from deeper paths, but will return child nodes from a more shallow path.\r\n     *\r\n     * @param {!Path} path The path to get a complete write\r\n     * @return {?Node} The node if complete at that path, or null otherwise.\r\n     */\r\n    CompoundWrite.prototype.getCompleteNode = function (path) {\r\n        var rootmost = this.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            return this.writeTree_\r\n                .get(rootmost.path)\r\n                .getChild(Path.relativePath(rootmost.path, path));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Returns all children that are guaranteed to be a complete overwrite.\r\n     *\r\n     * @return {!Array.<NamedNode>} A list of all complete children.\r\n     */\r\n    CompoundWrite.prototype.getCompleteChildren = function () {\r\n        var children = [];\r\n        var node = this.writeTree_.value;\r\n        if (node != null) {\r\n            // If it's a leaf node, it has no children; so nothing to do.\r\n            if (!node.isLeafNode()) {\r\n                node.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n                    children.push(new NamedNode(childName, childNode));\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            this.writeTree_.children.inorderTraversal(function (childName, childTree) {\r\n                if (childTree.value != null) {\r\n                    children.push(new NamedNode(childName, childTree.value));\r\n                }\r\n            });\r\n        }\r\n        return children;\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @return {!CompoundWrite}\r\n     */\r\n    CompoundWrite.prototype.childCompoundWrite = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            var shadowingNode = this.getCompleteNode(path);\r\n            if (shadowingNode != null) {\r\n                return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n            }\r\n            else {\r\n                return new CompoundWrite(this.writeTree_.subtree(path));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n     * @return {boolean} Whether this CompoundWrite is empty\r\n     */\r\n    CompoundWrite.prototype.isEmpty = function () {\r\n        return this.writeTree_.isEmpty();\r\n    };\r\n    /**\r\n     * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n     * node\r\n     * @param {!Node} node The node to apply this CompoundWrite to\r\n     * @return {!Node} The node with all writes applied\r\n     */\r\n    CompoundWrite.prototype.apply = function (node) {\r\n        return CompoundWrite.applySubtreeWrite_(Path.Empty, this.writeTree_, node);\r\n    };\r\n    /**\r\n     * @type {!CompoundWrite}\r\n     */\r\n    CompoundWrite.Empty = new CompoundWrite(new ImmutableTree(null));\r\n    /**\r\n     * @param {!Path} relativePath\r\n     * @param {!ImmutableTree.<!Node>} writeTree\r\n     * @param {!Node} node\r\n     * @return {!Node}\r\n     * @private\r\n     */\r\n    CompoundWrite.applySubtreeWrite_ = function (relativePath, writeTree, node) {\r\n        if (writeTree.value != null) {\r\n            // Since there a write is always a leaf, we're done here\r\n            return node.updateChild(relativePath, writeTree.value);\r\n        }\r\n        else {\r\n            var priorityWrite_1 = null;\r\n            writeTree.children.inorderTraversal(function (childKey, childTree) {\r\n                if (childKey === '.priority') {\r\n                    // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                    // to apply priorities to empty nodes that are later filled\r\n                    util.assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                    priorityWrite_1 = childTree.value;\r\n                }\r\n                else {\r\n                    node = CompoundWrite.applySubtreeWrite_(relativePath.child(childKey), childTree, node);\r\n                }\r\n            });\r\n            // If there was a priority write, we only apply it if the node is not empty\r\n            if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {\r\n                node = node.updateChild(relativePath.child('.priority'), priorityWrite_1);\r\n            }\r\n            return node;\r\n        }\r\n    };\r\n    return CompoundWrite;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\r\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\r\n * and addMerge(), and removed with removeWrite().\r\n *\r\n * @constructor\r\n */\r\nvar WriteTree = /** @class */ (function () {\r\n    function WriteTree() {\r\n        /**\r\n         * A tree tracking the result of applying all visible writes.  This does not include transactions with\r\n         * applyLocally=false or writes that are completely shadowed by other writes.\r\n         *\r\n         * @type {!CompoundWrite}\r\n         * @private\r\n         */\r\n        this.visibleWrites_ = CompoundWrite.Empty;\r\n        /**\r\n         * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\r\n         * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\r\n         * used by transactions).\r\n         *\r\n         * @type {!Array.<!WriteRecord>}\r\n         * @private\r\n         */\r\n        this.allWrites_ = [];\r\n        this.lastWriteId_ = -1;\r\n    }\r\n    /**\r\n     * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {!WriteTreeRef}\r\n     */\r\n    WriteTree.prototype.childWrites = function (path) {\r\n        return new WriteTreeRef(path, this);\r\n    };\r\n    /**\r\n     * Record a new overwrite from user code.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} snap\r\n     * @param {!number} writeId\r\n     * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\r\n     */\r\n    WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {\r\n        util.assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');\r\n        if (visible === undefined) {\r\n            visible = true;\r\n        }\r\n        this.allWrites_.push({\r\n            path: path,\r\n            snap: snap,\r\n            writeId: writeId,\r\n            visible: visible\r\n        });\r\n        if (visible) {\r\n            this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\r\n        }\r\n        this.lastWriteId_ = writeId;\r\n    };\r\n    /**\r\n     * Record a new merge from user code.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} writeId\r\n     */\r\n    WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {\r\n        util.assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');\r\n        this.allWrites_.push({\r\n            path: path,\r\n            children: changedChildren,\r\n            writeId: writeId,\r\n            visible: true\r\n        });\r\n        this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\r\n        this.lastWriteId_ = writeId;\r\n    };\r\n    /**\r\n     * @param {!number} writeId\r\n     * @return {?WriteRecord}\r\n     */\r\n    WriteTree.prototype.getWrite = function (writeId) {\r\n        for (var i = 0; i < this.allWrites_.length; i++) {\r\n            var record = this.allWrites_[i];\r\n            if (record.writeId === writeId) {\r\n                return record;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n     * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n     *\r\n     * @param {!number} writeId\r\n     * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n     * events as a result).\r\n     */\r\n    WriteTree.prototype.removeWrite = function (writeId) {\r\n        // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n        // out of order.\r\n        //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n        //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n        var _this = this;\r\n        var idx = this.allWrites_.findIndex(function (s) {\r\n            return s.writeId === writeId;\r\n        });\r\n        util.assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n        var writeToRemove = this.allWrites_[idx];\r\n        this.allWrites_.splice(idx, 1);\r\n        var removedWriteWasVisible = writeToRemove.visible;\r\n        var removedWriteOverlapsWithOtherWrites = false;\r\n        var i = this.allWrites_.length - 1;\r\n        while (removedWriteWasVisible && i >= 0) {\r\n            var currentWrite = this.allWrites_[i];\r\n            if (currentWrite.visible) {\r\n                if (i >= idx &&\r\n                    this.recordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                    // The removed write was completely shadowed by a subsequent write.\r\n                    removedWriteWasVisible = false;\r\n                }\r\n                else if (writeToRemove.path.contains(currentWrite.path)) {\r\n                    // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                    removedWriteOverlapsWithOtherWrites = true;\r\n                }\r\n            }\r\n            i--;\r\n        }\r\n        if (!removedWriteWasVisible) {\r\n            return false;\r\n        }\r\n        else if (removedWriteOverlapsWithOtherWrites) {\r\n            // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n            this.resetTree_();\r\n            return true;\r\n        }\r\n        else {\r\n            // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n            if (writeToRemove.snap) {\r\n                this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);\r\n            }\r\n            else {\r\n                var children = writeToRemove.children;\r\n                util.forEach(children, function (childName) {\r\n                    _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));\r\n                });\r\n            }\r\n            return true;\r\n        }\r\n    };\r\n    /**\r\n     * Return a complete snapshot for the given path if there's visible write data at that path, else null.\r\n     * No server data is considered.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.getCompleteWriteData = function (path) {\r\n        return this.visibleWrites_.getCompleteNode(path);\r\n    };\r\n    /**\r\n     * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n     * writes), attempt to calculate a complete snapshot for the given path\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?Node} completeServerCache\r\n     * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\r\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n        if (!writeIdsToExclude && !includeHiddenWrites) {\r\n            var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\r\n            if (shadowingNode != null) {\r\n                return shadowingNode;\r\n            }\r\n            else {\r\n                var subMerge = this.visibleWrites_.childCompoundWrite(treePath);\r\n                if (subMerge.isEmpty()) {\r\n                    return completeServerCache;\r\n                }\r\n                else if (completeServerCache == null &&\r\n                    !subMerge.hasCompleteWrite(Path.Empty)) {\r\n                    // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                    return null;\r\n                }\r\n                else {\r\n                    var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                    return subMerge.apply(layeredCache);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n            if (!includeHiddenWrites && merge.isEmpty()) {\r\n                return completeServerCache;\r\n            }\r\n            else {\r\n                // If the server cache is null, and we don't have a complete cache, we need to return null\r\n                if (!includeHiddenWrites &&\r\n                    completeServerCache == null &&\r\n                    !merge.hasCompleteWrite(Path.Empty)) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    var filter = function (write) {\r\n                        return ((write.visible || includeHiddenWrites) &&\r\n                            (!writeIdsToExclude ||\r\n                                !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                            (write.path.contains(treePath) || treePath.contains(write.path)));\r\n                    };\r\n                    var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);\r\n                    var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                    return mergeAtPath.apply(layeredCache);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n     * Used when creating new views, to pre-fill their complete event children snapshot.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?ChildrenNode} completeServerChildren\r\n     * @return {!ChildrenNode}\r\n     */\r\n    WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {\r\n        var completeChildren = ChildrenNode.EMPTY_NODE;\r\n        var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\r\n        if (topLevelSet) {\r\n            if (!topLevelSet.isLeafNode()) {\r\n                // we're shadowing everything. Return the children.\r\n                topLevelSet.forEachChild(PRIORITY_INDEX, function (childName, childSnap) {\r\n                    completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n                });\r\n            }\r\n            return completeChildren;\r\n        }\r\n        else if (completeServerChildren) {\r\n            // Layer any children we have on top of this\r\n            // We know we don't have a top-level set, so just enumerate existing children\r\n            var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);\r\n            completeServerChildren.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n                var node = merge_1\r\n                    .childCompoundWrite(new Path(childName))\r\n                    .apply(childNode);\r\n                completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n            });\r\n            // Add any complete children we have from the set\r\n            merge_1.getCompleteChildren().forEach(function (namedNode) {\r\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n            });\r\n            return completeChildren;\r\n        }\r\n        else {\r\n            // We don't have anything to layer on top of. Layer on any children we have\r\n            // Note that we can return an empty snap if we have a defined delete\r\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n            merge.getCompleteChildren().forEach(function (namedNode) {\r\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n            });\r\n            return completeChildren;\r\n        }\r\n    };\r\n    /**\r\n     * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n     * applied to the event cache.\r\n     *\r\n     * Possibilities:\r\n     *\r\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n     *\r\n     * 2. Some write is completely shadowing. No events to be raised\r\n     *\r\n     * 3. Is partially shadowed. Events\r\n     *\r\n     * Either existingEventSnap or existingServerSnap must exist\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {!Path} childPath\r\n     * @param {?Node} existingEventSnap\r\n     * @param {?Node} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {\r\n        util.assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n        var path = treePath.child(childPath);\r\n        if (this.visibleWrites_.hasCompleteWrite(path)) {\r\n            // At this point we can probably guarantee that we're in case 2, meaning no events\r\n            // May need to check visibility while doing the findRootMostValueAndPath call\r\n            return null;\r\n        }\r\n        else {\r\n            // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n            var childMerge = this.visibleWrites_.childCompoundWrite(path);\r\n            if (childMerge.isEmpty()) {\r\n                // We're not shadowing at all. Case 1\r\n                return existingServerSnap.getChild(childPath);\r\n            }\r\n            else {\r\n                // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n                // However this is tricky to find out, since user updates don't necessary change the server\r\n                // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n                // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n                // only check if the updates change the serverNode.\r\n                // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n                return childMerge.apply(existingServerSnap.getChild(childPath));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n     * complete child for this ChildKey.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {!string} childKey\r\n     * @param {!CacheNode} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {\r\n        var path = treePath.child(childKey);\r\n        var shadowingNode = this.visibleWrites_.getCompleteNode(path);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            if (existingServerSnap.isCompleteForChild(childKey)) {\r\n                var childMerge = this.visibleWrites_.childCompoundWrite(path);\r\n                return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n     * a higher path, this will return the child of that write relative to the write and this path.\r\n     * Returns null if there is no write at this path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.shadowingWrite = function (path) {\r\n        return this.visibleWrites_.getCompleteNode(path);\r\n    };\r\n    /**\r\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n     * the window, but may now be in the window.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?Node} completeServerData\r\n     * @param {!NamedNode} startPost\r\n     * @param {!number} count\r\n     * @param {boolean} reverse\r\n     * @param {!Index} index\r\n     * @return {!Array.<!NamedNode>}\r\n     */\r\n    WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {\r\n        var toIterate;\r\n        var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n        var shadowingNode = merge.getCompleteNode(Path.Empty);\r\n        if (shadowingNode != null) {\r\n            toIterate = shadowingNode;\r\n        }\r\n        else if (completeServerData != null) {\r\n            toIterate = merge.apply(completeServerData);\r\n        }\r\n        else {\r\n            // no children to iterate on\r\n            return [];\r\n        }\r\n        toIterate = toIterate.withIndex(index);\r\n        if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n            var nodes = [];\r\n            var cmp = index.getCompare();\r\n            var iter = reverse\r\n                ? toIterate.getReverseIteratorFrom(startPost, index)\r\n                : toIterate.getIteratorFrom(startPost, index);\r\n            var next = iter.getNext();\r\n            while (next && nodes.length < count) {\r\n                if (cmp(next, startPost) !== 0) {\r\n                    nodes.push(next);\r\n                }\r\n                next = iter.getNext();\r\n            }\r\n            return nodes;\r\n        }\r\n        else {\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * @param {!WriteRecord} writeRecord\r\n     * @param {!Path} path\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {\r\n        if (writeRecord.snap) {\r\n            return writeRecord.path.contains(path);\r\n        }\r\n        else {\r\n            // findKey can return undefined, so use !! to coerce to boolean\r\n            return !!util.findKey(writeRecord.children, function (childSnap, childName) {\r\n                return writeRecord.path.child(childName).contains(path);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n     * @private\r\n     */\r\n    WriteTree.prototype.resetTree_ = function () {\r\n        this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path.Empty);\r\n        if (this.allWrites_.length > 0) {\r\n            this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\r\n        }\r\n        else {\r\n            this.lastWriteId_ = -1;\r\n        }\r\n    };\r\n    /**\r\n     * The default filter used when constructing the tree. Keep everything that's visible.\r\n     *\r\n     * @param {!WriteRecord} write\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    WriteTree.DefaultFilter_ = function (write) {\r\n        return write.visible;\r\n    };\r\n    /**\r\n     * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n     * event data at that path.\r\n     *\r\n     * @param {!Array.<!WriteRecord>} writes\r\n     * @param {!function(!WriteRecord):boolean} filter\r\n     * @param {!Path} treeRoot\r\n     * @return {!CompoundWrite}\r\n     * @private\r\n     */\r\n    WriteTree.layerTree_ = function (writes, filter, treeRoot) {\r\n        var compoundWrite = CompoundWrite.Empty;\r\n        for (var i = 0; i < writes.length; ++i) {\r\n            var write = writes[i];\r\n            // Theory, a later set will either:\r\n            // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n            // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n            if (filter(write)) {\r\n                var writePath = write.path;\r\n                var relativePath = void 0;\r\n                if (write.snap) {\r\n                    if (treeRoot.contains(writePath)) {\r\n                        relativePath = Path.relativePath(treeRoot, writePath);\r\n                        compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\r\n                    }\r\n                    else if (writePath.contains(treeRoot)) {\r\n                        relativePath = Path.relativePath(writePath, treeRoot);\r\n                        compoundWrite = compoundWrite.addWrite(Path.Empty, write.snap.getChild(relativePath));\r\n                    }\r\n                }\r\n                else if (write.children) {\r\n                    if (treeRoot.contains(writePath)) {\r\n                        relativePath = Path.relativePath(treeRoot, writePath);\r\n                        compoundWrite = compoundWrite.addWrites(relativePath, write.children);\r\n                    }\r\n                    else if (writePath.contains(treeRoot)) {\r\n                        relativePath = Path.relativePath(writePath, treeRoot);\r\n                        if (relativePath.isEmpty()) {\r\n                            compoundWrite = compoundWrite.addWrites(Path.Empty, write.children);\r\n                        }\r\n                        else {\r\n                            var child = util.safeGet(write.children, relativePath.getFront());\r\n                            if (child) {\r\n                                // There exists a child in this node that matches the root path\r\n                                var deepNode = child.getChild(relativePath.popFront());\r\n                                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    throw util.assertionError('WriteRecord should have .snap or .children');\r\n                }\r\n            }\r\n        }\r\n        return compoundWrite;\r\n    };\r\n    return WriteTree;\r\n}());\r\n/**\r\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\r\n * just proxy to the underlying WriteTree.\r\n *\r\n * @constructor\r\n */\r\nvar WriteTreeRef = /** @class */ (function () {\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!WriteTree} writeTree\r\n     */\r\n    function WriteTreeRef(path, writeTree) {\r\n        this.treePath_ = path;\r\n        this.writeTree_ = writeTree;\r\n    }\r\n    /**\r\n     * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n     * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n     * can lead to a more expensive calculation.\r\n     *\r\n     * @param {?Node} completeServerCache\r\n     * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\r\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n        return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n    };\r\n    /**\r\n     * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n     * mix of the given server data and write data.\r\n     *\r\n     * @param {?ChildrenNode} completeServerChildren\r\n     * @return {!ChildrenNode}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {\r\n        return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);\r\n    };\r\n    /**\r\n     * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n     * if anything, needs to be applied to the event cache.\r\n     *\r\n     * Possibilities:\r\n     *\r\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n     *\r\n     * 2. Some write is completely shadowing. No events to be raised\r\n     *\r\n     * 3. Is partially shadowed. Events should be raised\r\n     *\r\n     * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n     *\r\n     * @param {!Path} path\r\n     * @param {?Node} existingEventSnap\r\n     * @param {?Node} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {\r\n        return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);\r\n    };\r\n    /**\r\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n     * a higher path, this will return the child of that write relative to the write and this path.\r\n     * Returns null if there is no write at this path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.shadowingWrite = function (path) {\r\n        return this.writeTree_.shadowingWrite(this.treePath_.child(path));\r\n    };\r\n    /**\r\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n     * the window, but may now be in the window\r\n     *\r\n     * @param {?Node} completeServerData\r\n     * @param {!NamedNode} startPost\r\n     * @param {!number} count\r\n     * @param {boolean} reverse\r\n     * @param {!Index} index\r\n     * @return {!Array.<!NamedNode>}\r\n     */\r\n    WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {\r\n        return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);\r\n    };\r\n    /**\r\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n     * complete child for this ChildKey.\r\n     *\r\n     * @param {!string} childKey\r\n     * @param {!CacheNode} existingServerCache\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {\r\n        return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);\r\n    };\r\n    /**\r\n     * Return a WriteTreeRef for a child.\r\n     *\r\n     * @param {string} childName\r\n     * @return {!WriteTreeRef}\r\n     */\r\n    WriteTreeRef.prototype.child = function (childName) {\r\n        return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\r\n    };\r\n    return WriteTreeRef;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n * @constructor\r\n */\r\nvar SyncTree = /** @class */ (function () {\r\n    /**\r\n     * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    function SyncTree(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         * @type {!ImmutableTree.<!SyncPoint>}\r\n         * @private\r\n         */\r\n        this.syncPointTree_ = ImmutableTree.Empty;\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         * @type {!WriteTree}\r\n         * @private\r\n         */\r\n        this.pendingWriteTree_ = new WriteTree();\r\n        this.tagToQueryMap_ = {};\r\n        this.queryToTagMap_ = {};\r\n    }\r\n    /**\r\n     * Apply the data changes for a user-generated set() or transaction() call.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} newData\r\n     * @param {number} writeId\r\n     * @param {boolean=} visible\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {\r\n        // Record pending write.\r\n        this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\r\n        if (!visible) {\r\n            return [];\r\n        }\r\n        else {\r\n            return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.User, path, newData));\r\n        }\r\n    };\r\n    /**\r\n     * Apply the data from a user-generated update() call\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} writeId\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {\r\n        // Record pending merge.\r\n        this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\r\n        var changeTree = ImmutableTree.fromObject(changedChildren);\r\n        return this.applyOperationToSyncPoints_(new Merge(OperationSource.User, path, changeTree));\r\n    };\r\n    /**\r\n     * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n     *\r\n     * @param {!number} writeId\r\n     * @param {boolean=} revert True if the given write failed and needs to be reverted\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.ackUserWrite = function (writeId, revert) {\r\n        if (revert === void 0) { revert = false; }\r\n        var write = this.pendingWriteTree_.getWrite(writeId);\r\n        var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\r\n        if (!needToReevaluate) {\r\n            return [];\r\n        }\r\n        else {\r\n            var affectedTree_1 = ImmutableTree.Empty;\r\n            if (write.snap != null) {\r\n                // overwrite\r\n                affectedTree_1 = affectedTree_1.set(Path.Empty, true);\r\n            }\r\n            else {\r\n                util.forEach(write.children, function (pathString, node) {\r\n                    affectedTree_1 = affectedTree_1.set(new Path(pathString), node);\r\n                });\r\n            }\r\n            return this.applyOperationToSyncPoints_(new AckUserWrite(write.path, affectedTree_1, revert));\r\n        }\r\n    };\r\n    /**\r\n     * Apply new server data for the specified path..\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} newData\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyServerOverwrite = function (path, newData) {\r\n        return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.Server, path, newData));\r\n    };\r\n    /**\r\n     * Apply new server data to be merged in at the specified path.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyServerMerge = function (path, changedChildren) {\r\n        var changeTree = ImmutableTree.fromObject(changedChildren);\r\n        return this.applyOperationToSyncPoints_(new Merge(OperationSource.Server, path, changeTree));\r\n    };\r\n    /**\r\n     * Apply a listen complete for a query\r\n     *\r\n     * @param {!Path} path\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyListenComplete = function (path) {\r\n        return this.applyOperationToSyncPoints_(new ListenComplete(OperationSource.Server, path));\r\n    };\r\n    /**\r\n     * Apply new server data for the specified tagged query.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} snap\r\n     * @param {!number} tag\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey != null) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var op = new Overwrite(OperationSource.forServerTaggedQuery(queryId), relativePath, snap);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // Query must have been removed already\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Apply server data to be merged in for the specified tagged query.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} tag\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var changeTree = ImmutableTree.fromObject(changedChildren);\r\n            var op = new Merge(OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // We've already removed the query. No big deal, ignore the update\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Apply a listen complete for a tagged query\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!number} tag\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var op = new ListenComplete(OperationSource.forServerTaggedQuery(queryId), relativePath);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // We've already removed the query. No big deal, ignore the update\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Add an event callback for the specified query.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {\r\n        var path = query.path;\r\n        var serverCache = null;\r\n        var foundAncestorDefaultView = false;\r\n        // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n        // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n        this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {\r\n            var relativePath = Path.relativePath(pathToSyncPoint, path);\r\n            serverCache = serverCache || sp.getCompleteServerCache(relativePath);\r\n            foundAncestorDefaultView =\r\n                foundAncestorDefaultView || sp.hasCompleteView();\r\n        });\r\n        var syncPoint = this.syncPointTree_.get(path);\r\n        if (!syncPoint) {\r\n            syncPoint = new SyncPoint();\r\n            this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\r\n        }\r\n        else {\r\n            foundAncestorDefaultView =\r\n                foundAncestorDefaultView || syncPoint.hasCompleteView();\r\n            serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);\r\n        }\r\n        var serverCacheComplete;\r\n        if (serverCache != null) {\r\n            serverCacheComplete = true;\r\n        }\r\n        else {\r\n            serverCacheComplete = false;\r\n            serverCache = ChildrenNode.EMPTY_NODE;\r\n            var subtree = this.syncPointTree_.subtree(path);\r\n            subtree.foreachChild(function (childName, childSyncPoint) {\r\n                var completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);\r\n                if (completeCache) {\r\n                    serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n                }\r\n            });\r\n        }\r\n        var viewAlreadyExists = syncPoint.viewExistsForQuery(query);\r\n        if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\r\n            // We need to track a tag for this query\r\n            var queryKey = SyncTree.makeQueryKey_(query);\r\n            util.assert(!(queryKey in this.queryToTagMap_), 'View does not exist, but we have a tag');\r\n            var tag = SyncTree.getNextQueryTag_();\r\n            this.queryToTagMap_[queryKey] = tag;\r\n            // Coerce to string to avoid sparse arrays.\r\n            this.tagToQueryMap_['_' + tag] = queryKey;\r\n        }\r\n        var writesCache = this.pendingWriteTree_.childWrites(path);\r\n        var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n        if (!viewAlreadyExists && !foundAncestorDefaultView) {\r\n            var view /** @type !View */ = syncPoint.viewForQuery(query);\r\n            events = events.concat(this.setupListener_(query, view));\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     * Remove event callback(s).\r\n     *\r\n     * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n     * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration If null, all callbacks are removed.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\r\n     */\r\n    SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\r\n        var _this = this;\r\n        // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n        var path = query.path;\r\n        var maybeSyncPoint = this.syncPointTree_.get(path);\r\n        var cancelEvents = [];\r\n        // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n        // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n        // not loadsAllData().\r\n        if (maybeSyncPoint &&\r\n            (query.queryIdentifier() === 'default' ||\r\n                maybeSyncPoint.viewExistsForQuery(query))) {\r\n            /**\r\n             * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\r\n             */\r\n            var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);\r\n            if (maybeSyncPoint.isEmpty()) {\r\n                this.syncPointTree_ = this.syncPointTree_.remove(path);\r\n            }\r\n            var removed = removedAndEvents.removed;\r\n            cancelEvents = removedAndEvents.events;\r\n            // We may have just removed one of many listeners and can short-circuit this whole process\r\n            // We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n            // properly set up.\r\n            //\r\n            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n            // queryId === 'default'\r\n            var removingDefault = -1 !==\r\n                removed.findIndex(function (query) {\r\n                    return query.getQueryParams().loadsAllData();\r\n                });\r\n            var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {\r\n                return parentSyncPoint.hasCompleteView();\r\n            });\r\n            if (removingDefault && !covered) {\r\n                var subtree = this.syncPointTree_.subtree(path);\r\n                // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n                // removal\r\n                if (!subtree.isEmpty()) {\r\n                    // We need to fold over our subtree and collect the listeners to send\r\n                    var newViews = this.collectDistinctViewsForSubTree_(subtree);\r\n                    // Ok, we've collected all the listens we need. Set them up.\r\n                    for (var i = 0; i < newViews.length; ++i) {\r\n                        var view = newViews[i], newQuery = view.getQuery();\r\n                        var listener = this.createListenerForView_(view);\r\n                        this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);\r\n                    }\r\n                }\r\n            }\r\n            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n            // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n            if (!covered && removed.length > 0 && !cancelError) {\r\n                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n                // default. Otherwise, we need to iterate through and cancel each individual query\r\n                if (removingDefault) {\r\n                    // We don't tag default listeners\r\n                    var defaultTag = null;\r\n                    this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);\r\n                }\r\n                else {\r\n                    removed.forEach(function (queryToRemove) {\r\n                        var tagToRemove = _this.queryToTagMap_[SyncTree.makeQueryKey_(queryToRemove)];\r\n                        _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);\r\n                    });\r\n                }\r\n            }\r\n            // Now, clear all of the tags we're tracking for the removed listens\r\n            this.removeTags_(removed);\r\n        }\r\n        return cancelEvents;\r\n    };\r\n    /**\r\n     * Returns a complete cache, if we have one, of the data at a particular path. The location must have a listener above\r\n     * it, but as this is only used by transaction code, that should always be the case anyways.\r\n     *\r\n     * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n     * @param {!Path} path The path to the data we want\r\n     * @param {Array.<number>=} writeIdsToExclude A specific set to be excluded\r\n     * @return {?Node}\r\n     */\r\n    SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {\r\n        var includeHiddenSets = true;\r\n        var writeTree = this.pendingWriteTree_;\r\n        var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {\r\n            var relativePath = Path.relativePath(pathSoFar, path);\r\n            var serverCache = syncPoint.getCompleteServerCache(relativePath);\r\n            if (serverCache) {\r\n                return serverCache;\r\n            }\r\n        });\r\n        return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n    };\r\n    /**\r\n     * This collapses multiple unfiltered views into a single view, since we only need a single\r\n     * listener for them.\r\n     *\r\n     * @param {!ImmutableTree.<!SyncPoint>} subtree\r\n     * @return {!Array.<!View>}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {\r\n        return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\r\n            if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\r\n                var completeView = maybeChildSyncPoint.getCompleteView();\r\n                return [completeView];\r\n            }\r\n            else {\r\n                // No complete view here, flatten any deeper listens into an array\r\n                var views_1 = [];\r\n                if (maybeChildSyncPoint) {\r\n                    views_1 = maybeChildSyncPoint.getQueryViews();\r\n                }\r\n                util.forEach(childMap, function (key, childViews) {\r\n                    views_1 = views_1.concat(childViews);\r\n                });\r\n                return views_1;\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Array.<!Query>} queries\r\n     * @private\r\n     */\r\n    SyncTree.prototype.removeTags_ = function (queries) {\r\n        for (var j = 0; j < queries.length; ++j) {\r\n            var removedQuery = queries[j];\r\n            if (!removedQuery.getQueryParams().loadsAllData()) {\r\n                // We should have a tag for this\r\n                var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\r\n                var removedQueryTag = this.queryToTagMap_[removedQueryKey];\r\n                delete this.queryToTagMap_[removedQueryKey];\r\n                delete this.tagToQueryMap_['_' + removedQueryTag];\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Normalizes a query to a query we send the server for listening\r\n     * @param {!Query} query\r\n     * @return {!Query} The normalized query\r\n     * @private\r\n     */\r\n    SyncTree.queryForListening_ = function (query) {\r\n        if (query.getQueryParams().loadsAllData() &&\r\n            !query.getQueryParams().isDefault()) {\r\n            // We treat queries that load all data as default queries\r\n            // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n            // from Query\r\n            return /** @type {!Query} */ query.getRef();\r\n        }\r\n        else {\r\n            return query;\r\n        }\r\n    };\r\n    /**\r\n     * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!View} view\r\n     * @return {!Array.<!Event>} This method can return events to support synchronous data sources\r\n     * @private\r\n     */\r\n    SyncTree.prototype.setupListener_ = function (query, view) {\r\n        var path = query.path;\r\n        var tag = this.tagForQuery_(query);\r\n        var listener = this.createListenerForView_(view);\r\n        var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n        var subtree = this.syncPointTree_.subtree(path);\r\n        // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n        // may need to shadow other listens as well.\r\n        if (tag) {\r\n            util.assert(!subtree.value.hasCompleteView(), \"If we're adding a query, it shouldn't be shadowed\");\r\n        }\r\n        else {\r\n            // Shadow everything at or below this location, this is a default listener.\r\n            var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\r\n                if (!relativePath.isEmpty() &&\r\n                    maybeChildSyncPoint &&\r\n                    maybeChildSyncPoint.hasCompleteView()) {\r\n                    return [maybeChildSyncPoint.getCompleteView().getQuery()];\r\n                }\r\n                else {\r\n                    // No default listener here, flatten any deeper queries into an array\r\n                    var queries_1 = [];\r\n                    if (maybeChildSyncPoint) {\r\n                        queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) { return view.getQuery(); }));\r\n                    }\r\n                    util.forEach(childMap, function (key, childQueries) {\r\n                        queries_1 = queries_1.concat(childQueries);\r\n                    });\r\n                    return queries_1;\r\n                }\r\n            });\r\n            for (var i = 0; i < queriesToStop.length; ++i) {\r\n                var queryToStop = queriesToStop[i];\r\n                this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));\r\n            }\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     *\r\n     * @param {!View} view\r\n     * @return {{hashFn: function(), onComplete: function(!string, *)}}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.createListenerForView_ = function (view) {\r\n        var _this = this;\r\n        var query = view.getQuery();\r\n        var tag = this.tagForQuery_(query);\r\n        return {\r\n            hashFn: function () {\r\n                var cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;\r\n                return cache.hash();\r\n            },\r\n            onComplete: function (status) {\r\n                if (status === 'ok') {\r\n                    if (tag) {\r\n                        return _this.applyTaggedListenComplete(query.path, tag);\r\n                    }\r\n                    else {\r\n                        return _this.applyListenComplete(query.path);\r\n                    }\r\n                }\r\n                else {\r\n                    // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                    // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                    var error = errorForServerCode(status, query);\r\n                    return _this.removeEventRegistration(query, \r\n                    /*eventRegistration*/ null, error);\r\n                }\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n     * @private\r\n     * @param {!Query} query\r\n     * @return {string}\r\n     */\r\n    SyncTree.makeQueryKey_ = function (query) {\r\n        return query.path.toString() + '$' + query.queryIdentifier();\r\n    };\r\n    /**\r\n     * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n     * @private\r\n     * @param {!string} queryKey\r\n     * @return {{queryId: !string, path: !Path}}\r\n     */\r\n    SyncTree.parseQueryKey_ = function (queryKey) {\r\n        var splitIndex = queryKey.indexOf('$');\r\n        util.assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n        return {\r\n            queryId: queryKey.substr(splitIndex + 1),\r\n            path: new Path(queryKey.substr(0, splitIndex))\r\n        };\r\n    };\r\n    /**\r\n     * Return the query associated with the given tag, if we have one\r\n     * @param {!number} tag\r\n     * @return {?string}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.queryKeyForTag_ = function (tag) {\r\n        return this.tagToQueryMap_['_' + tag];\r\n    };\r\n    /**\r\n     * Return the tag associated with the given query.\r\n     * @param {!Query} query\r\n     * @return {?number}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.tagForQuery_ = function (query) {\r\n        var queryKey = SyncTree.makeQueryKey_(query);\r\n        return util.safeGet(this.queryToTagMap_, queryKey);\r\n    };\r\n    /**\r\n     * Static accessor for query tags.\r\n     * @return {number}\r\n     * @private\r\n     */\r\n    SyncTree.getNextQueryTag_ = function () {\r\n        return SyncTree.nextQueryTag_++;\r\n    };\r\n    /**\r\n     * A helper method to apply tagged operations\r\n     *\r\n     * @param {!Path} queryPath\r\n     * @param {!Operation} operation\r\n     * @return {!Array.<!Event>}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {\r\n        var syncPoint = this.syncPointTree_.get(queryPath);\r\n        util.assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n        var writesCache = this.pendingWriteTree_.childWrites(queryPath);\r\n        return syncPoint.applyOperation(operation, writesCache, \r\n        /*serverCache=*/ null);\r\n    };\r\n    /**\r\n     * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n     *\r\n     * NOTES:\r\n     * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n  \n     * - We call applyOperation() on each SyncPoint passing three things:\r\n     *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n     *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n     *   3. A snapshot Node with cached server data, if we have it.\r\n  \n     * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n     *\r\n     * @param {!Operation} operation\r\n     * @return {!Array.<!Event>}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {\r\n        return this.applyOperationHelper_(operation, this.syncPointTree_, \r\n        /*serverCache=*/ null, this.pendingWriteTree_.childWrites(Path.Empty));\r\n    };\r\n    /**\r\n     * Recursive helper for applyOperationToSyncPoints_\r\n     *\r\n     * @private\r\n     * @param {!Operation} operation\r\n     * @param {ImmutableTree.<!SyncPoint>} syncPointTree\r\n     * @param {?Node} serverCache\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\r\n        if (operation.path.isEmpty()) {\r\n            return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n        }\r\n        else {\r\n            var syncPoint = syncPointTree.get(Path.Empty);\r\n            // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n            if (serverCache == null && syncPoint != null) {\r\n                serverCache = syncPoint.getCompleteServerCache(Path.Empty);\r\n            }\r\n            var events = [];\r\n            var childName = operation.path.getFront();\r\n            var childOperation = operation.operationForChild(childName);\r\n            var childTree = syncPointTree.children.get(childName);\r\n            if (childTree && childOperation) {\r\n                var childServerCache = serverCache\r\n                    ? serverCache.getImmediateChild(childName)\r\n                    : null;\r\n                var childWritesCache = writesCache.child(childName);\r\n                events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n            }\r\n            if (syncPoint) {\r\n                events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\r\n            }\r\n            return events;\r\n        }\r\n    };\r\n    /**\r\n     * Recursive helper for applyOperationToSyncPoints_\r\n     *\r\n     * @private\r\n     * @param {!Operation} operation\r\n     * @param {ImmutableTree.<!SyncPoint>} syncPointTree\r\n     * @param {?Node} serverCache\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\r\n        var _this = this;\r\n        var syncPoint = syncPointTree.get(Path.Empty);\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPoint.getCompleteServerCache(Path.Empty);\r\n        }\r\n        var events = [];\r\n        syncPointTree.children.inorderTraversal(function (childName, childTree) {\r\n            var childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            var childWritesCache = writesCache.child(childName);\r\n            var childOperation = operation.operationForChild(childName);\r\n            if (childOperation) {\r\n                events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n            }\r\n        });\r\n        if (syncPoint) {\r\n            events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     * Static tracker for next query tag.\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    SyncTree.nextQueryTag_ = 1;\r\n    return SyncTree;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n *\r\n * @constructor\r\n */\r\nvar SnapshotHolder = /** @class */ (function () {\r\n    function SnapshotHolder() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    SnapshotHolder.prototype.getNode = function (path) {\r\n        return this.rootNode_.getChild(path);\r\n    };\r\n    SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    };\r\n    return SnapshotHolder;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nvar AuthTokenProvider = /** @class */ (function () {\r\n    /**\r\n     * @param {!FirebaseApp} app_\r\n     */\r\n    function AuthTokenProvider(app_) {\r\n        this.app_ = app_;\r\n    }\r\n    /**\r\n     * @param {boolean} forceRefresh\r\n     * @return {!Promise<FirebaseAuthTokenData>}\r\n     */\r\n    AuthTokenProvider.prototype.getToken = function (forceRefresh) {\r\n        return this.app_['INTERNAL']['getToken'](forceRefresh).then(null, \r\n        // .catch\r\n        function (error) {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error && error.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    };\r\n    AuthTokenProvider.prototype.addTokenChangeListener = function (listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        this.app_['INTERNAL']['addAuthTokenListener'](listener);\r\n    };\r\n    AuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {\r\n        this.app_['INTERNAL']['removeAuthTokenListener'](listener);\r\n    };\r\n    AuthTokenProvider.prototype.notifyForInvalidToken = function () {\r\n        var errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.app_.name +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.app_.options) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.app_.options) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    };\r\n    return AuthTokenProvider;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n *\r\n * @constructor\r\n */\r\nvar StatsCollection = /** @class */ (function () {\r\n    function StatsCollection() {\r\n        this.counters_ = {};\r\n    }\r\n    StatsCollection.prototype.incrementCounter = function (name, amount) {\r\n        if (amount === void 0) { amount = 1; }\r\n        if (!util.contains(this.counters_, name))\r\n            this.counters_[name] = 0;\r\n        this.counters_[name] += amount;\r\n    };\r\n    StatsCollection.prototype.get = function () {\r\n        return util.deepCopy(this.counters_);\r\n    };\r\n    return StatsCollection;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar StatsManager = /** @class */ (function () {\r\n    function StatsManager() {\r\n    }\r\n    StatsManager.getCollection = function (repoInfo) {\r\n        var hashString = repoInfo.toString();\r\n        if (!this.collections_[hashString]) {\r\n            this.collections_[hashString] = new StatsCollection();\r\n        }\r\n        return this.collections_[hashString];\r\n    };\r\n    StatsManager.getOrCreateReporter = function (repoInfo, creatorFunction) {\r\n        var hashString = repoInfo.toString();\r\n        if (!this.reporters_[hashString]) {\r\n            this.reporters_[hashString] = creatorFunction();\r\n        }\r\n        return this.reporters_[hashString];\r\n    };\r\n    StatsManager.collections_ = {};\r\n    StatsManager.reporters_ = {};\r\n    return StatsManager;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ The collection to \"listen\" to.\r\n * @constructor\r\n */\r\nvar StatsListener = /** @class */ (function () {\r\n    function StatsListener(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    StatsListener.prototype.get = function () {\r\n        var newStats = this.collection_.get();\r\n        var delta = util.clone(newStats);\r\n        if (this.last_) {\r\n            util.forEach(this.last_, function (stat, value) {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    };\r\n    return StatsListener;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nvar FIRST_STATS_MIN_TIME = 10 * 1000;\r\nvar FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nvar REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\n/**\r\n * @constructor\r\n */\r\nvar StatsReporter = /** @class */ (function () {\r\n    /**\r\n     * @param collection\r\n     * @param server_\r\n     */\r\n    function StatsReporter(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        var timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    StatsReporter.prototype.includeStat = function (stat) {\r\n        this.statsToReport_[stat] = true;\r\n    };\r\n    StatsReporter.prototype.reportStats_ = function () {\r\n        var _this = this;\r\n        var stats = this.statsListener_.get();\r\n        var reportedStats = {};\r\n        var haveStatsToReport = false;\r\n        util.forEach(stats, function (stat, value) {\r\n            if (value > 0 && util.contains(_this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    };\r\n    return StatsReporter;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n * @constructor\r\n */\r\nvar EventQueue = /** @class */ (function () {\r\n    function EventQueue() {\r\n        /**\r\n         * @private\r\n         * @type {!Array.<EventList>}\r\n         */\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         * @private\r\n         * @type {!number}\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n    /**\r\n     * @param {!Array.<Event>} eventDataList The new events to queue.\r\n     */\r\n    EventQueue.prototype.queueEvents = function (eventDataList) {\r\n        // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n        var currList = null;\r\n        for (var i = 0; i < eventDataList.length; i++) {\r\n            var eventData = eventDataList[i];\r\n            var eventPath = eventData.getPath();\r\n            if (currList !== null && !eventPath.equals(currList.getPath())) {\r\n                this.eventLists_.push(currList);\r\n                currList = null;\r\n            }\r\n            if (currList === null) {\r\n                currList = new EventList(eventPath);\r\n            }\r\n            currList.add(eventData);\r\n        }\r\n        if (currList) {\r\n            this.eventLists_.push(currList);\r\n        }\r\n    };\r\n    /**\r\n     * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n     * for the specified path.\r\n     *\r\n     * It is assumed that the new events are all for the specified path.\r\n     *\r\n     * @param {!Path} path The path to raise events for.\r\n     * @param {!Array.<Event>} eventDataList The new events to raise.\r\n     */\r\n    EventQueue.prototype.raiseEventsAtPath = function (path, eventDataList) {\r\n        this.queueEvents(eventDataList);\r\n        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\r\n            return eventPath.equals(path);\r\n        });\r\n    };\r\n    /**\r\n     * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n     * locations related to the specified change path (i.e. all ancestors and descendants).\r\n     *\r\n     * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n     *\r\n     * @param {!Path} changedPath The path to raise events for.\r\n     * @param {!Array.<!Event>} eventDataList The events to raise\r\n     */\r\n    EventQueue.prototype.raiseEventsForChangedPath = function (changedPath, eventDataList) {\r\n        this.queueEvents(eventDataList);\r\n        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\r\n            return eventPath.contains(changedPath) || changedPath.contains(eventPath);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!function(!Path):boolean} predicate\r\n     * @private\r\n     */\r\n    EventQueue.prototype.raiseQueuedEventsMatchingPredicate_ = function (predicate) {\r\n        this.recursionDepth_++;\r\n        var sentAll = true;\r\n        for (var i = 0; i < this.eventLists_.length; i++) {\r\n            var eventList = this.eventLists_[i];\r\n            if (eventList) {\r\n                var eventPath = eventList.getPath();\r\n                if (predicate(eventPath)) {\r\n                    this.eventLists_[i].raise();\r\n                    this.eventLists_[i] = null;\r\n                }\r\n                else {\r\n                    sentAll = false;\r\n                }\r\n            }\r\n        }\r\n        if (sentAll) {\r\n            this.eventLists_ = [];\r\n        }\r\n        this.recursionDepth_--;\r\n    };\r\n    return EventQueue;\r\n}());\r\n/**\r\n * @param {!Path} path\r\n * @constructor\r\n */\r\nvar EventList = /** @class */ (function () {\r\n    function EventList(path_) {\r\n        this.path_ = path_;\r\n        /**\r\n         * @type {!Array.<Event>}\r\n         * @private\r\n         */\r\n        this.events_ = [];\r\n    }\r\n    /**\r\n     * @param {!Event} eventData\r\n     */\r\n    EventList.prototype.add = function (eventData) {\r\n        this.events_.push(eventData);\r\n    };\r\n    /**\r\n     * Iterates through the list and raises each event\r\n     */\r\n    EventList.prototype.raise = function () {\r\n        for (var i = 0; i < this.events_.length; i++) {\r\n            var eventData = this.events_[i];\r\n            if (eventData !== null) {\r\n                this.events_[i] = null;\r\n                var eventFn = eventData.getEventRunner();\r\n                if (logger) {\r\n                    log('event: ' + eventData.toString());\r\n                }\r\n                exceptionGuard(eventFn);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @return {!Path}\r\n     */\r\n    EventList.prototype.getPath = function () {\r\n        return this.path_;\r\n    };\r\n    return EventList;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nvar EventEmitter = /** @class */ (function () {\r\n    /**\r\n     * @param {!Array.<string>} allowedEvents_\r\n     */\r\n    function EventEmitter(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        util.assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     * @param {!string} eventType\r\n     * @param {...*} var_args\r\n     */\r\n    EventEmitter.prototype.trigger = function (eventType) {\r\n        var var_args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            var_args[_i - 1] = arguments[_i];\r\n        }\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            var listeners = this.listeners_[eventType].slice();\r\n            for (var i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, var_args);\r\n            }\r\n        }\r\n    };\r\n    EventEmitter.prototype.on = function (eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback: callback, context: context });\r\n        var eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    };\r\n    EventEmitter.prototype.off = function (eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        var listeners = this.listeners_[eventType] || [];\r\n        for (var i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    };\r\n    EventEmitter.prototype.validateEventType_ = function (eventType) {\r\n        util.assert(this.allowedEvents_.find(function (et) {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    };\r\n    return EventEmitter;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @extends {EventEmitter}\r\n */\r\nvar VisibilityMonitor = /** @class */ (function (_super) {\r\n    tslib_1.__extends(VisibilityMonitor, _super);\r\n    function VisibilityMonitor() {\r\n        var _this = _super.call(this, ['visible']) || this;\r\n        var hidden;\r\n        var visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        _this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, function () {\r\n                var visible = !document[hidden];\r\n                if (visible !== _this.visible_) {\r\n                    _this.visible_ = visible;\r\n                    _this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n        return _this;\r\n    }\r\n    VisibilityMonitor.getInstance = function () {\r\n        return new VisibilityMonitor();\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @return {Array.<boolean>}\r\n     */\r\n    VisibilityMonitor.prototype.getInitialEvent = function (eventType) {\r\n        util.assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    };\r\n    return VisibilityMonitor;\r\n}(EventEmitter));\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n *\r\n * @extends {EventEmitter}\r\n */\r\nvar OnlineMonitor = /** @class */ (function (_super) {\r\n    tslib_1.__extends(OnlineMonitor, _super);\r\n    function OnlineMonitor() {\r\n        var _this = _super.call(this, ['online']) || this;\r\n        _this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !util.isMobileCordova()) {\r\n            window.addEventListener('online', function () {\r\n                if (!_this.online_) {\r\n                    _this.online_ = true;\r\n                    _this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', function () {\r\n                if (_this.online_) {\r\n                    _this.online_ = false;\r\n                    _this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n        return _this;\r\n    }\r\n    OnlineMonitor.getInstance = function () {\r\n        return new OnlineMonitor();\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @return {Array.<boolean>}\r\n     */\r\n    OnlineMonitor.prototype.getInitialEvent = function (eventType) {\r\n        util.assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    OnlineMonitor.prototype.currentlyOnline = function () {\r\n        return this.online_;\r\n    };\r\n    return OnlineMonitor;\r\n}(EventEmitter));\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n * @constructor\r\n */\r\nvar PacketReceiver = /** @class */ (function () {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    function PacketReceiver(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    PacketReceiver.prototype.closeAfter = function (responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    };\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     * @param {number} requestNum\r\n     * @param {Array} data\r\n     */\r\n    PacketReceiver.prototype.handleResponse = function (requestNum, data) {\r\n        var _this = this;\r\n        this.pendingResponses[requestNum] = data;\r\n        var _loop_1 = function () {\r\n            var toProcess = this_1.pendingResponses[this_1.currentResponseNum];\r\n            delete this_1.pendingResponses[this_1.currentResponseNum];\r\n            var _loop_2 = function (i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(function () {\r\n                        _this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            };\r\n            for (var i = 0; i < toProcess.length; ++i) {\r\n                _loop_2(i);\r\n            }\r\n            if (this_1.currentResponseNum === this_1.closeAfterResponse) {\r\n                if (this_1.onClose) {\r\n                    this_1.onClose();\r\n                    this_1.onClose = null;\r\n                }\r\n                return \"break\";\r\n            }\r\n            this_1.currentResponseNum++;\r\n        };\r\n        var this_1 = this;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            var state_1 = _loop_1();\r\n            if (state_1 === \"break\")\r\n                break;\r\n        }\r\n    };\r\n    return PacketReceiver;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nvar FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nvar FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nvar FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nvar FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nvar FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nvar FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nvar FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nvar FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nvar FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nvar FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nvar FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\r\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nvar MAX_URL_DATA_SIZE = 1870;\r\nvar SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nvar MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n * @const\r\n * @type {number}\r\n */\r\nvar KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n * @const\r\n * @type {number}\r\n */\r\nvar LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n *\r\n * @constructor\r\n * @implements {Transport}\r\n */\r\nvar BrowserPollConnection = /** @class */ (function () {\r\n    /**\r\n     * @param {string} connId An identifier for this connection, used for logging\r\n     * @param {RepoInfo} repoInfo The info for the endpoint to send data to.\r\n     * @param {string=} transportSessionId Optional transportSessionid if we are reconnecting for an existing\r\n     *                                         transport session\r\n     * @param {string=}  lastSessionId Optional lastSessionId if the PersistentConnection has already created a\r\n     *                                     connection previously\r\n     */\r\n    function BrowserPollConnection(connId, repoInfo, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = StatsManager.getCollection(repoInfo);\r\n        this.urlFn = function (params) {\r\n            return repoInfo.connectionURL(LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     *\r\n     * @param {function(Object)} onMessage Callback when messages arrive\r\n     * @param {function()} onDisconnect Callback with connection lost.\r\n     */\r\n    BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {\r\n        var _this = this;\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(function () {\r\n            _this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            _this.onClosed_();\r\n            _this.connectTimeoutTimer_ = null;\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(function () {\r\n            if (_this.isClosed_)\r\n                return;\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                var command = args[0], arg1 = args[1], arg2 = args[2];\r\n                _this.incrementIncomingBytes_(args);\r\n                if (!_this.scriptTagHolder)\r\n                    return; // we closed the connection.\r\n                if (_this.connectTimeoutTimer_) {\r\n                    clearTimeout(_this.connectTimeoutTimer_);\r\n                    _this.connectTimeoutTimer_ = null;\r\n                }\r\n                _this.everConnected_ = true;\r\n                if (command == FIREBASE_LONGPOLL_START_PARAM) {\r\n                    _this.id = arg1;\r\n                    _this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        _this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        _this.myPacketOrderer.closeAfter(arg1, function () {\r\n                            _this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        _this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                var pN = args[0], data = args[1];\r\n                _this.incrementIncomingBytes_(args);\r\n                _this.myPacketOrderer.handleResponse(pN, data);\r\n            }, function () {\r\n                _this.onClosed_();\r\n            }, _this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            var urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (_this.scriptTagHolder.uniqueCallbackIdentifier)\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (_this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = _this.transportSessionId;\r\n            }\r\n            if (_this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = _this.lastSessionId;\r\n            }\r\n            if (!util.isNodeSdk() &&\r\n                typeof location !== 'undefined' &&\r\n                location.href &&\r\n                location.href.indexOf(FORGE_DOMAIN) !== -1) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            var connectURL = _this.urlFn(urlParams);\r\n            _this.log_('Connecting via long-poll to ' + connectURL);\r\n            _this.scriptTagHolder.addTag(connectURL, function () {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    BrowserPollConnection.prototype.start = function () {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    };\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    BrowserPollConnection.forceAllow = function () {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    };\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    BrowserPollConnection.forceDisallow = function () {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    };\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    BrowserPollConnection.isAvailable = function () {\r\n        // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n        // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n        return (BrowserPollConnection.forceAllow_ ||\r\n            (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp() &&\r\n                !util.isNodeSdk()));\r\n    };\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    BrowserPollConnection.prototype.markConnectionHealthy = function () { };\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.shutdown_ = function () {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    };\r\n    /**\r\n     * Triggered when this transport is closed\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.onClosed_ = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    BrowserPollConnection.prototype.close = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    };\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param {!Object} data The JSON data to transmit.\r\n     */\r\n    BrowserPollConnection.prototype.send = function (data) {\r\n        var dataStr = util.stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        var base64data = util.base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (var i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    };\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     * @param {!string} id\r\n     * @param {!string} pw\r\n     */\r\n    BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {\r\n        if (util.isNodeSdk())\r\n            return;\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        var urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    };\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     * @param {*} args\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        var bytesReceived = util.stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    };\r\n    return BrowserPollConnection;\r\n}());\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n * @constructor\r\n *********************************************************************************************/\r\nvar FirebaseIFrameScriptHolder = /** @class */ (function () {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        /**\r\n         * @type {CountedSet.<number, number>}\r\n         */\r\n        this.outstandingRequests = new CountedSet();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!util.isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            var script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                var currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            var iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     * @private\r\n     * @return {Element}\r\n     */\r\n    FirebaseIFrameScriptHolder.createIFrame_ = function () {\r\n        var iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                var a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                var domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n        }\r\n        else if (iframe.document) {\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    };\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.close = function () {\r\n        var _this = this;\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\r\n            this.myIFrame.doc.body.innerHTML = '';\r\n            setTimeout(function () {\r\n                if (_this.myIFrame !== null) {\r\n                    document.body.removeChild(_this.myIFrame);\r\n                    _this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        if (util.isNodeSdk() && this.myID) {\r\n            var urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            var theURL = this.urlFn(urlParams);\r\n            FirebaseIFrameScriptHolder.nodeRestRequest(theURL);\r\n        }\r\n        // Protect from being called recursively.\r\n        var onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    };\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param {!string} id - The ID of this connection\r\n     * @param {!string} pw - The password for this connection\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    };\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.count() < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            var urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            var theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            var curDataString = '';\r\n            var i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                var nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    var theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    };\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param {!string} url - The URL of the script tag.\r\n     * @param {!number} serial - The serial number of the request.\r\n     * @private\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {\r\n        var _this = this;\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial, 1);\r\n        var doNewRequest = function () {\r\n            _this.outstandingRequests.remove(serial);\r\n            _this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        var readyStateCB = function () {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    };\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param {!string} url - The URL for the script tag source.\r\n     * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {\r\n        var _this = this;\r\n        if (util.isNodeSdk()) {\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(function () {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!_this.sendNewPolls)\r\n                        return;\r\n                    var newScript_1 = _this.myIFrame.doc.createElement('script');\r\n                    newScript_1.type = 'text/javascript';\r\n                    newScript_1.async = true;\r\n                    newScript_1.src = url;\r\n                    newScript_1.onload = newScript_1.onreadystatechange = function () {\r\n                        var rstate = newScript_1.readyState;\r\n                        if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                            newScript_1.onload = newScript_1.onreadystatechange = null;\r\n                            if (newScript_1.parentNode) {\r\n                                newScript_1.parentNode.removeChild(newScript_1);\r\n                            }\r\n                            loadCB();\r\n                        }\r\n                    };\r\n                    newScript_1.onerror = function () {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        _this.sendNewPolls = false;\r\n                        _this.close();\r\n                    };\r\n                    _this.myIFrame.doc.body.appendChild(newScript_1);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    };\r\n    return FirebaseIFrameScriptHolder;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nvar WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nvar WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n * @constructor\r\n * @implements {Transport}\r\n */\r\nvar WebSocketConnection = /** @class */ (function () {\r\n    /**\r\n     * @param {string} connId identifier for this transport\r\n     * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n     */\r\n    function WebSocketConnection(connId, repoInfo, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = StatsManager.getCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId);\r\n    }\r\n    /**\r\n     * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n     * @return {string} connection url\r\n     * @private\r\n     */\r\n    WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId) {\r\n        var urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!util.isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.href &&\r\n            location.href.indexOf(FORGE_DOMAIN) !== -1) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        return repoInfo.connectionURL(WEBSOCKET, urlParams);\r\n    };\r\n    /**\r\n     *\r\n     * @param onMessage Callback when messages arrive\r\n     * @param onDisconnect Callback with connection lost.\r\n     */\r\n    WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {\r\n        var _this = this;\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            if (util.isNodeSdk()) {\r\n                var device = util.CONSTANTS.NODE_ADMIN ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                var options = {\r\n                    headers: {\r\n                        'User-Agent': \"Firebase/\" + PROTOCOL_VERSION + \"/\" + firebase.SDK_VERSION + \"/\" + process.platform + \"/\" + device\r\n                    }\r\n                };\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                var env = process['env'];\r\n                var proxy = this.connURL.indexOf('wss://') == 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n            }\r\n            else {\r\n                this.mySock = new WebSocketImpl(this.connURL);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            var error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = function () {\r\n            _this.log_('Websocket connected.');\r\n            _this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = function () {\r\n            _this.log_('Websocket connection was disconnected.');\r\n            _this.mySock = null;\r\n            _this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = function (m) {\r\n            _this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = function (e) {\r\n            _this.log_('WebSocket error.  Closing connection.');\r\n            var error = e.message || e.data;\r\n            if (error) {\r\n                _this.log_(error);\r\n            }\r\n            _this.onClosed_();\r\n        };\r\n    };\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    WebSocketConnection.prototype.start = function () { };\r\n    WebSocketConnection.forceDisallow = function () {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    };\r\n    WebSocketConnection.isAvailable = function () {\r\n        var isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            var oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    };\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     * @return {boolean}\r\n     */\r\n    WebSocketConnection.previouslyFailed = function () {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    };\r\n    WebSocketConnection.prototype.markConnectionHealthy = function () {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    };\r\n    WebSocketConnection.prototype.appendFrame_ = function (data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length == this.totalFrames) {\r\n            var fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            var jsonMess = util.jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    };\r\n    /**\r\n     * @param {number} frameCount The number of frames we are expecting from the server\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    };\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @param {!String} data\r\n     * @return {?String} Any remaining data to be process, or null if there is none\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.extractFrameCount_ = function (data) {\r\n        util.assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            var frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    };\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess The frame data\r\n     */\r\n    WebSocketConnection.prototype.handleIncomingFrame = function (mess) {\r\n        if (this.mySock === null)\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        var data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            var remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Send a message to the server\r\n     * @param {Object} data The JSON object to transmit\r\n     */\r\n    WebSocketConnection.prototype.send = function (data) {\r\n        this.resetKeepAlive();\r\n        var dataStr = util.stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (var i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    };\r\n    WebSocketConnection.prototype.shutdown_ = function () {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    };\r\n    WebSocketConnection.prototype.onClosed_ = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    WebSocketConnection.prototype.close = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    };\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    WebSocketConnection.prototype.resetKeepAlive = function () {\r\n        var _this = this;\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(function () {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (_this.mySock) {\r\n                _this.sendString_('0');\r\n            }\r\n            _this.resetKeepAlive();\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    };\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param {string} str String to send.\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.sendString_ = function (str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    };\r\n    /**\r\n     * Number of response before we consider the connection \"healthy.\"\r\n     * @type {number}\r\n     */\r\n    WebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n    /**\r\n     * Time to wait for the connection te become healthy before giving up.\r\n     * @type {number}\r\n     */\r\n    WebSocketConnection.healthyTimeout = 30000;\r\n    return WebSocketConnection;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n * @constructor\r\n */\r\nvar TransportManager = /** @class */ (function () {\r\n    /**\r\n     * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\r\n     */\r\n    function TransportManager(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    Object.defineProperty(TransportManager, \"ALL_TRANSPORTS\", {\r\n        /**\r\n         * @const\r\n         * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\r\n         */\r\n        get: function () {\r\n            return [BrowserPollConnection, WebSocketConnection];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @param {!RepoInfo} repoInfo\r\n     * @private\r\n     */\r\n    TransportManager.prototype.initTransports_ = function (repoInfo) {\r\n        var isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable)\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            var transports_1 = (this.transports_ = []);\r\n            each(TransportManager.ALL_TRANSPORTS, function (i, transport) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports_1.push(transport);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\r\n     * initial transport to use\r\n     */\r\n    TransportManager.prototype.initialTransport = function () {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    };\r\n    /**\r\n     * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\r\n     * transport, or null\r\n     */\r\n    TransportManager.prototype.upgradeTransport = function () {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    return TransportManager;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nvar UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nvar DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nvar BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nvar BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nvar MESSAGE_TYPE = 't';\r\nvar MESSAGE_DATA = 'd';\r\nvar CONTROL_SHUTDOWN = 's';\r\nvar CONTROL_RESET = 'r';\r\nvar CONTROL_ERROR = 'e';\r\nvar CONTROL_PONG = 'o';\r\nvar SWITCH_ACK = 'a';\r\nvar END_TRANSMISSION = 'n';\r\nvar PING = 'p';\r\nvar SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n *\r\n * @constructor\r\n */\r\nvar Connection = /** @class */ (function () {\r\n    /**\r\n     * @param {!string} id - an id for this connection\r\n     * @param {!RepoInfo} repoInfo_ - the info for the endpoint to connect to\r\n     * @param {function(Object)} onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param {function(number, string)} onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param {function()} onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param {function(string)} onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param {string=} lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    function Connection(id, repoInfo_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     * @private\r\n     */\r\n    Connection.prototype.start_ = function () {\r\n        var _this = this;\r\n        var conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, undefined, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        var onMessageReceived = this.connReceiver_(this.conn_);\r\n        var onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(function () {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        var healthyTimeout_ms = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeout_ms > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(function () {\r\n                _this.healthyTimeout_ = null;\r\n                if (!_this.isHealthy_) {\r\n                    if (_this.conn_ &&\r\n                        _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        _this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            _this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        _this.isHealthy_ = true;\r\n                        _this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (_this.conn_ &&\r\n                        _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        _this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            _this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        _this.log_('Closing unhealthy connection after timeout.');\r\n                        _this.close();\r\n                    }\r\n                }\r\n            }, Math.floor(healthyTimeout_ms));\r\n        }\r\n    };\r\n    /**\r\n     * @return {!string}\r\n     * @private\r\n     */\r\n    Connection.prototype.nextTransportId_ = function () {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    };\r\n    Connection.prototype.disconnReceiver_ = function (conn) {\r\n        var _this = this;\r\n        return function (everConnected) {\r\n            if (conn === _this.conn_) {\r\n                _this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === _this.secondaryConn_) {\r\n                _this.log_('Secondary connection lost.');\r\n                _this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                _this.log_('closing an old connection');\r\n            }\r\n        };\r\n    };\r\n    Connection.prototype.connReceiver_ = function (conn) {\r\n        var _this = this;\r\n        return function (message) {\r\n            if (_this.state_ != 2 /* DISCONNECTED */) {\r\n                if (conn === _this.rx_) {\r\n                    _this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === _this.secondaryConn_) {\r\n                    _this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    _this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     *\r\n     * @param {Object} dataMsg An arbitrary data message to be sent to the server\r\n     */\r\n    Connection.prototype.sendRequest = function (dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        var msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    };\r\n    Connection.prototype.tryCleanupConnection = function () {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryControl_ = function (controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            var cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {\r\n        var layer = requireKey('t', parsedData);\r\n        var data = requireKey('d', parsedData);\r\n        if (layer == 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer == 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    };\r\n    Connection.prototype.upgradeIfSecondaryHealthy_ = function () {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    };\r\n    Connection.prototype.proceedWithUpgrade_ = function () {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    };\r\n    Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        var layer = requireKey('t', parsedData);\r\n        var data = requireKey('d', parsedData);\r\n        if (layer == 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer == 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    };\r\n    Connection.prototype.onDataMessage_ = function (message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    };\r\n    Connection.prototype.onPrimaryResponse_ = function () {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    };\r\n    Connection.prototype.onControl_ = function (controlData) {\r\n        var cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            var payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                this.onHandshake_(payload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (var i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {Object} handshake The handshake data returned from the server\r\n     * @private\r\n     */\r\n    Connection.prototype.onHandshake_ = function (handshake) {\r\n        var timestamp = handshake.ts;\r\n        var version = handshake.v;\r\n        var host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.updateHost(host);\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ == 0 /* CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    };\r\n    Connection.prototype.tryStartUpgrade_ = function () {\r\n        var conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    };\r\n    Connection.prototype.startUpgrade_ = function (conn) {\r\n        var _this = this;\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        var onMessage = this.connReceiver_(this.secondaryConn_);\r\n        var onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(function () {\r\n            if (_this.secondaryConn_) {\r\n                _this.log_('Timed out trying to upgrade.');\r\n                _this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    };\r\n    Connection.prototype.onReset_ = function (host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.updateHost(host);\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    };\r\n    Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {\r\n        var _this = this;\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(function () {\r\n                _this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    };\r\n    Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryConnectionLost_ = function () {\r\n        var conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     * @private\r\n     */\r\n    Connection.prototype.onConnectionLost_ = function (everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    };\r\n    /**\r\n     *\r\n     * @param {string} reason\r\n     * @private\r\n     */\r\n    Connection.prototype.onConnectionShutdown_ = function (reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    };\r\n    Connection.prototype.sendData_ = function (data) {\r\n        if (this.state_ !== 1 /* CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    };\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    Connection.prototype.close = function () {\r\n        if (this.state_ !== 2 /* DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @private\r\n     */\r\n    Connection.prototype.closeConnections_ = function () {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    };\r\n    return Connection;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nvar ServerActions = /** @class */ (function () {\r\n    function ServerActions() {\r\n    }\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     * @param {string=} hash\r\n     */\r\n    ServerActions.prototype.put = function (pathString, data, onComplete, hash) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, ?string)} onComplete\r\n     * @param {string=} hash\r\n     */\r\n    ServerActions.prototype.merge = function (pathString, data, onComplete, hash) { };\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param {string} token The authentication token\r\n     */\r\n    ServerActions.prototype.refreshAuthToken = function (token) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) { };\r\n    /**\r\n     * @param {Object.<string, *>} stats\r\n     */\r\n    ServerActions.prototype.reportStats = function (stats) { };\r\n    return ServerActions;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar RECONNECT_MIN_DELAY = 1000;\r\nvar RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nvar RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nvar RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nvar RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nvar SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nvar INVALID_AUTH_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nvar PersistentConnection = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PersistentConnection, _super);\r\n    /**\r\n     * @implements {ServerActions}\r\n     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\r\n     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\r\n     * @param onConnectStatus_\r\n     * @param onServerInfoUpdate_\r\n     * @param authTokenProvider_\r\n     * @param authOverride_\r\n     */\r\n    function PersistentConnection(repoInfo_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, authOverride_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.repoInfo_ = repoInfo_;\r\n        _this.onDataUpdate_ = onDataUpdate_;\r\n        _this.onConnectStatus_ = onConnectStatus_;\r\n        _this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        _this.authTokenProvider_ = authTokenProvider_;\r\n        _this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        _this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        _this.log_ = logWrapper('p:' + _this.id + ':');\r\n        /** @private {Object} */\r\n        _this.interruptReasons_ = {};\r\n        _this.listens_ = {};\r\n        _this.outstandingPuts_ = [];\r\n        _this.outstandingPutCount_ = 0;\r\n        _this.onDisconnectRequestQueue_ = [];\r\n        _this.connected_ = false;\r\n        _this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        _this.securityDebugCallback_ = null;\r\n        _this.lastSessionId = null;\r\n        /** @private {number|null} */\r\n        _this.establishConnectionTimer_ = null;\r\n        /** @private {boolean} */\r\n        _this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        _this.requestCBHash_ = {};\r\n        _this.requestNumber_ = 0;\r\n        /** @private {?{\r\n         *   sendRequest(Object),\r\n         *   close()\r\n         * }} */\r\n        _this.realtime_ = null;\r\n        /** @private {string|null} */\r\n        _this.authToken_ = null;\r\n        _this.forceTokenRefresh_ = false;\r\n        _this.invalidAuthTokenCount_ = 0;\r\n        _this.firstConnection_ = true;\r\n        _this.lastConnectionAttemptTime_ = null;\r\n        _this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !util.isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        _this.scheduleConnect_(0);\r\n        VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {!string} action\r\n     * @param {*} body\r\n     * @param {function(*)=} onResponse\r\n     * @protected\r\n     */\r\n    PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {\r\n        var curReqNum = ++this.requestNumber_;\r\n        var msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(util.stringify(msg));\r\n        util.assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {\r\n        var queryId = query.queryIdentifier();\r\n        var pathString = query.path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        this.listens_[pathString] = this.listens_[pathString] || {};\r\n        util.assert(query.getQueryParams().isDefault() ||\r\n            !query.getQueryParams().loadsAllData(), 'listen() called for non-default but complete query');\r\n        util.assert(!this.listens_[pathString][queryId], 'listen() called twice for same path/queryId.');\r\n        var listenSpec = {\r\n            onComplete: onComplete,\r\n            hashFn: currentHashFn,\r\n            query: query,\r\n            tag: tag\r\n        };\r\n        this.listens_[pathString][queryId] = listenSpec;\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!{onComplete(),\r\n     *           hashFn():!string,\r\n     *           query: !Query,\r\n     *           tag: ?number}} listenSpec\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.sendListen_ = function (listenSpec) {\r\n        var _this = this;\r\n        var query = listenSpec.query;\r\n        var pathString = query.path.toString();\r\n        var queryId = query.queryIdentifier();\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        var req = { /*path*/ p: pathString };\r\n        var action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query.queryObject();\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, function (message) {\r\n            var payload = message[ /*data*/'d'];\r\n            var status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            var currentListenSpec = _this.listens_[pathString] && _this.listens_[pathString][queryId];\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                _this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    _this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @param {*} payload\r\n     * @param {!Query} query\r\n     * @private\r\n     */\r\n    PersistentConnection.warnOnListenWarnings_ = function (payload, query) {\r\n        if (payload && typeof payload === 'object' && util.contains(payload, 'w')) {\r\n            var warnings = util.safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                var indexSpec = '\".indexOn\": \"' +\r\n                    query\r\n                        .getQueryParams()\r\n                        .getIndex()\r\n                        .toString() +\r\n                    '\"';\r\n                var indexPath = query.path.toString();\r\n                warn(\"Using an unspecified index. Your data will be downloaded and \" +\r\n                    (\"filtered on the client. Consider adding \" + indexSpec + \" at \") +\r\n                    (indexPath + \" to your security rules for better performance.\"));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.refreshAuthToken = function (token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, function () { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    };\r\n    /**\r\n     * @param {!string} credential\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        var isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || util.isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    };\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    PersistentConnection.prototype.tryAuth = function () {\r\n        var _this = this;\r\n        if (this.connected_ && this.authToken_) {\r\n            var token_1 = this.authToken_;\r\n            var authMethod = util.isValidFormat(token_1) ? 'auth' : 'gauth';\r\n            var requestData = { cred: token_1 };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, function (res) {\r\n                var status = res[ /*status*/'s'];\r\n                var data = res[ /*data*/'d'] || 'error';\r\n                if (_this.authToken_ === token_1) {\r\n                    if (status === 'ok') {\r\n                        _this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        _this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.unlisten = function (query, tag) {\r\n        var pathString = query.path.toString();\r\n        var queryId = query.queryIdentifier();\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        util.assert(query.getQueryParams().isDefault() ||\r\n            !query.getQueryParams().loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        var listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        var req = { /*path*/ p: pathString };\r\n        var action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'o',\r\n                data: data,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'om',\r\n                data: data,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {\r\n        var request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, function (response) {\r\n            if (onComplete) {\r\n                setTimeout(function () {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    };\r\n    PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {\r\n        var request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined)\r\n            request[ /*hash*/'h'] = hash;\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action: action,\r\n            request: request,\r\n            onComplete: onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        var index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendPut_ = function (index) {\r\n        var _this = this;\r\n        var action = this.outstandingPuts_[index].action;\r\n        var request = this.outstandingPuts_[index].request;\r\n        var onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, function (message) {\r\n            _this.log_(action + ' response', message);\r\n            delete _this.outstandingPuts_[index];\r\n            _this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (_this.outstandingPutCount_ === 0) {\r\n                _this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete)\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n        });\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.reportStats = function (stats) {\r\n        var _this = this;\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            var request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, function (result) {\r\n                var status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    var errorReason = result[ /* data */'d'];\r\n                    _this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @param {*} message\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.onDataMessage_ = function (message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + util.stringify(message));\r\n            var reqNum = message['r'];\r\n            var onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onDataPush_ = function (action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd')\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        else if (action === 'm')\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        else if (action === 'c')\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        else if (action === 'ac')\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        else if (action === 'sd')\r\n            this.onSecurityDebugPacket_(body);\r\n        else\r\n            error('Unrecognized action received from server: ' +\r\n                util.stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n    };\r\n    PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    };\r\n    PersistentConnection.prototype.scheduleConnect_ = function (timeout) {\r\n        var _this = this;\r\n        util.assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(function () {\r\n            _this.establishConnectionTimer_ = null;\r\n            _this.establishConnection_();\r\n        }, Math.floor(timeout));\r\n    };\r\n    /**\r\n     * @param {boolean} visible\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.onVisible_ = function (visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    };\r\n    PersistentConnection.prototype.onOnline_ = function (online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onRealtimeDisconnect_ = function () {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT)\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    };\r\n    PersistentConnection.prototype.establishConnection_ = function () {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            var onDataMessage_1 = this.onDataMessage_.bind(this);\r\n            var onReady_1 = this.onReady_.bind(this);\r\n            var onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);\r\n            var connId_1 = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            var self_1 = this;\r\n            var lastSessionId_1 = this.lastSessionId;\r\n            var canceled_1 = false;\r\n            var connection_1 = null;\r\n            var closeFn_1 = function () {\r\n                if (connection_1) {\r\n                    connection_1.close();\r\n                }\r\n                else {\r\n                    canceled_1 = true;\r\n                    onDisconnect_1();\r\n                }\r\n            };\r\n            var sendRequestFn = function (msg) {\r\n                util.assert(connection_1, \"sendRequest call when we're not connected not allowed.\");\r\n                connection_1.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn_1,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            var forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            // First fetch auth token, and establish connection after fetching the token was successful\r\n            this.authTokenProvider_\r\n                .getToken(forceRefresh)\r\n                .then(function (result) {\r\n                if (!canceled_1) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    self_1.authToken_ = result && result.accessToken;\r\n                    connection_1 = new Connection(connId_1, self_1.repoInfo_, onDataMessage_1, onReady_1, onDisconnect_1, \r\n                    /* onKill= */ function (reason) {\r\n                        warn(reason + ' (' + self_1.repoInfo_.toString() + ')');\r\n                        self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId_1);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            })\r\n                .then(null, function (error) {\r\n                self_1.log_('Failed to get token: ' + error);\r\n                if (!canceled_1) {\r\n                    if (util.CONSTANTS.NODE_ADMIN) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error);\r\n                    }\r\n                    closeFn_1();\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} reason\r\n     */\r\n    PersistentConnection.prototype.interrupt = function (reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} reason\r\n     */\r\n    PersistentConnection.prototype.resume = function (reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (util.isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {\r\n        var delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    };\r\n    PersistentConnection.prototype.cancelSentTransactions_ = function () {\r\n        for (var i = 0; i < this.outstandingPuts_.length; i++) {\r\n            var put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete)\r\n                    put.onComplete('disconnect');\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0)\r\n            this.outstandingPuts_ = [];\r\n    };\r\n    /**\r\n     * @param {!string} pathString\r\n     * @param {Array.<*>=} query\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        var queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(function (q) { return ObjectToUniqueKey(q); }).join('$');\r\n        }\r\n        var listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete)\r\n            listen.onComplete('permission_denied');\r\n    };\r\n    /**\r\n     * @param {!string} pathString\r\n     * @param {!string} queryId\r\n     * @return {{queries:Array.<Query>, onComplete:function(string)}}\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {\r\n        var normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        var listen;\r\n        if (this.listens_[normalizedPathString] !== undefined) {\r\n            listen = this.listens_[normalizedPathString][queryId];\r\n            delete this.listens_[normalizedPathString][queryId];\r\n            if (util.getCount(this.listens_[normalizedPathString]) === 0) {\r\n                delete this.listens_[normalizedPathString];\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    };\r\n    PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.restoreState_ = function () {\r\n        var _this = this;\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        util.forEach(this.listens_, function (pathString, queries) {\r\n            util.forEach(queries, function (key, listenSpec) {\r\n                _this.sendListen_(listenSpec);\r\n            });\r\n        });\r\n        for (var i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i])\r\n                this.sendPut_(i);\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            var request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n    };\r\n    /**\r\n     * Sends client stats for first connection\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.sendConnectStats_ = function () {\r\n        var stats = {};\r\n        var clientName = 'js';\r\n        if (util.CONSTANTS.NODE_ADMIN) {\r\n            clientName = 'admin_node';\r\n        }\r\n        else if (util.CONSTANTS.NODE_CLIENT) {\r\n            clientName = 'node';\r\n        }\r\n        stats['sdk.' + clientName + '.' + firebase.SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (util.isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (util.isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.shouldReconnect_ = function () {\r\n        var online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return util.isEmpty(this.interruptReasons_) && online;\r\n    };\r\n    /**\r\n     * @private\r\n     */\r\n    PersistentConnection.nextPersistentConnectionId_ = 0;\r\n    /**\r\n     * Counter for number of connections created. Mainly used for tagging in the logs\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    PersistentConnection.nextConnectionId_ = 0;\r\n    return PersistentConnection;\r\n}(ServerActions));\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nvar ReadonlyRestClient = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ReadonlyRestClient, _super);\r\n    /**\r\n     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\r\n     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\r\n     * @param {AuthTokenProvider} authTokenProvider_\r\n     * @implements {ServerActions}\r\n     */\r\n    function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.repoInfo_ = repoInfo_;\r\n        _this.onDataUpdate_ = onDataUpdate_;\r\n        _this.authTokenProvider_ = authTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        _this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         *\r\n         * @private {!Object.<string, !Object>}\r\n         */\r\n        _this.listens_ = {};\r\n        return _this;\r\n    }\r\n    ReadonlyRestClient.prototype.reportStats = function (stats) {\r\n        throw new Error('Method not implemented.');\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @param {?number=} tag\r\n     * @return {string}\r\n     * @private\r\n     */\r\n    ReadonlyRestClient.getListenId_ = function (query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            util.assert(query.getQueryParams().isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query.path.toString();\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {\r\n        var _this = this;\r\n        var pathString = query.path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query.queryIdentifier());\r\n        // Mark this listener so we can tell if it's removed.\r\n        var listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        var thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        var queryStringParameters = query\r\n            .getQueryParams()\r\n            .toRestQueryStringParameters();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, function (error, result) {\r\n            var data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                _this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (util.safeGet(_this.listens_, listenId) === thisListen) {\r\n                var status_1;\r\n                if (!error) {\r\n                    status_1 = 'ok';\r\n                }\r\n                else if (error == 401) {\r\n                    status_1 = 'permission_denied';\r\n                }\r\n                else {\r\n                    status_1 = 'rest_error:' + error;\r\n                }\r\n                onComplete(status_1, null);\r\n            }\r\n        });\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.unlisten = function (query, tag) {\r\n        var listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.refreshAuthToken = function (token) {\r\n        // no-op since we just always call getToken.\r\n    };\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     *\r\n     * @param {!string} pathString\r\n     * @param {!Object.<string, *>} queryStringParameters\r\n     * @param {?function(?number, *=)} callback\r\n     * @private\r\n     */\r\n    ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {\r\n        var _this = this;\r\n        if (queryStringParameters === void 0) { queryStringParameters = {}; }\r\n        queryStringParameters['format'] = 'export';\r\n        this.authTokenProvider_\r\n            .getToken(/*forceRefresh=*/ false)\r\n            .then(function (authTokenData) {\r\n            var authToken = authTokenData && authTokenData.accessToken;\r\n            if (authToken) {\r\n                queryStringParameters['auth'] = authToken;\r\n            }\r\n            var url = (_this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                _this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                _this.repoInfo_.namespace +\r\n                util.querystring(queryStringParameters);\r\n            _this.log_('Sending REST request for ' + url);\r\n            var xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = function () {\r\n                if (callback && xhr.readyState === 4) {\r\n                    _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    var res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = util.jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    };\r\n    return ReadonlyRestClient;\r\n}(ServerActions));\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nvar Repo = /** @class */ (function () {\r\n    /**\r\n     * @param {!RepoInfo} repoInfo_\r\n     * @param {boolean} forceRestClient\r\n     * @param {!FirebaseApp} app\r\n     */\r\n    function Repo(repoInfo_, forceRestClient, app) {\r\n        var _this = this;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.app = app;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        // A list of data pieces and paths to be set when this client disconnects.\r\n        this.onDisconnect_ = new SparseSnapshotTree();\r\n        /**\r\n         * TODO: This should be @private but it's used by test_access.js and internal.js\r\n         * @type {?PersistentConnection}\r\n         */\r\n        this.persistentConnection_ = null;\r\n        /** @type {!AuthTokenProvider} */\r\n        var authTokenProvider = new AuthTokenProvider(app);\r\n        this.stats_ = StatsManager.getCollection(repoInfo_);\r\n        if (forceRestClient || beingCrawled()) {\r\n            this.server_ = new ReadonlyRestClient(this.repoInfo_, this.onDataUpdate_.bind(this), authTokenProvider);\r\n            // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n            setTimeout(this.onConnectStatus_.bind(this, true), 0);\r\n        }\r\n        else {\r\n            var authOverride = app.options['databaseAuthVariableOverride'];\r\n            // Validate authOverride\r\n            if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n                if (typeof authOverride !== 'object') {\r\n                    throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n                }\r\n                try {\r\n                    util.stringify(authOverride);\r\n                }\r\n                catch (e) {\r\n                    throw new Error('Invalid authOverride provided: ' + e);\r\n                }\r\n            }\r\n            this.persistentConnection_ = new PersistentConnection(this.repoInfo_, this.onDataUpdate_.bind(this), this.onConnectStatus_.bind(this), this.onServerInfoUpdate_.bind(this), authTokenProvider, authOverride);\r\n            this.server_ = this.persistentConnection_;\r\n        }\r\n        authTokenProvider.addTokenChangeListener(function (token) {\r\n            _this.server_.refreshAuthToken(token);\r\n        });\r\n        // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n        // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n        this.statsReporter_ = StatsManager.getOrCreateReporter(repoInfo_, function () { return new StatsReporter(_this.stats_, _this.server_); });\r\n        this.transactions_init_();\r\n        // Used for .info.\r\n        this.infoData_ = new SnapshotHolder();\r\n        this.infoSyncTree_ = new SyncTree({\r\n            startListening: function (query, tag, currentHashFn, onComplete) {\r\n                var infoEvents = [];\r\n                var node = _this.infoData_.getNode(query.path);\r\n                // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n                // on initial data...\r\n                if (!node.isEmpty()) {\r\n                    infoEvents = _this.infoSyncTree_.applyServerOverwrite(query.path, node);\r\n                    setTimeout(function () {\r\n                        onComplete('ok');\r\n                    }, 0);\r\n                }\r\n                return infoEvents;\r\n            },\r\n            stopListening: function () { }\r\n        });\r\n        this.updateInfo_('connected', false);\r\n        this.serverSyncTree_ = new SyncTree({\r\n            startListening: function (query, tag, currentHashFn, onComplete) {\r\n                _this.server_.listen(query, currentHashFn, tag, function (status, data) {\r\n                    var events = onComplete(status, data);\r\n                    _this.eventQueue_.raiseEventsForChangedPath(query.path, events);\r\n                });\r\n                // No synchronous events for network-backed sync trees\r\n                return [];\r\n            },\r\n            stopListening: function (query, tag) {\r\n                _this.server_.unlisten(query, tag);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @return {string}  The URL corresponding to the root of this Firebase.\r\n     */\r\n    Repo.prototype.toString = function () {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    };\r\n    /**\r\n     * @return {!string} The namespace represented by the repo.\r\n     */\r\n    Repo.prototype.name = function () {\r\n        return this.repoInfo_.namespace;\r\n    };\r\n    /**\r\n     * @return {!number} The time in milliseconds, taking the server offset into account if we have one.\r\n     */\r\n    Repo.prototype.serverTime = function () {\r\n        var offsetNode = this.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n        var offset = offsetNode.val() || 0;\r\n        return new Date().getTime() + offset;\r\n    };\r\n    /**\r\n     * Generate ServerValues using some variables from the repo object.\r\n     * @return {!Object}\r\n     */\r\n    Repo.prototype.generateServerValues = function () {\r\n        return generateWithValues({\r\n            timestamp: this.serverTime()\r\n        });\r\n    };\r\n    /**\r\n     * Called by realtime when we get new messages from the server.\r\n     *\r\n     * @private\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {boolean} isMerge\r\n     * @param {?number} tag\r\n     */\r\n    Repo.prototype.onDataUpdate_ = function (pathString, data, isMerge, tag) {\r\n        // For testing.\r\n        this.dataUpdateCount++;\r\n        var path = new Path(pathString);\r\n        data = this.interceptServerDataCallback_\r\n            ? this.interceptServerDataCallback_(pathString, data)\r\n            : data;\r\n        var events = [];\r\n        if (tag) {\r\n            if (isMerge) {\r\n                var taggedChildren = util.map(data, function (raw) {\r\n                    return nodeFromJSON$1(raw);\r\n                });\r\n                events = this.serverSyncTree_.applyTaggedQueryMerge(path, taggedChildren, tag);\r\n            }\r\n            else {\r\n                var taggedSnap = nodeFromJSON$1(data);\r\n                events = this.serverSyncTree_.applyTaggedQueryOverwrite(path, taggedSnap, tag);\r\n            }\r\n        }\r\n        else if (isMerge) {\r\n            var changedChildren = util.map(data, function (raw) {\r\n                return nodeFromJSON$1(raw);\r\n            });\r\n            events = this.serverSyncTree_.applyServerMerge(path, changedChildren);\r\n        }\r\n        else {\r\n            var snap = nodeFromJSON$1(data);\r\n            events = this.serverSyncTree_.applyServerOverwrite(path, snap);\r\n        }\r\n        var affectedPath = path;\r\n        if (events.length > 0) {\r\n            // Since we have a listener outstanding for each transaction, receiving any events\r\n            // is a proxy for some change having occurred.\r\n            affectedPath = this.rerunTransactions_(path);\r\n        }\r\n        this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);\r\n    };\r\n    /**\r\n     * TODO: This should be @private but it's used by test_access.js and internal.js\r\n     * @param {?function(!string, *):*} callback\r\n     * @private\r\n     */\r\n    Repo.prototype.interceptServerData_ = function (callback) {\r\n        this.interceptServerDataCallback_ = callback;\r\n    };\r\n    /**\r\n     * @param {!boolean} connectStatus\r\n     * @private\r\n     */\r\n    Repo.prototype.onConnectStatus_ = function (connectStatus) {\r\n        this.updateInfo_('connected', connectStatus);\r\n        if (connectStatus === false) {\r\n            this.runOnDisconnectEvents_();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Object} updates\r\n     * @private\r\n     */\r\n    Repo.prototype.onServerInfoUpdate_ = function (updates) {\r\n        var _this = this;\r\n        each(updates, function (value, key) {\r\n            _this.updateInfo_(key, value);\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     * @param {!string} pathString\r\n     * @param {*} value\r\n     * @private\r\n     */\r\n    Repo.prototype.updateInfo_ = function (pathString, value) {\r\n        var path = new Path('/.info/' + pathString);\r\n        var newNode = nodeFromJSON$1(value);\r\n        this.infoData_.updateSnapshot(path, newNode);\r\n        var events = this.infoSyncTree_.applyServerOverwrite(path, newNode);\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n    };\r\n    /**\r\n     * @return {!number}\r\n     * @private\r\n     */\r\n    Repo.prototype.getNextWriteId_ = function () {\r\n        return this.nextWriteId_++;\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} newVal\r\n     * @param {number|string|null} newPriority\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.setWithPriority = function (path, newVal, newPriority, onComplete) {\r\n        var _this = this;\r\n        this.log_('set', {\r\n            path: path.toString(),\r\n            value: newVal,\r\n            priority: newPriority\r\n        });\r\n        // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n        // (b) store unresolved paths on JSON parse\r\n        var serverValues = this.generateServerValues();\r\n        var newNodeUnresolved = nodeFromJSON$1(newVal, newPriority);\r\n        var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\r\n        var writeId = this.getNextWriteId_();\r\n        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, writeId, true);\r\n        this.eventQueue_.queueEvents(events);\r\n        this.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), function (status, errorReason) {\r\n            var success = status === 'ok';\r\n            if (!success) {\r\n                warn('set at ' + path + ' failed: ' + status);\r\n            }\r\n            var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId, !success);\r\n            _this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n        var affectedPath = this.abortTransactions_(path);\r\n        this.rerunTransactions_(affectedPath);\r\n        // We queued the events above, so just flush the queue here\r\n        this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!Object} childrenToMerge\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.update = function (path, childrenToMerge, onComplete) {\r\n        var _this = this;\r\n        this.log_('update', { path: path.toString(), value: childrenToMerge });\r\n        // Start with our existing data and merge each child into it.\r\n        var empty = true;\r\n        var serverValues = this.generateServerValues();\r\n        var changedChildren = {};\r\n        util.forEach(childrenToMerge, function (changedKey, changedValue) {\r\n            empty = false;\r\n            var newNodeUnresolved = nodeFromJSON$1(changedValue);\r\n            changedChildren[changedKey] = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\r\n        });\r\n        if (!empty) {\r\n            var writeId_1 = this.getNextWriteId_();\r\n            var events = this.serverSyncTree_.applyUserMerge(path, changedChildren, writeId_1);\r\n            this.eventQueue_.queueEvents(events);\r\n            this.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {\r\n                var success = status === 'ok';\r\n                if (!success) {\r\n                    warn('update at ' + path + ' failed: ' + status);\r\n                }\r\n                var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId_1, !success);\r\n                var affectedPath = clearEvents.length > 0 ? _this.rerunTransactions_(path) : path;\r\n                _this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);\r\n                _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n            });\r\n            util.forEach(childrenToMerge, function (changedPath) {\r\n                var affectedPath = _this.abortTransactions_(path.child(changedPath));\r\n                _this.rerunTransactions_(affectedPath);\r\n            });\r\n            // We queued the events above, so just flush the queue here\r\n            this.eventQueue_.raiseEventsForChangedPath(path, []);\r\n        }\r\n        else {\r\n            log(\"update() called with empty data.  Don't do anything.\");\r\n            this.callOnCompleteCallback(onComplete, 'ok');\r\n        }\r\n    };\r\n    /**\r\n     * Applies all of the changes stored up in the onDisconnect_ tree.\r\n     * @private\r\n     */\r\n    Repo.prototype.runOnDisconnectEvents_ = function () {\r\n        var _this = this;\r\n        this.log_('onDisconnectEvents');\r\n        var serverValues = this.generateServerValues();\r\n        var resolvedOnDisconnectTree = resolveDeferredValueTree(this.onDisconnect_, serverValues);\r\n        var events = [];\r\n        resolvedOnDisconnectTree.forEachTree(Path.Empty, function (path, snap) {\r\n            events = events.concat(_this.serverSyncTree_.applyServerOverwrite(path, snap));\r\n            var affectedPath = _this.abortTransactions_(path);\r\n            _this.rerunTransactions_(affectedPath);\r\n        });\r\n        this.onDisconnect_ = new SparseSnapshotTree();\r\n        this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectCancel = function (path, onComplete) {\r\n        var _this = this;\r\n        this.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.forget(path);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} value\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectSet = function (path, value, onComplete) {\r\n        var _this = this;\r\n        var newNode = nodeFromJSON$1(value);\r\n        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.remember(path, newNode);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} value\r\n     * @param {*} priority\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectSetWithPriority = function (path, value, priority, onComplete) {\r\n        var _this = this;\r\n        var newNode = nodeFromJSON$1(value, priority);\r\n        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.remember(path, newNode);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} childrenToMerge\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectUpdate = function (path, childrenToMerge, onComplete) {\r\n        var _this = this;\r\n        if (util.isEmpty(childrenToMerge)) {\r\n            log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n            this.callOnCompleteCallback(onComplete, 'ok');\r\n            return;\r\n        }\r\n        this.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                util.forEach(childrenToMerge, function (childName, childNode) {\r\n                    var newChildNode = nodeFromJSON$1(childNode);\r\n                    _this.onDisconnect_.remember(path.child(childName), newChildNode);\r\n                });\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     */\r\n    Repo.prototype.addEventCallbackForQuery = function (query, eventRegistration) {\r\n        var events;\r\n        if (query.path.getFront() === '.info') {\r\n            events = this.infoSyncTree_.addEventRegistration(query, eventRegistration);\r\n        }\r\n        else {\r\n            events = this.serverSyncTree_.addEventRegistration(query, eventRegistration);\r\n        }\r\n        this.eventQueue_.raiseEventsAtPath(query.path, events);\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration\r\n     */\r\n    Repo.prototype.removeEventCallbackForQuery = function (query, eventRegistration) {\r\n        // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n        // a little bit by handling the return values anyways.\r\n        var events;\r\n        if (query.path.getFront() === '.info') {\r\n            events = this.infoSyncTree_.removeEventRegistration(query, eventRegistration);\r\n        }\r\n        else {\r\n            events = this.serverSyncTree_.removeEventRegistration(query, eventRegistration);\r\n        }\r\n        this.eventQueue_.raiseEventsAtPath(query.path, events);\r\n    };\r\n    Repo.prototype.interrupt = function () {\r\n        if (this.persistentConnection_) {\r\n            this.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n        }\r\n    };\r\n    Repo.prototype.resume = function () {\r\n        if (this.persistentConnection_) {\r\n            this.persistentConnection_.resume(INTERRUPT_REASON);\r\n        }\r\n    };\r\n    Repo.prototype.stats = function (showDelta) {\r\n        if (showDelta === void 0) { showDelta = false; }\r\n        if (typeof console === 'undefined')\r\n            return;\r\n        var stats;\r\n        if (showDelta) {\r\n            if (!this.statsListener_)\r\n                this.statsListener_ = new StatsListener(this.stats_);\r\n            stats = this.statsListener_.get();\r\n        }\r\n        else {\r\n            stats = this.stats_.get();\r\n        }\r\n        var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {\r\n            return Math.max(currentValue.length, previousValue);\r\n        }, 0);\r\n        util.forEach(stats, function (stat, value) {\r\n            // pad stat names to be the same length (plus 2 extra spaces).\r\n            for (var i = stat.length; i < longestName + 2; i++)\r\n                stat += ' ';\r\n            console.log(stat + value);\r\n        });\r\n    };\r\n    Repo.prototype.statsIncrementCounter = function (metric) {\r\n        this.stats_.incrementCounter(metric);\r\n        this.statsReporter_.includeStat(metric);\r\n    };\r\n    /**\r\n     * @param {...*} var_args\r\n     * @private\r\n     */\r\n    Repo.prototype.log_ = function () {\r\n        var var_args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            var_args[_i] = arguments[_i];\r\n        }\r\n        var prefix = '';\r\n        if (this.persistentConnection_) {\r\n            prefix = this.persistentConnection_.id + ':';\r\n        }\r\n        log.apply(void 0, [prefix].concat(var_args));\r\n    };\r\n    /**\r\n     * @param {?function(?Error, *=)} callback\r\n     * @param {!string} status\r\n     * @param {?string=} errorReason\r\n     */\r\n    Repo.prototype.callOnCompleteCallback = function (callback, status, errorReason) {\r\n        if (callback) {\r\n            exceptionGuard(function () {\r\n                if (status == 'ok') {\r\n                    callback(null);\r\n                }\r\n                else {\r\n                    var code = (status || 'error').toUpperCase();\r\n                    var message = code;\r\n                    if (errorReason)\r\n                        message += ': ' + errorReason;\r\n                    var error = new Error(message);\r\n                    error.code = code;\r\n                    callback(error);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    Object.defineProperty(Repo.prototype, \"database\", {\r\n        get: function () {\r\n            return this.__database || (this.__database = new Database(this));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Repo;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\r\nvar RangedFilter = /** @class */ (function () {\r\n    /**\r\n     * @param {!QueryParams} params\r\n     */\r\n    function RangedFilter(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n    }\r\n    /**\r\n     * @return {!NamedNode}\r\n     */\r\n    RangedFilter.prototype.getStartPost = function () {\r\n        return this.startPost_;\r\n    };\r\n    /**\r\n     * @return {!NamedNode}\r\n     */\r\n    RangedFilter.prototype.getEndPost = function () {\r\n        return this.endPost_;\r\n    };\r\n    /**\r\n     * @param {!NamedNode} node\r\n     * @return {boolean}\r\n     */\r\n    RangedFilter.prototype.matches = function (node) {\r\n        return (this.index_.compare(this.getStartPost(), node) <= 0 &&\r\n            this.index_.compare(node, this.getEndPost()) <= 0);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        var filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        var self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.filtersNodes = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.getIndexedFilter = function () {\r\n        return this.indexedFilter_;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @param {!QueryParams} params\r\n     * @return {!NamedNode}\r\n     * @private\r\n     */\r\n    RangedFilter.getStartPost_ = function (params) {\r\n        if (params.hasStart()) {\r\n            var startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!QueryParams} params\r\n     * @return {!NamedNode}\r\n     * @private\r\n     */\r\n    RangedFilter.getEndPost_ = function (params) {\r\n        if (params.hasEnd()) {\r\n            var endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    };\r\n    return RangedFilter;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\r\nvar LimitedFilter = /** @class */ (function () {\r\n    /**\r\n     * @param {!QueryParams} params\r\n     */\r\n    function LimitedFilter(params) {\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        var filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                var iterator = void 0;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                var count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    var next = iterator.getNext();\r\n                    var inRange = void 0;\r\n                    if (this.reverse_) {\r\n                        inRange =\r\n                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\r\n                    }\r\n                    else {\r\n                        inRange =\r\n                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\r\n                    }\r\n                    if (inRange) {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        // if we have reached the end post, we cannot keep adding elemments\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                var startPost = void 0;\r\n                var endPost = void 0;\r\n                var cmp = void 0;\r\n                var iterator = void 0;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getEndPost();\r\n                    endPost = this.rangedFilter_.getStartPost();\r\n                    var indexCompare_1 = this.index_.getCompare();\r\n                    cmp = function (a, b) { return indexCompare_1(b, a); };\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getStartPost();\r\n                    endPost = this.rangedFilter_.getEndPost();\r\n                    cmp = this.index_.getCompare();\r\n                }\r\n                var count = 0;\r\n                var foundStartPost = false;\r\n                while (iterator.hasNext()) {\r\n                    var next = iterator.getNext();\r\n                    if (!foundStartPost && cmp(startPost, next) <= 0) {\r\n                        // start adding\r\n                        foundStartPost = true;\r\n                    }\r\n                    var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.filtersNodes = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.getIndexedFilter = function () {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @param {!Node} snap\r\n     * @param {string} childKey\r\n     * @param {!Node} childSnap\r\n     * @param {!CompleteChildSource} source\r\n     * @param {?ChildChangeAccumulator} changeAccumulator\r\n     * @return {!Node}\r\n     * @private\r\n     */\r\n    LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        var cmp;\r\n        if (this.reverse_) {\r\n            var indexCmp_1 = this.index_.getCompare();\r\n            cmp = function (a, b) { return indexCmp_1(b, a); };\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        var oldEventCache = snap;\r\n        util.assert(oldEventCache.numChildren() == this.limit_, '');\r\n        var newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        var windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        var inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            var oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name == childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childChangedChange(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childRemovedChange(childKey, oldChildSnap));\r\n                }\r\n                var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(Change.childAddedChange(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childRemovedChange(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(Change.childAddedChange(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    };\r\n    return LimitedFilter;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n * @constructor\r\n */\r\nvar QueryParams = /** @class */ (function () {\r\n    function QueryParams() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasStart = function () {\r\n        return this.startSet_;\r\n    };\r\n    /**\r\n     * @return {boolean} True if it would return from left.\r\n     */\r\n    QueryParams.prototype.isViewFromLeft = function () {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return (this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT);\r\n        }\r\n    };\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     * @return {*}\r\n     */\r\n    QueryParams.prototype.getIndexStartValue = function () {\r\n        util.assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     * @return {!string}\r\n     */\r\n    QueryParams.prototype.getIndexStartName = function () {\r\n        util.assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasEnd = function () {\r\n        return this.endSet_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * @return {*}\r\n     */\r\n    QueryParams.prototype.getIndexEndValue = function () {\r\n        util.assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     * @return {!string}\r\n     */\r\n    QueryParams.prototype.getIndexEndName = function () {\r\n        util.assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasLimit = function () {\r\n        return this.limitSet_;\r\n    };\r\n    /**\r\n     * @return {boolean} True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    QueryParams.prototype.hasAnchoredLimit = function () {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    };\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     * @return {!number}\r\n     */\r\n    QueryParams.prototype.getLimit = function () {\r\n        util.assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    };\r\n    /**\r\n     * @return {!Index}\r\n     */\r\n    QueryParams.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @return {!QueryParams}\r\n     * @private\r\n     */\r\n    QueryParams.prototype.copy_ = function () {\r\n        var copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limit = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = '';\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limitToFirst = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limitToLast = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {?string=} key\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.startAt = function (indexValue, key) {\r\n        var newParams = this.copy_();\r\n        newParams.startSet_ = true;\r\n        if (indexValue === undefined) {\r\n            indexValue = null;\r\n        }\r\n        newParams.indexStartValue_ = indexValue;\r\n        if (key != null) {\r\n            newParams.startNameSet_ = true;\r\n            newParams.indexStartName_ = key;\r\n        }\r\n        else {\r\n            newParams.startNameSet_ = false;\r\n            newParams.indexStartName_ = '';\r\n        }\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {?string=} key\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.endAt = function (indexValue, key) {\r\n        var newParams = this.copy_();\r\n        newParams.endSet_ = true;\r\n        if (indexValue === undefined) {\r\n            indexValue = null;\r\n        }\r\n        newParams.indexEndValue_ = indexValue;\r\n        if (key !== undefined) {\r\n            newParams.endNameSet_ = true;\r\n            newParams.indexEndName_ = key;\r\n        }\r\n        else {\r\n            newParams.endNameSet_ = false;\r\n            newParams.indexEndName_ = '';\r\n        }\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!Index} index\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.orderBy = function (index) {\r\n        var newParams = this.copy_();\r\n        newParams.index_ = index;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @return {!Object}\r\n     */\r\n    QueryParams.prototype.getQueryObject = function () {\r\n        var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\r\n        var obj = {};\r\n        if (this.startSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\r\n            if (this.startNameSet_) {\r\n                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\r\n            }\r\n        }\r\n        if (this.endSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\r\n            if (this.endNameSet_) {\r\n                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\r\n            }\r\n        }\r\n        if (this.limitSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\r\n            var viewFrom = this.viewFrom_;\r\n            if (viewFrom === '') {\r\n                if (this.isViewFromLeft()) {\r\n                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\r\n                }\r\n                else {\r\n                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\r\n                }\r\n            }\r\n            obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\r\n        }\r\n        // For now, priority index is the default, so we only specify if it's some other index\r\n        if (this.index_ !== PRIORITY_INDEX) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\r\n        }\r\n        return obj;\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.loadsAllData = function () {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.isDefault = function () {\r\n        return this.loadsAllData() && this.index_ == PRIORITY_INDEX;\r\n    };\r\n    /**\r\n     * @return {!NodeFilter}\r\n     */\r\n    QueryParams.prototype.getNodeFilter = function () {\r\n        if (this.loadsAllData()) {\r\n            return new IndexedFilter(this.getIndex());\r\n        }\r\n        else if (this.hasLimit()) {\r\n            return new LimitedFilter(this);\r\n        }\r\n        else {\r\n            return new RangedFilter(this);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a set of REST query string parameters representing this query.\r\n     *\r\n     * @return {!Object.<string,*>} query string parameters\r\n     */\r\n    QueryParams.prototype.toRestQueryStringParameters = function () {\r\n        var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\r\n        var qs = {};\r\n        if (this.isDefault()) {\r\n            return qs;\r\n        }\r\n        var orderBy;\r\n        if (this.index_ === PRIORITY_INDEX) {\r\n            orderBy = REST_CONSTANTS.PRIORITY_INDEX;\r\n        }\r\n        else if (this.index_ === VALUE_INDEX) {\r\n            orderBy = REST_CONSTANTS.VALUE_INDEX;\r\n        }\r\n        else if (this.index_ === KEY_INDEX) {\r\n            orderBy = REST_CONSTANTS.KEY_INDEX;\r\n        }\r\n        else {\r\n            util.assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n            orderBy = this.index_.toString();\r\n        }\r\n        qs[REST_CONSTANTS.ORDER_BY] = util.stringify(orderBy);\r\n        if (this.startSet_) {\r\n            qs[REST_CONSTANTS.START_AT] = util.stringify(this.indexStartValue_);\r\n            if (this.startNameSet_) {\r\n                qs[REST_CONSTANTS.START_AT] += ',' + util.stringify(this.indexStartName_);\r\n            }\r\n        }\r\n        if (this.endSet_) {\r\n            qs[REST_CONSTANTS.END_AT] = util.stringify(this.indexEndValue_);\r\n            if (this.endNameSet_) {\r\n                qs[REST_CONSTANTS.END_AT] += ',' + util.stringify(this.indexEndName_);\r\n            }\r\n        }\r\n        if (this.limitSet_) {\r\n            if (this.isViewFromLeft()) {\r\n                qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\r\n            }\r\n            else {\r\n                qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\r\n            }\r\n        }\r\n        return qs;\r\n    };\r\n    /**\r\n     * Wire Protocol Constants\r\n     * @const\r\n     * @enum {string}\r\n     * @private\r\n     */\r\n    QueryParams.WIRE_PROTOCOL_CONSTANTS_ = {\r\n        INDEX_START_VALUE: 'sp',\r\n        INDEX_START_NAME: 'sn',\r\n        INDEX_END_VALUE: 'ep',\r\n        INDEX_END_NAME: 'en',\r\n        LIMIT: 'l',\r\n        VIEW_FROM: 'vf',\r\n        VIEW_FROM_LEFT: 'l',\r\n        VIEW_FROM_RIGHT: 'r',\r\n        INDEX: 'i'\r\n    };\r\n    /**\r\n     * REST Query Constants\r\n     * @const\r\n     * @enum {string}\r\n     * @private\r\n     */\r\n    QueryParams.REST_QUERY_CONSTANTS_ = {\r\n        ORDER_BY: 'orderBy',\r\n        PRIORITY_INDEX: '$priority',\r\n        VALUE_INDEX: '$value',\r\n        KEY_INDEX: '$key',\r\n        START_AT: 'startAt',\r\n        END_AT: 'endAt',\r\n        LIMIT_TO_FIRST: 'limitToFirst',\r\n        LIMIT_TO_LAST: 'limitToLast'\r\n    };\r\n    /**\r\n     * Default, empty query parameters\r\n     * @type {!QueryParams}\r\n     * @const\r\n     */\r\n    QueryParams.DEFAULT = new QueryParams();\r\n    return QueryParams;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Reference = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Reference, _super);\r\n    /**\r\n     * Call options:\r\n     *   new Reference(Repo, Path) or\r\n     *   new Reference(url: string, string|RepoManager)\r\n     *\r\n     * Externally - this is the firebase.database.Reference type.\r\n     *\r\n     * @param {!Repo} repo\r\n     * @param {(!Path)} path\r\n     * @extends {Query}\r\n     */\r\n    function Reference(repo, path) {\r\n        var _this = this;\r\n        if (!(repo instanceof Repo)) {\r\n            throw new Error('new Reference() no longer supported - use app.database().');\r\n        }\r\n        // call Query's constructor, passing in the repo and path.\r\n        _this = _super.call(this, repo, path, QueryParams.DEFAULT, false) || this;\r\n        return _this;\r\n    }\r\n    /** @return {?string} */\r\n    Reference.prototype.getKey = function () {\r\n        util.validateArgCount('Reference.key', 0, 0, arguments.length);\r\n        if (this.path.isEmpty())\r\n            return null;\r\n        else\r\n            return this.path.getBack();\r\n    };\r\n    /**\r\n     * @param {!(string|Path)} pathString\r\n     * @return {!Reference}\r\n     */\r\n    Reference.prototype.child = function (pathString) {\r\n        util.validateArgCount('Reference.child', 1, 1, arguments.length);\r\n        if (typeof pathString === 'number') {\r\n            pathString = String(pathString);\r\n        }\r\n        else if (!(pathString instanceof Path)) {\r\n            if (this.path.getFront() === null)\r\n                validateRootPathString('Reference.child', 1, pathString, false);\r\n            else\r\n                validatePathString('Reference.child', 1, pathString, false);\r\n        }\r\n        return new Reference(this.repo, this.path.child(pathString));\r\n    };\r\n    /** @return {?Reference} */\r\n    Reference.prototype.getParent = function () {\r\n        util.validateArgCount('Reference.parent', 0, 0, arguments.length);\r\n        var parentPath = this.path.parent();\r\n        return parentPath === null ? null : new Reference(this.repo, parentPath);\r\n    };\r\n    /** @return {!Reference} */\r\n    Reference.prototype.getRoot = function () {\r\n        util.validateArgCount('Reference.root', 0, 0, arguments.length);\r\n        var ref = this;\r\n        while (ref.getParent() !== null) {\r\n            ref = ref.getParent();\r\n        }\r\n        return ref;\r\n    };\r\n    /** @return {!Database} */\r\n    Reference.prototype.databaseProp = function () {\r\n        return this.repo.database;\r\n    };\r\n    /**\r\n     * @param {*} newVal\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.set = function (newVal, onComplete) {\r\n        util.validateArgCount('Reference.set', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.set', this.path);\r\n        validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\r\n        util.validateCallback('Reference.set', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path, newVal, \r\n        /*priority=*/ null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {!Object} objectToMerge\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.update = function (objectToMerge, onComplete) {\r\n        util.validateArgCount('Reference.update', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.update', this.path);\r\n        if (Array.isArray(objectToMerge)) {\r\n            var newObjectToMerge = {};\r\n            for (var i = 0; i < objectToMerge.length; ++i) {\r\n                newObjectToMerge['' + i] = objectToMerge[i];\r\n            }\r\n            objectToMerge = newObjectToMerge;\r\n            warn('Passing an Array to Firebase.update() is deprecated. ' +\r\n                'Use set() if you want to overwrite the existing data, or ' +\r\n                'an Object with integer keys if you really do want to ' +\r\n                'only update some of the children.');\r\n        }\r\n        validateFirebaseMergeDataArg('Reference.update', 1, objectToMerge, this.path, false);\r\n        util.validateCallback('Reference.update', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.update(this.path, objectToMerge, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} newVal\r\n     * @param {string|number|null} newPriority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {\r\n        util.validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\r\n        validateWritablePath('Reference.setWithPriority', this.path);\r\n        validateFirebaseDataArg('Reference.setWithPriority', 1, newVal, this.path, false);\r\n        validatePriority('Reference.setWithPriority', 2, newPriority, false);\r\n        util.validateCallback('Reference.setWithPriority', 3, onComplete, true);\r\n        if (this.getKey() === '.length' || this.getKey() === '.keys')\r\n            throw 'Reference.setWithPriority failed: ' +\r\n                this.getKey() +\r\n                ' is a read-only object.';\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path, newVal, newPriority, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.remove = function (onComplete) {\r\n        util.validateArgCount('Reference.remove', 0, 1, arguments.length);\r\n        validateWritablePath('Reference.remove', this.path);\r\n        util.validateCallback('Reference.remove', 1, onComplete, true);\r\n        return this.set(null, onComplete);\r\n    };\r\n    /**\r\n     * @param {function(*):*} transactionUpdate\r\n     * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete\r\n     * @param {boolean=} applyLocally\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {\r\n        util.validateArgCount('Reference.transaction', 1, 3, arguments.length);\r\n        validateWritablePath('Reference.transaction', this.path);\r\n        util.validateCallback('Reference.transaction', 1, transactionUpdate, false);\r\n        util.validateCallback('Reference.transaction', 2, onComplete, true);\r\n        // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\r\n        // to expose it.\r\n        validateBoolean('Reference.transaction', 3, applyLocally, true);\r\n        if (this.getKey() === '.length' || this.getKey() === '.keys')\r\n            throw 'Reference.transaction failed: ' +\r\n                this.getKey() +\r\n                ' is a read-only object.';\r\n        if (applyLocally === undefined)\r\n            applyLocally = true;\r\n        var deferred = new util.Deferred();\r\n        if (typeof onComplete === 'function') {\r\n            deferred.promise.catch(function () { });\r\n        }\r\n        var promiseComplete = function (error, committed, snapshot) {\r\n            if (error) {\r\n                deferred.reject(error);\r\n            }\r\n            else {\r\n                deferred.resolve(new TransactionResult(committed, snapshot));\r\n            }\r\n            if (typeof onComplete === 'function') {\r\n                onComplete(error, committed, snapshot);\r\n            }\r\n        };\r\n        this.repo.startTransaction(this.path, transactionUpdate, promiseComplete, applyLocally);\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {string|number|null} priority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.setPriority = function (priority, onComplete) {\r\n        util.validateArgCount('Reference.setPriority', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.setPriority', this.path);\r\n        validatePriority('Reference.setPriority', 1, priority, false);\r\n        util.validateCallback('Reference.setPriority', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path.child('.priority'), priority, null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*=} value\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Reference}\r\n     */\r\n    Reference.prototype.push = function (value, onComplete) {\r\n        util.validateArgCount('Reference.push', 0, 2, arguments.length);\r\n        validateWritablePath('Reference.push', this.path);\r\n        validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\r\n        util.validateCallback('Reference.push', 2, onComplete, true);\r\n        var now = this.repo.serverTime();\r\n        var name = nextPushId(now);\r\n        // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\r\n        // We use child() to create handles to two different references. The first is turned into a\r\n        // ThennableReference below by adding then() and catch() methods and is used as the\r\n        // return value of push(). The second remains a regular Reference and is used as the fulfilled\r\n        // value of the first ThennableReference.\r\n        var thennablePushRef = this.child(name);\r\n        var pushRef = this.child(name);\r\n        var promise;\r\n        if (value != null) {\r\n            promise = thennablePushRef.set(value, onComplete).then(function () { return pushRef; });\r\n        }\r\n        else {\r\n            promise = Promise.resolve(pushRef);\r\n        }\r\n        thennablePushRef.then = promise.then.bind(promise);\r\n        thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n        if (typeof onComplete === 'function') {\r\n            promise.catch(function () { });\r\n        }\r\n        return thennablePushRef;\r\n    };\r\n    /**\r\n     * @return {!OnDisconnect}\r\n     */\r\n    Reference.prototype.onDisconnect = function () {\r\n        validateWritablePath('Reference.onDisconnect', this.path);\r\n        return new OnDisconnect(this.repo, this.path);\r\n    };\r\n    Object.defineProperty(Reference.prototype, \"database\", {\r\n        get: function () {\r\n            return this.databaseProp();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"key\", {\r\n        get: function () {\r\n            return this.getKey();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"parent\", {\r\n        get: function () {\r\n            return this.getParent();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"root\", {\r\n        get: function () {\r\n            return this.getRoot();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Reference;\r\n}(Query));\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nQuery.__referenceConstructor = Reference;\r\nSyncPoint.__referenceConstructor = Reference;\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Node in a Tree.\r\n */\r\nvar TreeNode = /** @class */ (function () {\r\n    function TreeNode() {\r\n        // TODO: Consider making accessors that create children and value lazily or\r\n        // separate Internal / Leaf 'types'.\r\n        this.children = {};\r\n        this.childCount = 0;\r\n        this.value = null;\r\n    }\r\n    return TreeNode;\r\n}());\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nvar Tree = /** @class */ (function () {\r\n    /**\r\n     * @template T\r\n     * @param {string=} name_ Optional name of the node.\r\n     * @param {Tree=} parent_ Optional parent node.\r\n     * @param {TreeNode=} node_ Optional node to wrap.\r\n     */\r\n    function Tree(name_, parent_, node_) {\r\n        if (name_ === void 0) { name_ = ''; }\r\n        if (parent_ === void 0) { parent_ = null; }\r\n        if (node_ === void 0) { node_ = new TreeNode(); }\r\n        this.name_ = name_;\r\n        this.parent_ = parent_;\r\n        this.node_ = node_;\r\n    }\r\n    /**\r\n     * Returns a sub-Tree for the given path.\r\n     *\r\n     * @param {!(string|Path)} pathObj Path to look up.\r\n     * @return {!Tree.<T>} Tree for path.\r\n     */\r\n    Tree.prototype.subTree = function (pathObj) {\r\n        // TODO: Require pathObj to be Path?\r\n        var path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n        var child = this, next;\r\n        while ((next = path.getFront()) !== null) {\r\n            var childNode = util.safeGet(child.node_.children, next) || new TreeNode();\r\n            child = new Tree(next, child, childNode);\r\n            path = path.popFront();\r\n        }\r\n        return child;\r\n    };\r\n    /**\r\n     * Returns the data associated with this tree node.\r\n     *\r\n     * @return {?T} The data or null if no data exists.\r\n     */\r\n    Tree.prototype.getValue = function () {\r\n        return this.node_.value;\r\n    };\r\n    /**\r\n     * Sets data to this tree node.\r\n     *\r\n     * @param {!T} value Value to set.\r\n     */\r\n    Tree.prototype.setValue = function (value) {\r\n        util.assert(typeof value !== 'undefined', 'Cannot set value to undefined');\r\n        this.node_.value = value;\r\n        this.updateParents_();\r\n    };\r\n    /**\r\n     * Clears the contents of the tree node (its value and all children).\r\n     */\r\n    Tree.prototype.clear = function () {\r\n        this.node_.value = null;\r\n        this.node_.children = {};\r\n        this.node_.childCount = 0;\r\n        this.updateParents_();\r\n    };\r\n    /**\r\n     * @return {boolean} Whether the tree has any children.\r\n     */\r\n    Tree.prototype.hasChildren = function () {\r\n        return this.node_.childCount > 0;\r\n    };\r\n    /**\r\n     * @return {boolean} Whether the tree is empty (no value or children).\r\n     */\r\n    Tree.prototype.isEmpty = function () {\r\n        return this.getValue() === null && !this.hasChildren();\r\n    };\r\n    /**\r\n     * Calls action for each child of this tree node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     */\r\n    Tree.prototype.forEachChild = function (action) {\r\n        var _this = this;\r\n        util.forEach(this.node_.children, function (child, childTree) {\r\n            action(new Tree(child, _this, childTree));\r\n        });\r\n    };\r\n    /**\r\n     * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\r\n     *   false.\r\n     * @param {boolean=} childrenFirst Whether to call action on children before calling it on\r\n     *   parent.\r\n     */\r\n    Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {\r\n        if (includeSelf && !childrenFirst)\r\n            action(this);\r\n        this.forEachChild(function (child) {\r\n            child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);\r\n        });\r\n        if (includeSelf && childrenFirst)\r\n            action(this);\r\n    };\r\n    /**\r\n     * Calls action on each ancestor node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called on each parent; return\r\n     *   true to abort.\r\n     * @param {boolean=} includeSelf Whether to call action on this node as well.\r\n     * @return {boolean} true if the action callback returned true.\r\n     */\r\n    Tree.prototype.forEachAncestor = function (action, includeSelf) {\r\n        var node = includeSelf ? this : this.parent();\r\n        while (node !== null) {\r\n            if (action(node)) {\r\n                return true;\r\n            }\r\n            node = node.parent();\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Does a depth-first traversal of this node's descendants.  When a descendant with a value\r\n     * is found, action is called on it and traversal does not continue inside the node.\r\n     * Action is *not* called on this node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     */\r\n    Tree.prototype.forEachImmediateDescendantWithValue = function (action) {\r\n        this.forEachChild(function (child) {\r\n            if (child.getValue() !== null)\r\n                action(child);\r\n            else\r\n                child.forEachImmediateDescendantWithValue(action);\r\n        });\r\n    };\r\n    /**\r\n     * @return {!Path} The path of this tree node, as a Path.\r\n     */\r\n    Tree.prototype.path = function () {\r\n        return new Path(this.parent_ === null\r\n            ? this.name_\r\n            : this.parent_.path() + '/' + this.name_);\r\n    };\r\n    /**\r\n     * @return {string} The name of the tree node.\r\n     */\r\n    Tree.prototype.name = function () {\r\n        return this.name_;\r\n    };\r\n    /**\r\n     * @return {?Tree} The parent tree node, or null if this is the root of the tree.\r\n     */\r\n    Tree.prototype.parent = function () {\r\n        return this.parent_;\r\n    };\r\n    /**\r\n     * Adds or removes this child from its parent based on whether it's empty or not.\r\n     *\r\n     * @private\r\n     */\r\n    Tree.prototype.updateParents_ = function () {\r\n        if (this.parent_ !== null)\r\n            this.parent_.updateChild_(this.name_, this);\r\n    };\r\n    /**\r\n     * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n     *\r\n     * @param {string} childName The name of the child to update.\r\n     * @param {!Tree.<T>} child The child to update.\r\n     * @private\r\n     */\r\n    Tree.prototype.updateChild_ = function (childName, child) {\r\n        var childEmpty = child.isEmpty();\r\n        var childExists = util.contains(this.node_.children, childName);\r\n        if (childEmpty && childExists) {\r\n            delete this.node_.children[childName];\r\n            this.node_.childCount--;\r\n            this.updateParents_();\r\n        }\r\n        else if (!childEmpty && !childExists) {\r\n            this.node_.children[childName] = child.node_;\r\n            this.node_.childCount++;\r\n            this.updateParents_();\r\n        }\r\n    };\r\n    return Tree;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\r\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\r\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\r\n// For now it's part of Repo, but in its own file.\r\n/**\r\n * @enum {number}\r\n */\r\nvar TransactionStatus;\r\n(function (TransactionStatus) {\r\n    // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\r\n    // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\r\n    // mismatched hash.\r\n    TransactionStatus[TransactionStatus[\"RUN\"] = 0] = \"RUN\";\r\n    // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\r\n    // or rejected yet).\r\n    TransactionStatus[TransactionStatus[\"SENT\"] = 1] = \"SENT\";\r\n    // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\r\n    // removed when we get a chance to prune completed ones.\r\n    TransactionStatus[TransactionStatus[\"COMPLETED\"] = 2] = \"COMPLETED\";\r\n    // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\r\n    // If it comes back as unsuccessful, we'll abort it.\r\n    TransactionStatus[TransactionStatus[\"SENT_NEEDS_ABORT\"] = 3] = \"SENT_NEEDS_ABORT\";\r\n    // Temporary state used to mark transactions that need to be aborted.\r\n    TransactionStatus[TransactionStatus[\"NEEDS_ABORT\"] = 4] = \"NEEDS_ABORT\";\r\n})(TransactionStatus || (TransactionStatus = {}));\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\r\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\r\n * @type {number}\r\n * @const\r\n * @private\r\n */\r\nRepo.MAX_TRANSACTION_RETRIES_ = 25;\r\n/**\r\n * Setup the transaction data structures\r\n * @private\r\n */\r\nRepo.prototype.transactions_init_ = function () {\r\n    /**\r\n     * Stores queues of outstanding transactions for Firebase locations.\r\n     *\r\n     * @type {!Tree.<Array.<!Transaction>>}\r\n     * @private\r\n     */\r\n    this.transactionQueueTree_ = new Tree();\r\n};\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\r\n *\r\n * @param {!Path} path Path at which to do transaction.\r\n * @param {function(*):*} transactionUpdate Update callback.\r\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\r\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\r\n */\r\nRepo.prototype.startTransaction = function (path, transactionUpdate, onComplete, applyLocally) {\r\n    this.log_('transaction on ' + path);\r\n    // Add a watch to make sure we get server updates.\r\n    var valueCallback = function () { };\r\n    var watchRef = new Reference(this, path);\r\n    watchRef.on('value', valueCallback);\r\n    var unwatcher = function () {\r\n        watchRef.off('value', valueCallback);\r\n    };\r\n    // Initialize transaction.\r\n    var transaction = {\r\n        path: path,\r\n        update: transactionUpdate,\r\n        onComplete: onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally: applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher: unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    var currentState = this.getLatestState_(path);\r\n    transaction.currentInputSnapshot = currentState;\r\n    var newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            // We just set the input snapshot, so this cast should be safe\r\n            var snapshot = new DataSnapshot(transaction.currentInputSnapshot, new Reference(this, transaction.path), PRIORITY_INDEX);\r\n            transaction.onComplete(null, false, snapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = TransactionStatus.RUN;\r\n        var queueNode = this.transactionQueueTree_.subTree(path);\r\n        var nodeQueue = queueNode.getValue() || [];\r\n        nodeQueue.push(transaction);\r\n        queueNode.setValue(nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our transaction state, since the user could\r\n        // start new transactions from the event callbacks.\r\n        var priorityForNode = void 0;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            util.contains(newVal, '.priority')) {\r\n            priorityForNode = util.safeGet(newVal, '.priority');\r\n            util.assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            var currentNode = this.serverSyncTree_.calcCompleteEventCache(path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        priorityForNode /** @type {null|number|string} */ = priorityForNode;\r\n        var serverValues = this.generateServerValues();\r\n        var newNodeUnresolved = nodeFromJSON$1(newVal, priorityForNode);\r\n        var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = this.getNextWriteId_();\r\n        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n        this.sendReadyTransactions_();\r\n    }\r\n};\r\n/**\r\n * @param {!Path} path\r\n * @param {Array.<number>=} excludeSets A specific set to exclude\r\n * @return {Node}\r\n * @private\r\n */\r\nRepo.prototype.getLatestState_ = function (path, excludeSets) {\r\n    return (this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n};\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\r\n * complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively with a particular\r\n * transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\r\n * @private\r\n */\r\nRepo.prototype.sendReadyTransactions_ = function (node) {\r\n    var _this = this;\r\n    if (node === void 0) { node = this.transactionQueueTree_; }\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        this.pruneCompletedTransactionsBelowNode_(node);\r\n    }\r\n    if (node.getValue() !== null) {\r\n        var queue = this.buildTransactionQueue_(node);\r\n        util.assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        var allRun = queue.every(function (transaction) { return transaction.status === TransactionStatus.RUN; });\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            this.sendTransactionQueue_(node.path(), queue);\r\n        }\r\n    }\r\n    else if (node.hasChildren()) {\r\n        node.forEachChild(function (childNode) {\r\n            _this.sendReadyTransactions_(childNode);\r\n        });\r\n    }\r\n};\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\r\n *\r\n * @param {!Path} path The location of the queue.\r\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\r\n * @private\r\n */\r\nRepo.prototype.sendTransactionQueue_ = function (path, queue) {\r\n    var _this = this;\r\n    // Mark transactions as sent and increment retry count!\r\n    var setsToIgnore = queue.map(function (txn) {\r\n        return txn.currentWriteId;\r\n    });\r\n    var latestState = this.getLatestState_(path, setsToIgnore);\r\n    var snapToSend = latestState;\r\n    var latestHash = latestState.hash();\r\n    for (var i = 0; i < queue.length; i++) {\r\n        var txn = queue[i];\r\n        util.assert(txn.status === TransactionStatus.RUN, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = TransactionStatus.SENT;\r\n        txn.retryCount++;\r\n        var relativePath = Path.relativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /**@type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    var dataToSend = snapToSend.val(true);\r\n    var pathToSend = path;\r\n    // Send the put.\r\n    this.server_.put(pathToSend.toString(), dataToSend, function (status) {\r\n        _this.log_('transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status: status\r\n        });\r\n        var events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n            // the callback could trigger more transactions or sets.\r\n            var callbacks = [];\r\n            for (var i = 0; i < queue.length; i++) {\r\n                queue[i].status = TransactionStatus.COMPLETED;\r\n                events = events.concat(_this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this transaction is complete, it should be set\r\n                    var node = queue[i].currentOutputSnapshotResolved;\r\n                    var ref = new Reference(_this, queue[i].path);\r\n                    var snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);\r\n                    callbacks.push(queue[i].onComplete.bind(null, null, true, snapshot));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            _this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path));\r\n            // There may be pending transactions that we can now send.\r\n            _this.sendReadyTransactions_();\r\n            _this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (var i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (var i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT)\r\n                        queue[i].status = TransactionStatus.NEEDS_ABORT;\r\n                    else\r\n                        queue[i].status = TransactionStatus.RUN;\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (var i = 0; i < queue.length; i++) {\r\n                    queue[i].status = TransactionStatus.NEEDS_ABORT;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            _this.rerunTransactions_(path);\r\n        }\r\n    }, latestHash);\r\n};\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\r\n * be raised for.\r\n *\r\n * @param {!Path} changedPath The path in mergedData that changed.\r\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\r\n * @private\r\n */\r\nRepo.prototype.rerunTransactions_ = function (changedPath) {\r\n    var rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\r\n    var path = rootMostTransactionNode.path();\r\n    var queue = this.buildTransactionQueue_(rootMostTransactionNode);\r\n    this.rerunTransactionQueue_(queue, path);\r\n    return path;\r\n};\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\r\n *\r\n * @param {Array.<Transaction>} queue The queue of transactions to run.\r\n * @param {!Path} path The path the queue is for.\r\n * @private\r\n */\r\nRepo.prototype.rerunTransactionQueue_ = function (queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n    // the callback could trigger more transactions or sets.\r\n    var callbacks = [];\r\n    var events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    var txnsToRerun = queue.filter(function (q) {\r\n        return q.status === TransactionStatus.RUN;\r\n    });\r\n    var setsToIgnore = txnsToRerun.map(function (q) {\r\n        return q.currentWriteId;\r\n    });\r\n    for (var i = 0; i < queue.length; i++) {\r\n        var transaction = queue[i];\r\n        var relativePath = Path.relativePath(path, transaction.path);\r\n        var abortTransaction = false, abortReason = void 0;\r\n        util.assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === TransactionStatus.NEEDS_ABORT) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === TransactionStatus.RUN) {\r\n            if (transaction.retryCount >= Repo.MAX_TRANSACTION_RETRIES_) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                var currentNode = this.getLatestState_(transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                var newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    var newDataNode = nodeFromJSON$1(newData);\r\n                    var hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        util.contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    var oldWriteId = transaction.currentWriteId;\r\n                    var serverValues = this.generateServerValues();\r\n                    var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = this.getNextWriteId_();\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = TransactionStatus.COMPLETED;\r\n            // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\r\n            // So defer the unwatcher until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    var ref = new Reference(this, queue[i].path);\r\n                    // We set this field immediately, so it's safe to cast to an actual snapshot\r\n                    var lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;\r\n                    var snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);\r\n                    callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (var i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    this.sendReadyTransactions_();\r\n};\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\r\n * the node for the given path if there are no pending transactions on any ancestor.\r\n *\r\n * @param {!Path} path The location to start at.\r\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\r\n * @private\r\n */\r\nRepo.prototype.getAncestorTransactionNode_ = function (path) {\r\n    var front;\r\n    // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\r\n    var transactionNode = this.transactionQueueTree_;\r\n    while ((front = path.getFront()) !== null &&\r\n        transactionNode.getValue() === null) {\r\n        transactionNode = transactionNode.subTree(front);\r\n        path = path.popFront();\r\n    }\r\n    return transactionNode;\r\n};\r\n/**\r\n * Builds the queue of all transactions at or below the specified transactionNode.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} transactionNode\r\n * @return {Array.<Transaction>} The generated queue.\r\n * @private\r\n */\r\nRepo.prototype.buildTransactionQueue_ = function (transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    var transactionQueue = [];\r\n    this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort(function (a, b) {\r\n        return a.order - b.order;\r\n    });\r\n    return transactionQueue;\r\n};\r\n/**\r\n * @param {!Tree.<Array.<Transaction>>} node\r\n * @param {Array.<Transaction>} queue\r\n * @private\r\n */\r\nRepo.prototype.aggregateTransactionQueuesForNode_ = function (node, queue) {\r\n    var _this = this;\r\n    var nodeQueue = node.getValue();\r\n    if (nodeQueue !== null) {\r\n        for (var i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    node.forEachChild(function (child) {\r\n        _this.aggregateTransactionQueuesForNode_(child, queue);\r\n    });\r\n};\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n *\r\n * @param {!Tree.<Array.<!Transaction>>} node\r\n * @private\r\n */\r\nRepo.prototype.pruneCompletedTransactionsBelowNode_ = function (node) {\r\n    var _this = this;\r\n    var queue = node.getValue();\r\n    if (queue) {\r\n        var to = 0;\r\n        for (var from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== TransactionStatus.COMPLETED) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        node.setValue(queue.length > 0 ? queue : null);\r\n    }\r\n    node.forEachChild(function (childNode) {\r\n        _this.pruneCompletedTransactionsBelowNode_(childNode);\r\n    });\r\n};\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\r\n * since we consider them incompatible with transactions.\r\n *\r\n * @param {!Path} path Path for which we want to abort related transactions.\r\n * @return {!Path}\r\n * @private\r\n */\r\nRepo.prototype.abortTransactions_ = function (path) {\r\n    var _this = this;\r\n    var affectedPath = this.getAncestorTransactionNode_(path).path();\r\n    var transactionNode = this.transactionQueueTree_.subTree(path);\r\n    transactionNode.forEachAncestor(function (node) {\r\n        _this.abortTransactionsOnNode_(node);\r\n    });\r\n    this.abortTransactionsOnNode_(transactionNode);\r\n    transactionNode.forEachDescendant(function (node) {\r\n        _this.abortTransactionsOnNode_(node);\r\n    });\r\n    return affectedPath;\r\n};\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\r\n * @private\r\n */\r\nRepo.prototype.abortTransactionsOnNode_ = function (node) {\r\n    var queue = node.getValue();\r\n    if (queue !== null) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n        // the callback could trigger more transactions or sets.\r\n        var callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\r\n        // can be immediately aborted and removed.\r\n        var events = [];\r\n        var lastSent = -1;\r\n        for (var i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) ;\r\n            else if (queue[i].status === TransactionStatus.SENT) {\r\n                util.assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                util.assert(queue[i].status === TransactionStatus.RUN, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    var snapshot = null;\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, snapshot));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            node.setValue(null);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\r\n        for (var i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** @const {string} */\r\nvar DATABASE_URL_OPTION = 'databaseURL';\r\nvar _staticInstance;\r\n/**\r\n * Creates and caches Repo instances.\r\n */\r\nvar RepoManager = /** @class */ (function () {\r\n    function RepoManager() {\r\n        /**\r\n         * @private {!Object.<string, Object<string, !fb.core.Repo>>}\r\n         */\r\n        this.repos_ = {};\r\n        /**\r\n         * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\r\n         * @private {boolean}\r\n         */\r\n        this.useRestClient_ = false;\r\n    }\r\n    RepoManager.getInstance = function () {\r\n        if (!_staticInstance) {\r\n            _staticInstance = new RepoManager();\r\n        }\r\n        return _staticInstance;\r\n    };\r\n    // TODO(koss): Remove these functions unless used in tests?\r\n    RepoManager.prototype.interrupt = function () {\r\n        for (var appName in this.repos_) {\r\n            for (var dbUrl in this.repos_[appName]) {\r\n                this.repos_[appName][dbUrl].interrupt();\r\n            }\r\n        }\r\n    };\r\n    RepoManager.prototype.resume = function () {\r\n        for (var appName in this.repos_) {\r\n            for (var dbUrl in this.repos_[appName]) {\r\n                this.repos_[appName][dbUrl].resume();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * This function should only ever be called to CREATE a new database instance.\r\n     *\r\n     * @param {!FirebaseApp} app\r\n     * @return {!Database}\r\n     */\r\n    RepoManager.prototype.databaseFromApp = function (app, url) {\r\n        var dbUrl = url || app.options[DATABASE_URL_OPTION];\r\n        if (dbUrl === undefined) {\r\n            fatal(\"Can't determine Firebase Database URL.  Be sure to include \" +\r\n                DATABASE_URL_OPTION +\r\n                ' option when calling firebase.initializeApp().');\r\n        }\r\n        var parsedUrl = parseRepoInfo(dbUrl);\r\n        var repoInfo = parsedUrl.repoInfo;\r\n        validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\r\n        if (!parsedUrl.path.isEmpty()) {\r\n            fatal('Database URL must point to the root of a Firebase Database ' +\r\n                '(not including a child path).');\r\n        }\r\n        var repo = this.createRepo(repoInfo, app);\r\n        return repo.database;\r\n    };\r\n    /**\r\n     * Remove the repo and make sure it is disconnected.\r\n     *\r\n     * @param {!Repo} repo\r\n     */\r\n    RepoManager.prototype.deleteRepo = function (repo) {\r\n        var appRepos = util.safeGet(this.repos_, repo.app.name);\r\n        // This should never happen...\r\n        if (!appRepos || util.safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\r\n            fatal(\"Database \" + repo.app.name + \"(\" + repo.repoInfo_ + \") has already been deleted.\");\r\n        }\r\n        repo.interrupt();\r\n        delete appRepos[repo.repoInfo_.toURLString()];\r\n    };\r\n    /**\r\n     * Ensures a repo doesn't already exist and then creates one using the\r\n     * provided app.\r\n     *\r\n     * @param {!RepoInfo} repoInfo The metadata about the Repo\r\n     * @param {!FirebaseApp} app\r\n     * @return {!Repo} The Repo object for the specified server / repoName.\r\n     */\r\n    RepoManager.prototype.createRepo = function (repoInfo, app) {\r\n        var appRepos = util.safeGet(this.repos_, app.name);\r\n        if (!appRepos) {\r\n            appRepos = {};\r\n            this.repos_[app.name] = appRepos;\r\n        }\r\n        var repo = util.safeGet(appRepos, repoInfo.toURLString());\r\n        if (repo) {\r\n            fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n        }\r\n        repo = new Repo(repoInfo, this.useRestClient_, app);\r\n        appRepos[repoInfo.toURLString()] = repo;\r\n        return repo;\r\n    };\r\n    /**\r\n     * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n     * @param {boolean} forceRestClient\r\n     */\r\n    RepoManager.prototype.forceRestClient = function (forceRestClient) {\r\n        this.useRestClient_ = forceRestClient;\r\n    };\r\n    return RepoManager;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase database.\r\n * @implements {FirebaseService}\r\n */\r\nvar Database = /** @class */ (function () {\r\n    /**\r\n     * The constructor should not be called by users of our public API.\r\n     * @param {!Repo} repo_\r\n     */\r\n    function Database(repo_) {\r\n        this.repo_ = repo_;\r\n        if (!(repo_ instanceof Repo)) {\r\n            fatal(\"Don't call new Database() directly - please use firebase.database().\");\r\n        }\r\n        /** @type {Reference} */\r\n        this.root_ = new Reference(repo_, Path.Empty);\r\n        this.INTERNAL = new DatabaseInternals(this);\r\n    }\r\n    Object.defineProperty(Database.prototype, \"app\", {\r\n        get: function () {\r\n            return this.repo_.app;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Database.prototype.ref = function (path) {\r\n        this.checkDeleted_('ref');\r\n        util.validateArgCount('database.ref', 0, 1, arguments.length);\r\n        if (path instanceof Reference) {\r\n            return this.refFromURL(path.toString());\r\n        }\r\n        return path !== undefined ? this.root_.child(path) : this.root_;\r\n    };\r\n    /**\r\n     * Returns a reference to the root or the path specified in url.\r\n     * We throw a exception if the url is not in the same domain as the\r\n     * current repo.\r\n     * @param {string} url\r\n     * @return {!Reference} Firebase reference.\r\n     */\r\n    Database.prototype.refFromURL = function (url) {\r\n        /** @const {string} */\r\n        var apiName = 'database.refFromURL';\r\n        this.checkDeleted_(apiName);\r\n        util.validateArgCount(apiName, 1, 1, arguments.length);\r\n        var parsedURL = parseRepoInfo(url);\r\n        validateUrl(apiName, 1, parsedURL);\r\n        var repoInfo = parsedURL.repoInfo;\r\n        if (repoInfo.host !== this.repo_.repoInfo_.host) {\r\n            fatal(apiName +\r\n                ': Host name does not match the current database: ' +\r\n                '(found ' +\r\n                repoInfo.host +\r\n                ' but expected ' +\r\n                this.repo_.repoInfo_.host +\r\n                ')');\r\n        }\r\n        return this.ref(parsedURL.path.toString());\r\n    };\r\n    /**\r\n     * @param {string} apiName\r\n     */\r\n    Database.prototype.checkDeleted_ = function (apiName) {\r\n        if (this.repo_ === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    };\r\n    // Make individual repo go offline.\r\n    Database.prototype.goOffline = function () {\r\n        util.validateArgCount('database.goOffline', 0, 0, arguments.length);\r\n        this.checkDeleted_('goOffline');\r\n        this.repo_.interrupt();\r\n    };\r\n    Database.prototype.goOnline = function () {\r\n        util.validateArgCount('database.goOnline', 0, 0, arguments.length);\r\n        this.checkDeleted_('goOnline');\r\n        this.repo_.resume();\r\n    };\r\n    Database.ServerValue = {\r\n        TIMESTAMP: {\r\n            '.sv': 'timestamp'\r\n        }\r\n    };\r\n    return Database;\r\n}());\r\nvar DatabaseInternals = /** @class */ (function () {\r\n    /** @param {!Database} database */\r\n    function DatabaseInternals(database) {\r\n        this.database = database;\r\n    }\r\n    /** @return {Promise<void>} */\r\n    DatabaseInternals.prototype.delete = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            return tslib_1.__generator(this, function (_a) {\r\n                this.database.checkDeleted_('delete');\r\n                RepoManager.getInstance().deleteRepo(this.database.repo_);\r\n                this.database.repo_ = null;\r\n                this.database.root_ = null;\r\n                this.database.INTERNAL = null;\r\n                this.database = null;\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    return DatabaseInternals;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * INTERNAL methods for internal-use only (tests, etc.).\r\n *\r\n * Customers shouldn't use these or else should be aware that they could break at any time.\r\n *\r\n * @const\r\n */\r\nvar forceLongPolling = function () {\r\n    WebSocketConnection.forceDisallow();\r\n    BrowserPollConnection.forceAllow();\r\n};\r\nvar forceWebSockets = function () {\r\n    BrowserPollConnection.forceDisallow();\r\n};\r\n/* Used by App Manager */\r\nvar isWebSocketsAvailable = function () {\r\n    return WebSocketConnection['isAvailable']();\r\n};\r\nvar setSecurityDebugCallback = function (ref, callback) {\r\n    ref.repo.persistentConnection_.securityDebugCallback_ = callback;\r\n};\r\nvar stats = function (ref, showDelta) {\r\n    ref.repo.stats(showDelta);\r\n};\r\nvar statsIncrementCounter = function (ref, metric) {\r\n    ref.repo.statsIncrementCounter(metric);\r\n};\r\nvar dataUpdateCount = function (ref) {\r\n    return ref.repo.dataUpdateCount;\r\n};\r\nvar interceptServerData = function (ref, callback) {\r\n    return ref.repo.interceptServerData_(callback);\r\n};\n\nvar INTERNAL = /*#__PURE__*/Object.freeze({\n  forceLongPolling: forceLongPolling,\n  forceWebSockets: forceWebSockets,\n  isWebSocketsAvailable: isWebSocketsAvailable,\n  setSecurityDebugCallback: setSecurityDebugCallback,\n  stats: stats,\n  statsIncrementCounter: statsIncrementCounter,\n  dataUpdateCount: dataUpdateCount,\n  interceptServerData: interceptServerData\n});\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar DataConnection = PersistentConnection;\r\n/**\r\n * @param {!string} pathString\r\n * @param {function(*)} onComplete\r\n */\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n/**\r\n * @param {*} data\r\n * @param {function(*)} onEcho\r\n */\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nvar RealTimeConnection = Connection;\r\n/**\r\n * @param {function(): string} newHash\r\n * @return {function()}\r\n */\r\nvar hijackHash = function (newHash) {\r\n    var oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, opt_onComplete, opt_hash) {\r\n        if (opt_hash !== undefined) {\r\n            opt_hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, opt_onComplete, opt_hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\n/**\r\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\r\n */\r\nvar ConnectionTarget = RepoInfo;\r\n/**\r\n * @param {!Query} query\r\n * @return {!string}\r\n */\r\nvar queryIdentifier = function (query) {\r\n    return query.queryIdentifier();\r\n};\r\n/**\r\n * @param {!Query} firebaseRef\r\n * @return {!Object}\r\n */\r\nvar listens = function (firebaseRef) {\r\n    return firebaseRef.repo.persistentConnection_.listens_;\r\n};\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n *\r\n * @param {boolean} forceRestClient\r\n */\r\nvar forceRestClient = function (forceRestClient) {\r\n    RepoManager.getInstance().forceRestClient(forceRestClient);\r\n};\n\nvar TEST_ACCESS = /*#__PURE__*/Object.freeze({\n  DataConnection: DataConnection,\n  RealTimeConnection: RealTimeConnection,\n  hijackHash: hijackHash,\n  ConnectionTarget: ConnectionTarget,\n  queryIdentifier: queryIdentifier,\n  listens: listens,\n  forceRestClient: forceRestClient\n});\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar ServerValue = Database.ServerValue;\r\nfunction registerDatabase(instance) {\r\n    // Register the Database Service with the 'firebase' namespace.\r\n    var namespace = instance.INTERNAL.registerService('database', function (app, unused, url) { return RepoManager.getInstance().databaseFromApp(app, url); }, \r\n    // firebase.database namespace properties\r\n    {\r\n        Reference: Reference,\r\n        Query: Query,\r\n        Database: Database,\r\n        DataSnapshot: DataSnapshot,\r\n        enableLogging: enableLogging,\r\n        INTERNAL: INTERNAL,\r\n        ServerValue: ServerValue,\r\n        TEST_ACCESS: TEST_ACCESS\r\n    }, null, true);\r\n    if (util.isNodeSdk()) {\r\n        module.exports = namespace;\r\n    }\r\n}\r\nregisterDatabase(firebase);\n\nexports.DataSnapshot = DataSnapshot;\nexports.Database = Database;\nexports.OnDisconnect = OnDisconnect;\nexports.Query = Query;\nexports.Reference = Reference;\nexports.ServerValue = ServerValue;\nexports.enableLogging = enableLogging;\nexports.registerDatabase = registerDatabase;\n//# sourceMappingURL=index.cjs.js.map\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nvar instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\n/**\r\n * The default log level\r\n */\r\nvar defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nvar defaultLogHandler = function (instance, logType) {\r\n    var args = [];\r\n    for (var _i = 2; _i < arguments.length; _i++) {\r\n        args[_i - 2] = arguments[_i];\r\n    }\r\n    if (logType < instance.logLevel)\r\n        return;\r\n    var now = new Date().toISOString();\r\n    switch (logType) {\r\n        /**\r\n         * By default, `console.debug` is not displayed in the developer console (in\r\n         * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n         * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n         * logs to the `console.log` function.\r\n         */\r\n        case LogLevel.DEBUG:\r\n            console.log.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.VERBOSE:\r\n            console.log.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.INFO:\r\n            console.info.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.WARN:\r\n            console.warn.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.ERROR:\r\n            console.error.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        default:\r\n            throw new Error(\"Attempted to log a message with an invalid logType (value: \" + logType + \")\");\r\n    }\r\n};\r\nvar Logger = /** @class */ (function () {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    function Logger(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The log handler for the Logger instance.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    Object.defineProperty(Logger.prototype, \"logLevel\", {\r\n        get: function () {\r\n            return this._logLevel;\r\n        },\r\n        set: function (val) {\r\n            if (!(val in LogLevel)) {\r\n                throw new TypeError('Invalid value assigned to `logLevel`');\r\n            }\r\n            this._logLevel = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Logger.prototype, \"logHandler\", {\r\n        get: function () {\r\n            return this._logHandler;\r\n        },\r\n        set: function (val) {\r\n            if (typeof val !== 'function') {\r\n                throw new TypeError('Value assigned to `logHandler` must be a function');\r\n            }\r\n            this._logHandler = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    Logger.prototype.debug = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.DEBUG].concat(args));\r\n    };\r\n    Logger.prototype.log = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.VERBOSE].concat(args));\r\n    };\r\n    Logger.prototype.info = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.INFO].concat(args));\r\n    };\r\n    Logger.prototype.warn = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.WARN].concat(args));\r\n    };\r\n    Logger.prototype.error = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.ERROR].concat(args));\r\n    };\r\n    return Logger;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction setLogLevel(level) {\r\n    instances.forEach(function (inst) {\r\n        inst.logLevel = level;\r\n    });\r\n}\n\nexport { LogLevel, Logger, setLogLevel };\n//# sourceMappingURL=index.esm.js.map\n"],"sourceRoot":""}